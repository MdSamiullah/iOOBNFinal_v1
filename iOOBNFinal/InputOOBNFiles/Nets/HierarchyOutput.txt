[InputOOBNFiles\Nets\GeneratedFiles\dag_AnnualGrassHerbicide1.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_AnnualGrassHerbicide2.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_BasalAdultCoverGraze.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_BasalCoverGrowthDeath.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_BiomassNatural.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_BiomassSummaries.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_BlanketGrazeCattle.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_BlanketGrazeSheep.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_BlanketHarvest.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_BlanketHerbicideTarget.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_BlanketNatural.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_BroadleafHerbicide1.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_BroadleafHerbicide2.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_BroadleafTargetHerbicide1.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_BroadleafTargetHerbicide2.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_BroadWeedsGrazeCattle.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_BroadWeedsGrazeSheep.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_BroadWeedsHerbicideTarget.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_BroadWeedsNatural.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_BurnIntervention.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_C3GrassHerbicide.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_C3GrassTargetHerbicide1.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_C3GrassTargetHerbicide2.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_C4GrassHerbicide.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_CarbonBoostIntervention.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_EnvValue.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_ExoticAnnualGrazeCattle.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_ExoticAnnualGrazeSheep.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_ExoticAnnualHerbicideTarget.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_ExoticAnnualNatural.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_FragileScarify1.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_FragileScarify2.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_FragileScarify3.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_GrainGrazeCattle.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_GrainGrazeSheep.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_GrainHerbicideTarget.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_GrainNatural.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_GrazeInterventionCattle.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_GrazeInterventionSheep.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_HardyNativeGrazeCattle.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_HardyNativeGrazeSheep.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_HardyNativeHerbicideTarget.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_HardyNativeNatural.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_HarvestIntervention.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_HerbicideIntervention.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_HerbicideInterventionTarget.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_KilledFire1.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_KilledFire2.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_KilledFire3.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_main.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_ModerateFire.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_ModerateHarvest.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_NeedleGrazeCattle.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_NeedleGrazeSheep.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_NeedleHerbicideTarget.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_NeedleNatural.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_NuiAdder.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_NutrientCarbonBoost.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_NutrientFire.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_NutrientGrazeCattle.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_NutrientGrazeSheep.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_NutrientHarvest.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_NutrientNatural.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_NutrientRemoveTopSoil.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_OnionGrazeCattle.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_OnionGrazeSheep.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_OnionHerbicideTarget.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_OnionNatural.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_PlantIntervention.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_RedLegGrazeCattle.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_RedLegGrazeSheep.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_RedLegHerbicideTarget.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_RedLegNatural.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_RemoveTopSoil1.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_RemoveTopSoil2.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_RemoveTopSoil3.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_RemoveTopSoil4.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_RemoveTopSoil5.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_RemoveTopSoil6.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_RemoveTopSoil7.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_RemoveTopSoil8.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_RemoveTopSoilIntervention.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_RuderGrazeCattle.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_RuderGrazeSheep.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_RuderHerbicideTarget.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_RuderNatural.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_ScarifyIntervention.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_SensitiveFire.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_SensitiveHarvest.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_SensitiveHarvest2.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_SensitiveNativeSow.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_SensitNativeGrazeCattle.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_SensitNativeGrazeSheep.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_SensitNativeHerbicideTarget.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_SensitNativeNatural.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_SoilGrazeCattle.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_SoilGrazeSheep.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_SoilNatural.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_SoilRemoveTopSoil.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_SoilScarify.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_SowIntervention.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_SpearGrazeCattle.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_SpearGrazeSheep.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_SpearHerbicideTarget.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_SpearNatural.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_STGrazeCattle.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_STGrazeSheep.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_STHerbicideTarget.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_STNatural.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_TenaciousScarify1.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_TenaciousScarify2.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_ThemedaGrazeCattle.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_ThemedaGrazeSheep.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_ThemedaHarvest.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_ThemedaHerbicideTarget.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_ThemedaNatural.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_ThemedaPlant.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_ThemedaScarify.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_ThemedaSow.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_TolerantFire.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_TolerantHarvest.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_WallabyGrazeCattle.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_WallabyGrazeSheep.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_WallabyHerbicideTarget.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_WallabyNatural.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_WindmillGrazeCattle.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_WindmillGrazeSheep.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_WindmillHerbicideTarget.txt, InputOOBNFiles\Nets\GeneratedFiles\dag_WindmillNatural.txt]
-------------------------------------------------------------------------------------------
|   DAG Label |   File Name                                                               |
-------------------------------------------------------------------------------------------
|   0a        |   dag_AnnualGrassHerbicide1                                               |
-------------------------------------------------------------------------------------------
|   0b        |   dag_AnnualGrassHerbicide2                                               |
-------------------------------------------------------------------------------------------
|   0c        |   dag_BasalAdultCoverGraze                                                |
-------------------------------------------------------------------------------------------
|   0d        |   dag_BasalCoverGrowthDeath                                               |
-------------------------------------------------------------------------------------------
|   0e        |   dag_BiomassNatural                                                      |
-------------------------------------------------------------------------------------------
|   0f        |   dag_BiomassSummaries                                                    |
-------------------------------------------------------------------------------------------
|   0g        |   dag_BlanketGrazeCattle                                                  |
-------------------------------------------------------------------------------------------
|   0h        |   dag_BlanketGrazeSheep                                                   |
-------------------------------------------------------------------------------------------
|   0i        |   dag_BlanketHarvest                                                      |
-------------------------------------------------------------------------------------------
|   0j        |   dag_BlanketHerbicideTarget                                              |
-------------------------------------------------------------------------------------------
|   0k        |   dag_BlanketNatural                                                      |
-------------------------------------------------------------------------------------------
|   0l        |   dag_BroadleafHerbicide1                                                 |
-------------------------------------------------------------------------------------------
|   0m        |   dag_BroadleafHerbicide2                                                 |
-------------------------------------------------------------------------------------------
|   0n        |   dag_BroadleafTargetHerbicide1                                           |
-------------------------------------------------------------------------------------------
|   0o        |   dag_BroadleafTargetHerbicide2                                           |
-------------------------------------------------------------------------------------------
|   0p        |   dag_BroadWeedsGrazeCattle                                               |
-------------------------------------------------------------------------------------------
|   0q        |   dag_BroadWeedsGrazeSheep                                                |
-------------------------------------------------------------------------------------------
|   0r        |   dag_BroadWeedsHerbicideTarget                                           |
-------------------------------------------------------------------------------------------
|   0s        |   dag_BroadWeedsNatural                                                   |
-------------------------------------------------------------------------------------------
|   0t        |   dag_BurnIntervention                                                    |
-------------------------------------------------------------------------------------------
|   0u        |   dag_C3GrassHerbicide                                                    |
-------------------------------------------------------------------------------------------
|   0v        |   dag_C3GrassTargetHerbicide1                                             |
-------------------------------------------------------------------------------------------
|   0w        |   dag_C3GrassTargetHerbicide2                                             |
-------------------------------------------------------------------------------------------
|   0x        |   dag_C4GrassHerbicide                                                    |
-------------------------------------------------------------------------------------------
|   0y        |   dag_CarbonBoostIntervention                                             |
-------------------------------------------------------------------------------------------
|   0z        |   dag_EnvValue                                                            |
-------------------------------------------------------------------------------------------
|   aa        |   dag_ExoticAnnualGrazeCattle                                             |
-------------------------------------------------------------------------------------------
|   ab        |   dag_ExoticAnnualGrazeSheep                                              |
-------------------------------------------------------------------------------------------
|   ac        |   dag_ExoticAnnualHerbicideTarget                                         |
-------------------------------------------------------------------------------------------
|   ad        |   dag_ExoticAnnualNatural                                                 |
-------------------------------------------------------------------------------------------
|   ae        |   dag_FragileScarify1                                                     |
-------------------------------------------------------------------------------------------
|   af        |   dag_FragileScarify2                                                     |
-------------------------------------------------------------------------------------------
|   ag        |   dag_FragileScarify3                                                     |
-------------------------------------------------------------------------------------------
|   ah        |   dag_GrainGrazeCattle                                                    |
-------------------------------------------------------------------------------------------
|   ai        |   dag_GrainGrazeSheep                                                     |
-------------------------------------------------------------------------------------------
|   aj        |   dag_GrainHerbicideTarget                                                |
-------------------------------------------------------------------------------------------
|   ak        |   dag_GrainNatural                                                        |
-------------------------------------------------------------------------------------------
|   al        |   dag_GrazeInterventionCattle                                             |
-------------------------------------------------------------------------------------------
|   am        |   dag_GrazeInterventionSheep                                              |
-------------------------------------------------------------------------------------------
|   an        |   dag_HardyNativeGrazeCattle                                              |
-------------------------------------------------------------------------------------------
|   ao        |   dag_HardyNativeGrazeSheep                                               |
-------------------------------------------------------------------------------------------
|   ap        |   dag_HardyNativeHerbicideTarget                                          |
-------------------------------------------------------------------------------------------
|   aq        |   dag_HardyNativeNatural                                                  |
-------------------------------------------------------------------------------------------
|   ar        |   dag_HarvestIntervention                                                 |
-------------------------------------------------------------------------------------------
|   as        |   dag_HerbicideIntervention                                               |
-------------------------------------------------------------------------------------------
|   at        |   dag_HerbicideInterventionTarget                                         |
-------------------------------------------------------------------------------------------
|   au        |   dag_KilledFire1                                                         |
-------------------------------------------------------------------------------------------
|   av        |   dag_KilledFire2                                                         |
-------------------------------------------------------------------------------------------
|   aw        |   dag_KilledFire3                                                         |
-------------------------------------------------------------------------------------------
|   ax        |   dag_main                                                                |
-------------------------------------------------------------------------------------------
|   ay        |   dag_ModerateFire                                                        |
-------------------------------------------------------------------------------------------
|   az        |   dag_ModerateHarvest                                                     |
-------------------------------------------------------------------------------------------
|   ba        |   dag_NeedleGrazeCattle                                                   |
-------------------------------------------------------------------------------------------
|   bb        |   dag_NeedleGrazeSheep                                                    |
-------------------------------------------------------------------------------------------
|   bc        |   dag_NeedleHerbicideTarget                                               |
-------------------------------------------------------------------------------------------
|   bd        |   dag_NeedleNatural                                                       |
-------------------------------------------------------------------------------------------
|   be        |   dag_NuiAdder                                                            |
-------------------------------------------------------------------------------------------
|   bf        |   dag_NutrientCarbonBoost                                                 |
-------------------------------------------------------------------------------------------
|   bg        |   dag_NutrientFire                                                        |
-------------------------------------------------------------------------------------------
|   bh        |   dag_NutrientGrazeCattle                                                 |
-------------------------------------------------------------------------------------------
|   bi        |   dag_NutrientGrazeSheep                                                  |
-------------------------------------------------------------------------------------------
|   bj        |   dag_NutrientHarvest                                                     |
-------------------------------------------------------------------------------------------
|   bk        |   dag_NutrientNatural                                                     |
-------------------------------------------------------------------------------------------
|   bl        |   dag_NutrientRemoveTopSoil                                               |
-------------------------------------------------------------------------------------------
|   bm        |   dag_OnionGrazeCattle                                                    |
-------------------------------------------------------------------------------------------
|   bn        |   dag_OnionGrazeSheep                                                     |
-------------------------------------------------------------------------------------------
|   bo        |   dag_OnionHerbicideTarget                                                |
-------------------------------------------------------------------------------------------
|   bp        |   dag_OnionNatural                                                        |
-------------------------------------------------------------------------------------------
|   bq        |   dag_PlantIntervention                                                   |
-------------------------------------------------------------------------------------------
|   br        |   dag_RedLegGrazeCattle                                                   |
-------------------------------------------------------------------------------------------
|   bs        |   dag_RedLegGrazeSheep                                                    |
-------------------------------------------------------------------------------------------
|   bt        |   dag_RedLegHerbicideTarget                                               |
-------------------------------------------------------------------------------------------
|   bu        |   dag_RedLegNatural                                                       |
-------------------------------------------------------------------------------------------
|   bv        |   dag_RemoveTopSoil1                                                      |
-------------------------------------------------------------------------------------------
|   bw        |   dag_RemoveTopSoil2                                                      |
-------------------------------------------------------------------------------------------
|   bx        |   dag_RemoveTopSoil3                                                      |
-------------------------------------------------------------------------------------------
|   by        |   dag_RemoveTopSoil4                                                      |
-------------------------------------------------------------------------------------------
|   bz        |   dag_RemoveTopSoil5                                                      |
-------------------------------------------------------------------------------------------
|   ca        |   dag_RemoveTopSoil6                                                      |
-------------------------------------------------------------------------------------------
|   cb        |   dag_RemoveTopSoil7                                                      |
-------------------------------------------------------------------------------------------
|   cc        |   dag_RemoveTopSoil8                                                      |
-------------------------------------------------------------------------------------------
|   cd        |   dag_RemoveTopSoilIntervention                                           |
-------------------------------------------------------------------------------------------
|   ce        |   dag_RuderGrazeCattle                                                    |
-------------------------------------------------------------------------------------------
|   cf        |   dag_RuderGrazeSheep                                                     |
-------------------------------------------------------------------------------------------
|   cg        |   dag_RuderHerbicideTarget                                                |
-------------------------------------------------------------------------------------------
|   ch        |   dag_RuderNatural                                                        |
-------------------------------------------------------------------------------------------
|   ci        |   dag_ScarifyIntervention                                                 |
-------------------------------------------------------------------------------------------
|   cj        |   dag_SensitiveFire                                                       |
-------------------------------------------------------------------------------------------
|   ck        |   dag_SensitiveHarvest                                                    |
-------------------------------------------------------------------------------------------
|   cl        |   dag_SensitiveHarvest2                                                   |
-------------------------------------------------------------------------------------------
|   cm        |   dag_SensitiveNativeSow                                                  |
-------------------------------------------------------------------------------------------
|   cn        |   dag_SensitNativeGrazeCattle                                             |
-------------------------------------------------------------------------------------------
|   co        |   dag_SensitNativeGrazeSheep                                              |
-------------------------------------------------------------------------------------------
|   cp        |   dag_SensitNativeHerbicideTarget                                         |
-------------------------------------------------------------------------------------------
|   cq        |   dag_SensitNativeNatural                                                 |
-------------------------------------------------------------------------------------------
|   cr        |   dag_SoilGrazeCattle                                                     |
-------------------------------------------------------------------------------------------
|   cs        |   dag_SoilGrazeSheep                                                      |
-------------------------------------------------------------------------------------------
|   ct        |   dag_SoilNatural                                                         |
-------------------------------------------------------------------------------------------
|   cu        |   dag_SoilRemoveTopSoil                                                   |
-------------------------------------------------------------------------------------------
|   cv        |   dag_SoilScarify                                                         |
-------------------------------------------------------------------------------------------
|   cw        |   dag_SowIntervention                                                     |
-------------------------------------------------------------------------------------------
|   cx        |   dag_SpearGrazeCattle                                                    |
-------------------------------------------------------------------------------------------
|   cy        |   dag_SpearGrazeSheep                                                     |
-------------------------------------------------------------------------------------------
|   cz        |   dag_SpearHerbicideTarget                                                |
-------------------------------------------------------------------------------------------
|   da        |   dag_SpearNatural                                                        |
-------------------------------------------------------------------------------------------
|   db        |   dag_STGrazeCattle                                                       |
-------------------------------------------------------------------------------------------
|   dc        |   dag_STGrazeSheep                                                        |
-------------------------------------------------------------------------------------------
|   dd        |   dag_STHerbicideTarget                                                   |
-------------------------------------------------------------------------------------------
|   de        |   dag_STNatural                                                           |
-------------------------------------------------------------------------------------------
|   df        |   dag_TenaciousScarify1                                                   |
-------------------------------------------------------------------------------------------
|   dg        |   dag_TenaciousScarify2                                                   |
-------------------------------------------------------------------------------------------
|   dh        |   dag_ThemedaGrazeCattle                                                  |
-------------------------------------------------------------------------------------------
|   di        |   dag_ThemedaGrazeSheep                                                   |
-------------------------------------------------------------------------------------------
|   dj        |   dag_ThemedaHarvest                                                      |
-------------------------------------------------------------------------------------------
|   dk        |   dag_ThemedaHerbicideTarget                                              |
-------------------------------------------------------------------------------------------
|   dl        |   dag_ThemedaNatural                                                      |
-------------------------------------------------------------------------------------------
|   dm        |   dag_ThemedaPlant                                                        |
-------------------------------------------------------------------------------------------
|   dn        |   dag_ThemedaScarify                                                      |
-------------------------------------------------------------------------------------------
|   do        |   dag_ThemedaSow                                                          |
-------------------------------------------------------------------------------------------
|   dp        |   dag_TolerantFire                                                        |
-------------------------------------------------------------------------------------------
|   dq        |   dag_TolerantHarvest                                                     |
-------------------------------------------------------------------------------------------
|   dr        |   dag_WallabyGrazeCattle                                                  |
-------------------------------------------------------------------------------------------
|   ds        |   dag_WallabyGrazeSheep                                                   |
-------------------------------------------------------------------------------------------
|   dt        |   dag_WallabyHerbicideTarget                                              |
-------------------------------------------------------------------------------------------
|   du        |   dag_WallabyNatural                                                      |
-------------------------------------------------------------------------------------------
|   dv        |   dag_WindmillGrazeCattle                                                 |
-------------------------------------------------------------------------------------------
|   dw        |   dag_WindmillGrazeSheep                                                  |
-------------------------------------------------------------------------------------------
|   dx        |   dag_WindmillHerbicideTarget                                             |
-------------------------------------------------------------------------------------------
|   dy        |   dag_WindmillNatural                                                     |
-------------------------------------------------------------------------------------------
The DAG : dag_BiomassNatural_dag_BiomassSummaries.txt : 
LPalC <[0e, 0f]> : [{}]
LPalS <[0e, 0f]> : [{}]
MComp <[0e, 0f]> : [{}]
SComp <[0e, 0f]> : [{}]
MPalC <[0e, 0f]> : [{}]
MPalS <[0e, 0f]> : [{}]
VLPalC <[0e, 0f]> : [{}]
VLPalS <[0e, 0f]> : [{}]
WComp <[0e, 0f]> : [{}]
HPalC <[0e, 0f]> : [{}]
HPalS <[0e, 0f]> : [{}]
VSComp <[0e, 0f]> : [{}]



The DAG : dag_BiomassNatural.txt : 
HPalCulmS <[0e]> : [{MPalCulmS=[0e], PalSumSheep=[0e]}]
CompSum <[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, 0e, dy, 0k, da]> : [{}]
VLPalC <[0e, 0f]> : [{VLPalCulmC=[0e]}]
PalSumSheep <[bb, 0q, ab, cf, di, ai, bn, co, ao, ds, bs, dw, 0e, cy, 0h, dc]> : [{}]
LPalCulmS <[0e]> : [{VLPalCulmS=[0e], PalSumSheep=[0e]}]
LPalS <[0e, 0f]> : [{LPalCulmS=[0e]}]
VSCompCulm <[0e]> : [{}]
MPalC <[0e, 0f]> : [{MPalCulmC=[0e]}]
WCompCulm <[0e]> : [{}]
HPalS <[0e, 0f]> : [{HPalCulmS=[0e]}]
LPalCulmC <[0e]> : [{}]
VSComp <[0e, 0f]> : [{VSCompCulm=[0e]}]
LPalC <[0e, 0f]> : [{LPalCulmC=[0e]}]
MPalCulmC <[0e]> : [{}]
MComp <[0e, 0f]> : [{MCompCulm=[0e]}]
VLPalCulmC <[0e]> : [{}]
MPalS <[0e, 0f]> : [{MPalCulmS=[0e]}]
SCompCulm <[0e]> : [{}]
WComp <[0e, 0f]> : [{WCompCulm=[0e]}]
HPalC <[0e, 0f]> : [{HPalCulmC=[0e]}]
MCompCulm <[0e]> : [{WCompCulm=[0e]}]
PalSumCattle <[0p, aa, ce, dh, ah, bm, cn, an, dr, br, dv, 0e, cx, 0g, db, ba]> : [{}]
MPalCulmS <[0e]> : [{LPalCulmS=[0e], PalSumSheep=[0e]}]
HPalCulmC <[0e]> : [{}]
VLPalCulmS <[0e]> : [{PalSumSheep=[0e]}]
SComp <[0e, 0f]> : [{SCompCulm=[0e]}]
VLPalS <[0e, 0f]> : [{VLPalCulmS=[0e]}]



The DAG : dag_BiomassSummaries.txt : 
VLPalS11001 <[0f]> : [{}]
WComp1110 <[0f]> : [{}]
VLPalS11000 <[0f]> : [{}]
WComp1111 <[0f]> : [{}]
WComp10001 <[0f]> : [{}]
WComp10000 <[0f]> : [{}]
VLPalS00101 <[0f]> : [{}]
LPalC00 <[0f]> : [{}]
LPalC01 <[0f]> : [{}]
VLPalS00100 <[0f]> : [{}]
HardyNative_Basal <[0f, ax]> : [{BBio010=[0f]}]
VSComp <[0e, 0f]> : [{}]
MComp01 <[0f]> : [{}]
HPalC000 <[0f]> : [{}]
MComp00 <[0f]> : [{}]
HPalC001 <[0f]> : [{}]
WComp1000 <[0f]> : [{}]
MPalC0 <[0f]> : [{}]
WComp1001 <[0f]> : [{}]
VLPalS0100 <[0f]> : [{}]
MPalC1 <[0f]> : [{}]
RedLeg_Cover <[0f, ax, 0z]> : [{MPalS000=[0f], LBio101=[0f], MComp0000=[0f], LPalS000=[0f], SComp000=[0f], LPalC000=[0f], MPalC000=[0f]}]
MPalS0 <[0f]> : [{}]
TBio <[ct, 0t, 0f, 0z]> : [{}]
MPalS1 <[0f]> : [{}]
HardyNative_Dead <[0f, ax]> : [{VLPalS0111=[0f], VLPalC0110=[0f], WComp0101=[0f], DBio001=[0f]}]
VLPalS0101 <[0f]> : [{}]
DBio <[0f]> : [{}]
Onion_Cover <[0f, ax, 0z]> : [{SComp101=[0f], VLPalS11001=[0f], LBio001=[0f], MComp1001=[0f], VLPalC11001=[0f], WComp11001=[0f]}]
WComp0001 <[0f]> : [{}]
WComp0000 <[0f]> : [{}]
VLPalS0110 <[0f]> : [{}]
WComp11 <[0f]> : [{}]
VLPalS0111 <[0f]> : [{}]
LPalS000 <[0f]> : [{}]
LPalS001 <[0f]> : [{}]
WComp10 <[0f]> : [{}]
BBio1 <[0f]> : [{}]
BBio0 <[0f]> : [{}]
HardyNative_Cover <[0f, ax, 0z]> : [{LPalS11=[0f], LPalC11=[0f], WComp0110=[0f], SComp11=[0f], MComp110=[0f], LBio11=[0f]}]
Windmill_Basal <[0f, ax]> : [{BBio11=[0f]}]
DBio000 <[0f]> : [{}]
DBio001 <[0f]> : [{}]
HPalS001 <[0f]> : [{}]
HPalS000 <[0f]> : [{}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{VLPalS11001=[0f], VLPalS11000=[0f], VLPalC10001=[0f], VLPalS1101=[0f], VLPalS0011=[0f], VLPalC10000=[0f], VLPalC0101=[0f], MPalS01=[0f], VLPalS00101=[0f], LPalC01=[0f], HPalS100=[0f], VLPalC00000=[0f], VLPalC00001=[0f], VLPalC0111=[0f], VLPalS00100=[0f], VLPalC0110=[0f], HPalS101=[0f], VLPalC1001=[0f], MPalC100=[0f], MPalC11=[0f], MPalC101=[0f], LPalC101=[0f], HPalC000=[0f], LPalC100=[0f], HPalC001=[0f], VLPalS1111=[0f], VLPalS1110=[0f], VLPalS10100=[0f], VLPalS10101=[0f], MPalS10=[0f], MPalS11=[0f], VLPalC1110=[0f], VLPalS01000=[0f], VLPalS01001=[0f], VLPalC1111=[0f], VLPalS0101=[0f], HPalC01=[0f], MPalS000=[0f], HPalC10=[0f], LPalS11=[0f], VLPalS0110=[0f], VLPalS0111=[0f], VLPalS1001=[0f], LPalS10=[0f], LPalS000=[0f], LPalS001=[0f], MPalS001=[0f], HPalS01=[0f], VLPalC00101=[0f], HPalS001=[0f], HPalS000=[0f], VLPalC00100=[0f], VLPalC1101=[0f], VLPalS00000=[0f], VLPalC0011=[0f], VLPalS00001=[0f], MPalC001=[0f], HPalC11=[0f], LPalC001=[0f], LPalC000=[0f], MPalC000=[0f], VLPalS10000=[0f], LPalS01=[0f], VLPalS0001=[0f], VLPalS10001=[0f], VLPalC11001=[0f], VLPalS1011=[0f], VLPalC11000=[0f], HPalS11=[0f], LPalC11=[0f], VLPalC1011=[0f], VLPalC1010=[0f], VLPalC01001=[0f], VLPalC0001=[0f], VLPalC01000=[0f], MPalC01=[0f]}]
WComp10100 <[0f]> : [{}]
WComp10101 <[0f]> : [{}]
LPalC001 <[0f]> : [{}]
LPalC000 <[0f]> : [{}]
Needle_Basal <[0f, ax]> : [{BBio000=[0f]}]
WComp0010 <[0f]> : [{}]
VLPalS10000 <[0f]> : [{}]
VSComp11 <[0f]> : [{}]
WComp1101 <[0f]> : [{}]
ExoticAnnual_Dead <[0f, ax]> : [{VLPalS0110=[0f], WComp01001=[0f], VLPalC0101=[0f], DBio010=[0f]}]
WComp1100 <[0f]> : [{}]
WComp0011 <[0f]> : [{}]
VLPalS0000 <[0f]> : [{}]
MComp0000 <[0f]> : [{}]
WComp00 <[0f]> : [{}]
RedLeg_Dead <[0f, ax]> : [{VLPalS10100=[0f], VLPalC1001=[0f], WComp10100=[0f], DBio110=[0f]}]
VLPalS0001 <[0f]> : [{}]
VSComp10 <[0f]> : [{}]
MComp0001 <[0f]> : [{}]
WComp01 <[0f]> : [{}]
VLPalS10001 <[0f]> : [{}]
Needle_Dead <[0f, ax]> : [{VLPalS10000=[0f], WComp0111=[0f], VLPalC0111=[0f], DBio110=[0f]}]
DBio010 <[0f]> : [{}]
DBio011 <[0f]> : [{}]
Ruderals_Dead <[0f, ax]> : [{WComp10000=[0f], VLPalS10001=[0f], VLPalC10000=[0f], DBio001=[0f]}]
BBio11 <[0f]> : [{}]
BBio10 <[0f]> : [{}]
ExoticAnnual_Cover <[0f, ax, 0z]> : [{LBio000=[0f], VLPalC0001=[0f], VLPalS00100=[0f], MPalS001=[0f], WComp00001=[0f], MPalC01=[0f], HPalS01=[0f], HPalC01=[0f], MComp011=[0f]}]
BroadWeeds_Basal <[0f, ax]> : [{BBio00=[0f]}]
VSComp00 <[0f]> : [{}]
VSComp01 <[0f]> : [{}]
MPalS00 <[0f]> : [{}]
WComp00001 <[0f]> : [{}]
MPalS01 <[0f]> : [{}]
WComp00000 <[0f]> : [{}]
DBio101 <[0f]> : [{}]
VLPalC1 <[0f]> : [{}]
Blanket_Cover <[as, at, 0f, ax, 0z]> : [{LBio000=[0f], VSComp00=[0f], LPalC01=[0f], VLPalS00001=[0f], MPalC001=[0f], SComp01=[0f]}]
VLPalC0 <[0f]> : [{}]
DBio100 <[0f]> : [{}]
HPalS100 <[0f]> : [{}]
VLPalC1000 <[0f]> : [{}]
VLPalC00000 <[0f]> : [{}]
VLPalC00001 <[0f]> : [{}]
MPalC <[0e, 0f]> : [{}]
HPalS101 <[0f]> : [{}]
VLPalC1001 <[0f]> : [{}]
DBio11 <[0f]> : [{}]
MPalC10 <[0f]> : [{}]
MPalC100 <[0f]> : [{}]
MPalC11 <[0f]> : [{}]
MPalC101 <[0f]> : [{}]
VSComp0 <[0f]> : [{}]
VSComp1 <[0f]> : [{}]
VLPalS1 <[0f]> : [{}]
VLPalS0 <[0f]> : [{}]
DBio10 <[0f]> : [{}]
MComp <[0e, 0f]> : [{}]
Blanket_Dead <[0f, ax]> : [{VLPalS11000=[0f], VLPalC11000=[0f], WComp11000=[0f], DBio101=[0f]}]
VLPalS10100 <[0f]> : [{}]
Onion_Basal <[0f, ax]> : [{BBio100=[0f]}]
VLPalS10101 <[0f]> : [{}]
Ruderals_Cover <[0f, ax, 0z]> : [{LBio011=[0f], WComp10001=[0f], LPalS001=[0f], LPalC001=[0f]}]
MPalS10 <[0f]> : [{}]
MPalS11 <[0f]> : [{}]
DBio110 <[0f]> : [{}]
WComp1 <[0f]> : [{}]
WComp0 <[0f]> : [{}]
SComp <[0e, 0f]> : [{}]
VLPalC1110 <[0f]> : [{}]
VLPalC1111 <[0f]> : [{}]
ST_Basal <[0f, ax]> : [{BBio100=[0f]}]
RedLeg_Basal <[0f, ax]> : [{BBio000=[0f]}]
WComp11000 <[0f]> : [{}]
WComp11001 <[0f]> : [{}]
WComp1011 <[0f]> : [{}]
WComp1010 <[0f]> : [{}]
LPalS11 <[0f]> : [{}]
Wallaby_Basal <[0f, ax]> : [{BBio01=[0f]}]
LPalS10 <[0f]> : [{}]
SComp01 <[0f]> : [{}]
WComp00100 <[0f]> : [{}]
SComp00 <[0f]> : [{}]
Themeda_Dead <[0f, ax]> : [{VLPalS00101=[0f], VLPalC00100=[0f], DBio11=[0f], WComp00100=[0f]}]
WComp00101 <[0f]> : [{}]
LBio0 <[0f]> : [{}]
LBio1 <[0f]> : [{}]
BBio010 <[0f]> : [{}]
LPalS00 <[0f]> : [{}]
Windmill_Cover <[0f, ax, 0z]> : [{LBio100=[0f], HPalC10=[0f], HPalS100=[0f], MPalC100=[0f], MPalS01=[0f], WComp01000=[0f]}]
LPalS01 <[0f]> : [{}]
BroadWeeds_Cover <[as, at, 0f, ax, 0z]> : [{LBio110=[0f], VLPalC00000=[0f], MComp0001=[0f], VLPalS00000=[0f], SComp001=[0f]}]
SComp10 <[0f]> : [{}]
Grain_Cover <[0f, ax, 0z]> : [{LBio110=[0f], VLPalC1110=[0f], VLPalS1110=[0f], MPalS11=[0f], MPalC11=[0f], MComp111=[0f], HPalS11=[0f], HPalC11=[0f]}]
SComp11 <[0f]> : [{}]
WComp <[0e, 0f]> : [{}]
LPalC11 <[0f]> : [{}]
VLPalC1011 <[0f]> : [{}]
ST_Dead <[0f, ax]> : [{VLPalS0001=[0f], VLPalC00001=[0f], WComp00000=[0f], DBio100=[0f]}]
LPalC10 <[0f]> : [{}]
VLPalC1010 <[0f]> : [{}]
VLPalC01001 <[0f]> : [{}]
VLPalC01000 <[0f]> : [{}]
DBio00 <[0f]> : [{}]
DBio01 <[0f]> : [{}]
MPalC00 <[0f]> : [{}]
MPalC01 <[0f]> : [{}]
BBio000 <[0f]> : [{}]
Windmill_Dead <[0f, ax]> : [{VLPalC10001=[0f], WComp1001=[0f], VLPalS1001=[0f], DBio100=[0f]}]
VLPalC10001 <[0f]> : [{}]
VLPalS111 <[0f]> : [{}]
VLPalS110 <[0f]> : [{}]
VLPalC10000 <[0f]> : [{}]
VLPalC0101 <[0f]> : [{}]
Onion_Dead <[0f, ax]> : [{WComp1101=[0f], VLPalS1101=[0f], VLPalC1101=[0f], DBio010=[0f]}]
MComp111 <[0f]> : [{}]
MComp110 <[0f]> : [{}]
SComp000 <[0f]> : [{}]
WComp001 <[0f]> : [{}]
SComp001 <[0f]> : [{}]
WComp000 <[0f]> : [{}]
Spear_Basal <[0f, ax]> : [{BBio110=[0f]}]
VLPalC110 <[0f]> : [{}]
VLPalC111 <[0f]> : [{}]
VLPalC0111 <[0f]> : [{}]
SensitNative_Cover <[0f, ax, 0z]> : [{WComp0001=[0f], LBio101=[0f], HPalS001=[0f], MComp010=[0f], HPalC001=[0f]}]
VLPalC0110 <[0f]> : [{}]
BBio110 <[0f]> : [{}]
LPalC <[0e, 0f]> : [{}]
VLPalS101 <[0f]> : [{}]
VLPalS100 <[0f]> : [{}]
Wallaby_Cover <[0f, ax, 0z]> : [{LBio100=[0f], HPalS000=[0f], MComp001=[0f], HPalC000=[0f]}]
Themeda_Cover <[0f, ax, 0z]> : [{WComp1110=[0f], LBio001=[0f], VSComp11=[0f], HPalS101=[0f], MPalS10=[0f], MPalC101=[0f], MComp101=[0f]}]
WComp01001 <[0f]> : [{}]
WComp01000 <[0f]> : [{}]
MComp001 <[0f]> : [{}]
MComp000 <[0f]> : [{}]
WComp111 <[0f]> : [{}]
WComp110 <[0f]> : [{}]
VLPalC100 <[0f]> : [{}]
VLPalC101 <[0f]> : [{}]
VLPalC0100 <[0f]> : [{}]
BBio100 <[0f]> : [{}]
LBio <[ct, 0t, 0f]> : [{}]
Ruderals_Basal <[0f, ax]> : [{BBio010=[0f]}]
MPalS000 <[0f]> : [{}]
LBio011 <[0f]> : [{}]
Grain_Dead <[0f, ax]> : [{VLPalC00101=[0f], VLPalS0011=[0f], WComp00101=[0f], DBio011=[0f]}]
Themeda_Basal <[0f, ax]> : [{BBio10=[0f]}]
HPalC10 <[0f]> : [{}]
MPalS001 <[0f]> : [{}]
LBio010 <[0f]> : [{}]
WComp101 <[0f]> : [{}]
MComp010 <[0f]> : [{}]
HPalS01 <[0f]> : [{}]
MComp011 <[0f]> : [{}]
HPalS00 <[0f]> : [{}]
WComp100 <[0f]> : [{}]
SComp100 <[0f]> : [{}]
SComp101 <[0f]> : [{}]
DBio1 <[0f]> : [{}]
DBio0 <[0f]> : [{}]
VLPalC00101 <[0f]> : [{}]
HPalS10 <[0f]> : [{}]
SensitNative_Dead <[0f, ax]> : [{WComp1011=[0f], VLPalC1011=[0f], VLPalS1011=[0f], DBio000=[0f]}]
VLPalC01 <[0f]> : [{}]
VLPalC0010 <[0f]> : [{}]
VLPalC00 <[0f]> : [{}]
VLPalC00100 <[0f]> : [{}]
VLPalC1101 <[0f]> : [{}]
VLPalC1100 <[0f]> : [{}]
VLPalC0011 <[0f]> : [{}]
MPalC001 <[0f]> : [{}]
HPalC11 <[0f]> : [{}]
MPalC000 <[0f]> : [{}]
LBio000 <[0f]> : [{}]
LBio001 <[0f]> : [{}]
VLPalS01 <[0f]> : [{}]
VLPalS00 <[0f]> : [{}]
VLPalC11001 <[0f]> : [{}]
MPalS <[0e, 0f]> : [{}]
VLPalC11000 <[0f]> : [{}]
LPalS1 <[0f]> : [{}]
LPalS0 <[0f]> : [{}]
HPalC <[0e, 0f]> : [{}]
HPalS11 <[0f]> : [{}]
VLPalC11 <[0f]> : [{}]
VLPalC10 <[0f]> : [{}]
VLPalC0001 <[0f]> : [{}]
VLPalC0000 <[0f]> : [{}]
LPalC1 <[0f]> : [{}]
BBio <[0t, 0f]> : [{}]
LPalC0 <[0f]> : [{}]
LBio110 <[0f]> : [{}]
WComp0100 <[0f]> : [{}]
VLPalS1101 <[0f]> : [{}]
VLPalS0011 <[0f]> : [{}]
VLPalS11 <[0f]> : [{}]
VLPalS1100 <[0f]> : [{}]
VLPalS10 <[0f]> : [{}]
VLPalS0010 <[0f]> : [{}]
WComp0101 <[0f]> : [{}]
BBio01 <[0f]> : [{}]
BBio00 <[0f]> : [{}]
HPalS <[0e, 0f]> : [{}]
LPalC101 <[0f]> : [{}]
LPalC100 <[0f]> : [{}]
LBio01 <[0f]> : [{}]
LBio00 <[0f]> : [{}]
LBio100 <[0f]> : [{}]
LBio101 <[0f]> : [{}]
WComp0111 <[0f]> : [{}]
WComp0110 <[0f]> : [{}]
VLPalS1111 <[0f]> : [{}]
VLPalS1110 <[0f]> : [{}]
SensitNative_Basal <[0f, ax]> : [{BBio110=[0f]}]
HPalC1 <[0f]> : [{}]
Spear_Cover <[0f, ax, 0z]> : [{MComp1000=[0f], LPalS01=[0f], LBio010=[0f], LPalC100=[0f], SComp100=[0f]}]
HPalC0 <[0f]> : [{}]
ST_Cover <[as, at, 0f, ax, 0z]> : [{LBio011=[0f], VSComp01=[0f], VLPalC01001=[0f], VLPalS0101=[0f]}]
VLPalS01000 <[0f]> : [{}]
VLPalS01001 <[0f]> : [{}]
LBio10 <[0f]> : [{}]
HPalC01 <[0f]> : [{}]
HPalC00 <[0f]> : [{}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{WComp1110=[0f], WComp1011=[0f], VSComp00=[0f], MComp1000=[0f], WComp0001=[0f], VSComp01=[0f], WComp1111=[0f], WComp10001=[0f], WComp10000=[0f], MComp1001=[0f], SComp01=[0f], MComp010=[0f], WComp00100=[0f], WComp00001=[0f], WComp00000=[0f], MComp111=[0f], MComp110=[0f], MComp011=[0f], WComp0101=[0f], WComp00101=[0f], SComp000=[0f], SComp100=[0f], SComp001=[0f], SComp101=[0f], WComp10100=[0f], WComp10101=[0f], VSComp11=[0f], WComp1101=[0f], WComp0111=[0f], WComp1001=[0f], WComp0110=[0f], WComp0011=[0f], MComp0000=[0f], VSComp10=[0f], MComp0001=[0f], WComp01001=[0f], SComp11=[0f], WComp01000=[0f], MComp001=[0f], MComp101=[0f], WComp11000=[0f], WComp11001=[0f]}]
LBio11 <[0f]> : [{}]
HPalS1 <[0f]> : [{}]
HPalS0 <[0f]> : [{}]
MComp1000 <[0f]> : [{}]
VLPalS011 <[0f]> : [{}]
MComp1001 <[0f]> : [{}]
VLPalS1001 <[0f]> : [{}]
VLPalS010 <[0f]> : [{}]
VLPalS1000 <[0f]> : [{}]
VLPalC <[0e, 0f]> : [{}]
LPalS <[0e, 0f]> : [{}]
VLPalC010 <[0f]> : [{}]
VLPalC011 <[0f]> : [{}]
VLPalS00000 <[0f]> : [{}]
VLPalS00001 <[0f]> : [{}]
BroadWeeds_Dead <[0f, ax]> : [{WComp0011=[0f], VLPalS01000=[0f], VLPalC0011=[0f], DBio000=[0f]}]
Needle_Cover <[as, at, 0f, ax, 0z]> : [{VSComp10=[0f], LPalS10=[0f], VLPalS01001=[0f], VLPalC01000=[0f], LBio010=[0f], LPalC101=[0f]}]
VLPalS001 <[0f]> : [{}]
VLPalS000 <[0f]> : [{}]
VLPalS1011 <[0f]> : [{}]
VLPalS1010 <[0f]> : [{}]
SComp0 <[0f]> : [{}]
SComp1 <[0f]> : [{}]
MComp100 <[0f]> : [{}]
WComp010 <[0f]> : [{}]
MComp101 <[0f]> : [{}]
WComp011 <[0f]> : [{}]
VLPalC000 <[0f]> : [{}]
VLPalC001 <[0f]> : [{}]
MComp10 <[0f]> : [{}]
VLPalS <[0e, 0f]> : [{}]
MComp1 <[0f]> : [{}]
MComp0 <[0f]> : [{}]
Spear_Dead <[0f, ax]> : [{WComp1111=[0f], VLPalS1111=[0f], VLPalC1111=[0f], DBio011=[0f]}]
Wallaby_Dead <[0f, ax]> : [{VLPalC1010=[0f], VLPalS10101=[0f], DBio101=[0f], WComp10101=[0f]}]
MComp11 <[0f]> : [{}]



The DAG : dag_SoilNatural_dag_ThemedaNatural_dag_SensitiveNativeSow.txt : 
SoilTemperature <[ct, dl, cm]> : [{}]
SoilMoisture <[ct, dl, cm]> : [{}]
Shade <[ct, dl, cm]> : [{}]



The DAG : dag_SensitiveNativeSow.txt : 
Seed_No <[cm]> : [{New_Germ=[cm]}]
Input_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Basal=[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
SoilTemperature <[ct, dl, cm]> : [{Germ_Rate=[cm]}]
New_Germ <[cm]> : [{Output_Basal=[cm]}]
Output_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
SowStrategy <[cw, cm, do]> : [{Seed_No=[cm]}]
SoilMoisture <[ct, dl, cm]> : [{Germ_Rate=[cm]}]
Surv_Pro <[cm]> : [{Output_Basal=[cm]}]
Germ_Rate <[cm]> : [{New_Germ=[cm]}]
Shade <[ct, dl, cm]> : [{Surv_Pro=[cm]}]



The DAG : dag_SoilNatural.txt : 
Rain <[ct]> : [{SoilMoisture=[ct]}]
TBio <[ct, 0t, 0f, 0z]> : [{Shade=[ct]}]
Temp <[ct]> : [{SoilTemperature=[ct]}]
SoilTemperature <[ct, dl, cm]> : [{}]
SoilMoisture <[ct, dl, cm]> : [{}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{Rain=[ct], Temp=[ct]}]
C1 <[ct]> : [{SoilMoisture=[ct]}]
LBio <[ct, 0t, 0f]> : [{C1=[ct]}]
Shade <[ct, dl, cm]> : [{SoilTemperature=[ct], SoilMoisture=[ct]}]



The DAG : dag_SowIntervention_dag_SensitiveNativeSow_dag_ThemedaSow.txt : 
SowStrategy <[cw, cm, do]> : [{}]



The DAG : dag_SowIntervention.txt : 
SowCost <[cw]> : [{}]
SowStrategy <[cw, cm, do]> : [{SowCost=[cw]}]
Scale <[ar, cd, as, 0t, cw, ci, ax, 0y, al, am, bq]> : [{SowCost=[cw]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{SowCost=[cw]}]



The DAG : dag_ThemedaSow.txt : 
Input_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{Output_Seeds=[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
SowStrategy <[cw, cm, do]> : [{Output_Seeds=[do]}]
Output_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]



The DAG : dag_NuiAdder_dag_NutrientFire_dag_NutrientNatural.txt : 
NUI <[be, bg, bk]> : [{}]



The DAG : dag_NuiAdder.txt : 
Blanket_NUI <[be]> : [{NUI01=[be]}]
RedLeg_NUI <[be]> : [{NUI00=[be]}]
Wallaby_NUI <[be]> : [{NUI1=[be]}]
Windmill_NUI <[be]> : [{NUI2=[be]}]
NUI00 <[be]> : [{}]
NUI01 <[be]> : [{}]
NUI20 <[be]> : [{}]
NUI21 <[be]> : [{}]
Ruderals_NUI <[be]> : [{NUI00=[be]}]
HardyNative_NUI <[be]> : [{NUI21=[be]}]
Grain_NUI <[be]> : [{NUI11=[be]}]
ExoticAnnual_NUI <[be]> : [{NUI10=[be]}]
Spear_NUI <[be]> : [{NUI20=[be]}]
SensitNative_NUI <[be]> : [{NUI11=[be]}]
NUI <[be, bg, bk]> : [{}]
NUI0 <[be]> : [{}]
ST_NUI <[be]> : [{NUI20=[be]}]
NUI1 <[be]> : [{}]
NUI11 <[be]> : [{}]
NUI10 <[be]> : [{}]
NUI2 <[be]> : [{}]
Themeda_NUI <[be]> : [{NUI01=[be]}]
Onion_NUI <[be]> : [{NUI10=[be]}]
BroadWeeds_NUI <[be]> : [{NUI21=[be]}]
Needle_NUI <[be]> : [{NUI0=[be]}]



The DAG : dag_NutrientFire_dag_NutrientNatural.txt : 
Input_Nitrogen <[bf, bg, bh, bi, bk, bl]> : [{Output_Nitrogen=[bf, bg, bh, bi, bk, bl]}]
Output_Phosphorous <[bf, bg, bh, bi, bk, bl]> : [{NL=[bf, bg, bh, bi, bk, bl]}]
NUI <[be, bg, bk]> : [{Output_Nitrogen=[bg, bk]}]
Input_Phosphorous <[bf, bg, bh, bi, bk, bl]> : [{Output_Phosphorous=[bf, bg, bh, bi, bk, bl]}]
Output_Carbon <[bf, bg, bh, bi, bk, bl]> : [{NL=[bf, bg, bh, bi, bk, bl]}]
Output_Nitrogen <[bf, bg, bh, bi, bk, bl]> : [{NL=[bf, bg, bh, bi, bk, bl]}]
Input_Carbon <[bf, bg, bh, bi, bk, bl]> : [{Output_Carbon=[bf, bg, bh, bi, bk, bl]}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{}]



The DAG : dag_NutrientFire.txt : 
Burn <[0t, au, av, bg, aw, cj, ay, dp]> : [{Output_Carbon=[bg]}]
Input_Nitrogen <[bf, bg, bh, bi, bk, bl]> : [{Output_Nitrogen=[bf, bg, bh, bi, bk, bl]}]
Output_Phosphorous <[bf, bg, bh, bi, bk, bl]> : [{NL=[bf, bg, bh, bi, bk, bl]}]
NUI <[be, bg, bk]> : [{Output_Nitrogen=[bg, bk]}]
Input_Phosphorous <[bf, bg, bh, bi, bk, bl]> : [{Output_Phosphorous=[bf, bg, bh, bi, bk, bl]}]
Output_Carbon <[bf, bg, bh, bi, bk, bl]> : [{NL=[bf, bg, bh, bi, bk, bl]}]
Output_Nitrogen <[bf, bg, bh, bi, bk, bl]> : [{NL=[bf, bg, bh, bi, bk, bl]}]
Input_Carbon <[bf, bg, bh, bi, bk, bl]> : [{Output_Carbon=[bf, bg, bh, bi, bk, bl]}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{}]



The DAG : dag_SoilNatural_dag_BurnIntervention_dag_BiomassSummaries_dag_EnvValue.txt : 
TBio <[ct, 0t, 0f, 0z]> : [{}]



The DAG : dag_SoilNatural_dag_BurnIntervention_dag_BiomassSummaries.txt : 
TBio <[ct, 0t, 0f, 0z]> : [{}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{}]
LBio <[ct, 0t, 0f]> : [{}]



The DAG : dag_BurnIntervention_dag_BiomassSummaries.txt : 
TBio <[ct, 0t, 0f, 0z]> : [{}]
BBio <[0t, 0f]> : [{}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{}]
LBio <[ct, 0t, 0f]> : [{}]



The DAG : dag_BurnIntervention.txt : 
Burn <[0t, au, av, bg, aw, cj, ay, dp]> : [{}]
Wildfire <[0t]> : [{}]
BurnCost <[0t]> : [{}]
BD <[0t, ax]> : [{BurnCost=[0t]}]
TBio <[ct, 0t, 0f, 0z]> : [{Wildfire=[0t], TargetBurn=[0t]}]
BBio <[0t, 0f]> : [{TargetBurn=[0t]}]
TargetBurn <[0t]> : [{}]
Scale <[ar, cd, as, 0t, cw, ci, ax, 0y, al, am, bq]> : [{BurnCost=[0t]}]
BurnStrategy <[0t]> : [{TargetBurn=[0t]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{Wildfire=[0t]}]
LBio <[ct, 0t, 0f]> : [{TargetBurn=[0t]}]



The DAG : dag_SoilGrazeSheep_dag_SoilRemoveTopSoil_dag_SoilScarify_dag_SoilGrazeCattle.txt : 
Input_Friability <[cs, cu, cv, cr]> : [{Output_Friability=[cs, cu, cv, cr]}]
Output_Friability <[cs, cu, cv, cr]> : [{}]



The DAG : dag_SoilRemoveTopSoil.txt : 
Input_Friability <[cs, cu, cv, cr]> : [{Output_Friability=[cs, cu, cv, cr]}]
RemoveTopSoil <[cc, cd, cu, bv, bw, bx, by, bz, bl, ca, cb]> : [{Output_Friability=[cu]}]
Output_Friability <[cs, cu, cv, cr]> : [{}]



The DAG : dag_SoilScarify.txt : 
Input_Friability <[cs, cu, cv, cr]> : [{Output_Friability=[cs, cu, cv, cr]}]
Scarify <[df, cv, dg, ae, af, ag, ci, dn]> : [{Output_Friability=[cv]}]
Output_Friability <[cs, cu, cv, cr]> : [{}]



The DAG : dag_HerbicideIntervention_dag_HerbicideInterventionTarget_dag_BiomassSummaries_dag_main_dag_EnvValue.txt : 
Needle_Cover <[as, at, 0f, ax, 0z]> : [{}]
ST_Cover <[as, at, 0f, ax, 0z]> : [{}]
BroadWeeds_Cover <[as, at, 0f, ax, 0z]> : [{}]
Blanket_Cover <[as, at, 0f, ax, 0z]> : [{}]



The DAG : dag_HerbicideIntervention_dag_HerbicideInterventionTarget.txt : 
HerbicideStrategy <[as, at]> : [{Application=[as, at]}]
Target <[dd, bc, 0r, ac, cg, dk, aj, bo, cp, ap, dt, as, bt, at, dx, cz, 0j]> : [{}]
Needle_Cover <[as, at, 0f, ax, 0z]> : [{}]
ST_Cover <[as, at, 0f, ax, 0z]> : [{}]
BroadWeeds_Cover <[as, at, 0f, ax, 0z]> : [{}]
Application <[dd, bc, 0r, 0u, 0v, 0w, dk, 0x, bo, dt, bt, dx, ac, cg, aj, cp, ap, 0a, 0b, as, at, cz, 0j, 0l, 0m, 0n, 0o]> : [{HerbicideCost=[as, at]}]
HerbicideCost <[as, at]> : [{}]
Blanket_Cover <[as, at, 0f, ax, 0z]> : [{}]



The DAG : dag_HerbicideIntervention.txt : 
Needle_Cover <[as, at, 0f, ax, 0z]> : [{C3Target=[as]}]
BroadWeeds_Cover <[as, at, 0f, ax, 0z]> : [{BLTarget=[as]}]
Product <[0a, 0b, as, 0u, 0v, 0w, 0x, 0l, 0m, 0n, 0o]> : [{HerbicideCost=[as]}]
Scale <[ar, cd, as, 0t, cw, ci, ax, 0y, al, am, bq]> : [{HerbicideCost=[as]}]
C3Target <[as]> : [{HerbicideCost=[as]}]
Blanket_Cover <[as, at, 0f, ax, 0z]> : [{BLTarget=[as]}]
HerbicideStrategy <[as, at]> : [{Application=[as, at]}]
BLTarget <[as]> : [{HerbicideCost=[as]}]
Target <[dd, bc, 0r, ac, cg, dk, aj, bo, cp, ap, dt, as, bt, at, dx, cz, 0j]> : [{HerbicideCost=[as]}]
ST_Cover <[as, at, 0f, ax, 0z]> : [{C3Target=[as]}]
DeRocked <[ar, cd, as, ci, ax, 0z]> : [{Application=[as]}]
Application <[dd, bc, 0r, 0u, 0v, 0w, dk, 0x, bo, dt, bt, dx, ac, cg, aj, cp, ap, 0a, 0b, as, at, cz, 0j, 0l, 0m, 0n, 0o]> : [{HerbicideCost=[as, at]}]
HerbicideCost <[as, at]> : [{}]



The DAG : dag_HerbicideInterventionTarget.txt : 
Target_Cover <[at]> : [{}]
HerbicideStrategy <[as, at]> : [{Application=[as, at]}]
Target <[dd, bc, 0r, ac, cg, dk, aj, bo, cp, ap, dt, as, bt, at, dx, cz, 0j]> : [{Target_Cover=[at]}]
Needle_Cover <[as, at, 0f, ax, 0z]> : [{Target_Cover=[at]}]
ST_Cover <[as, at, 0f, ax, 0z]> : [{Target_Cover=[at]}]
BroadWeeds_Cover <[as, at, 0f, ax, 0z]> : [{Target_Cover=[at]}]
Application <[dd, bc, 0r, 0u, 0v, 0w, dk, 0x, bo, dt, bt, dx, ac, cg, aj, cp, ap, 0a, 0b, as, at, cz, 0j, 0l, 0m, 0n, 0o]> : [{HerbicideCost=[as, at]}]
HerbicideCost <[as, at]> : [{}]
Blanket_Cover <[as, at, 0f, ax, 0z]> : [{Target_Cover=[at]}]



The DAG : dag_BiomassSummaries_dag_main_dag_EnvValue.txt : 
ExoticAnnual_Cover <[0f, ax, 0z]> : [{}]
Onion_Cover <[0f, ax, 0z]> : [{}]
Windmill_Cover <[0f, ax, 0z]> : [{}]
Needle_Cover <[as, at, 0f, ax, 0z]> : [{}]
Wallaby_Cover <[0f, ax, 0z]> : [{}]
Themeda_Cover <[0f, ax, 0z]> : [{}]
BroadWeeds_Cover <[as, at, 0f, ax, 0z]> : [{}]
Ruderals_Cover <[0f, ax, 0z]> : [{}]
Grain_Cover <[0f, ax, 0z]> : [{}]
RedLeg_Cover <[0f, ax, 0z]> : [{}]
HardyNative_Cover <[0f, ax, 0z]> : [{}]
Blanket_Cover <[as, at, 0f, ax, 0z]> : [{}]
Spear_Cover <[0f, ax, 0z]> : [{}]
ST_Cover <[as, at, 0f, ax, 0z]> : [{}]
SensitNative_Cover <[0f, ax, 0z]> : [{}]



The DAG : dag_EnvValue.txt : 
ExoticAnnual_Cover <[0f, ax, 0z]> : [{EnvironValue=[0z]}]
Onion_Cover <[0f, ax, 0z]> : [{}]
HardyNative_Cover <[0f, ax, 0z]> : [{NativeHerbCover=[0z]}]
Blanket_Cover <[as, at, 0f, ax, 0z]> : [{}]
EnvironValue <[0z]> : [{}]
SensitNative_Cover <[0f, ax, 0z]> : [{NativeHerbCover=[0z]}]
DeRocked <[ar, cd, as, ci, ax, 0z]> : [{EnvironValue=[0z]}]
NativeHerbDivScale <[0z]> : [{EnvironValue=[0z]}]
BareGround <[0z]> : [{}]
Windmill_Cover <[0f, ax, 0z]> : [{OtherNativeGrassCover1=[0z]}]
Needle_Cover <[as, at, 0f, ax, 0z]> : [{ExoticPerennialCover=[0z]}]
Wallaby_Cover <[0f, ax, 0z]> : [{OtherNativeGrassCover0=[0z]}]
ExoticPerennialCover <[0z]> : [{}]
Themeda_Cover <[0f, ax, 0z]> : [{EnvironValue=[0z]}]
BroadWeeds_Cover <[as, at, 0f, ax, 0z]> : [{}]
Ruderals_Cover <[0f, ax, 0z]> : [{}]
Grain_Cover <[0f, ax, 0z]> : [{}]
NativeHerbCover <[0z]> : [{}]
RedLeg_Cover <[0f, ax, 0z]> : [{OtherNativeGrassCover0=[0z]}]
Spear_Cover <[0f, ax, 0z]> : [{OtherNativeGrassCover1=[0z]}]
OtherNativeGrassCover <[0z]> : [{}]
TBio <[ct, 0t, 0f, 0z]> : [{BareGround=[0z]}]
ST_Cover <[as, at, 0f, ax, 0z]> : [{ExoticPerennialCover=[0z]}]
OtherNativeGrassCover1 <[0z]> : [{OtherNativeGrassCover=[0z]}]
OtherNativeGrassCover0 <[0z]> : [{OtherNativeGrassCover=[0z]}]



The DAG : dag_BiomassSummaries_dag_main.txt : 
ExoticAnnual_Cover <[0f, ax, 0z]> : [{}]
Windmill_Dead <[0f, ax]> : [{}]
Grain_Dead <[0f, ax]> : [{}]
Themeda_Basal <[0f, ax]> : [{}]
BroadWeeds_Basal <[0f, ax]> : [{}]
Onion_Cover <[0f, ax, 0z]> : [{}]
Wallaby_Basal <[0f, ax]> : [{}]
Onion_Dead <[0f, ax]> : [{}]
Themeda_Dead <[0f, ax]> : [{}]
HardyNative_Cover <[0f, ax, 0z]> : [{}]
Windmill_Basal <[0f, ax]> : [{}]
Blanket_Cover <[as, at, 0f, ax, 0z]> : [{}]
Spear_Basal <[0f, ax]> : [{}]
SensitNative_Dead <[0f, ax]> : [{}]
SensitNative_Cover <[0f, ax, 0z]> : [{}]
HardyNative_Basal <[0f, ax]> : [{}]
Needle_Basal <[0f, ax]> : [{}]
BroadWeeds_Dead <[0f, ax]> : [{}]
ExoticAnnual_Dead <[0f, ax]> : [{}]
Windmill_Cover <[0f, ax, 0z]> : [{}]
Needle_Cover <[as, at, 0f, ax, 0z]> : [{}]
Blanket_Dead <[0f, ax]> : [{}]
Wallaby_Cover <[0f, ax, 0z]> : [{}]
RedLeg_Dead <[0f, ax]> : [{}]
Themeda_Cover <[0f, ax, 0z]> : [{}]
Onion_Basal <[0f, ax]> : [{}]
BroadWeeds_Cover <[as, at, 0f, ax, 0z]> : [{}]
Needle_Dead <[0f, ax]> : [{}]
Ruderals_Cover <[0f, ax, 0z]> : [{}]
Grain_Cover <[0f, ax, 0z]> : [{}]
SensitNative_Basal <[0f, ax]> : [{}]
RedLeg_Cover <[0f, ax, 0z]> : [{}]
Spear_Cover <[0f, ax, 0z]> : [{}]
Ruderals_Dead <[0f, ax]> : [{}]
ST_Cover <[as, at, 0f, ax, 0z]> : [{}]
ST_Dead <[0f, ax]> : [{}]
ST_Basal <[0f, ax]> : [{}]
HardyNative_Dead <[0f, ax]> : [{}]
RedLeg_Basal <[0f, ax]> : [{}]
Spear_Dead <[0f, ax]> : [{}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{}]
Wallaby_Dead <[0f, ax]> : [{}]
Ruderals_Basal <[0f, ax]> : [{}]



The DAG : dag_main.txt : 
ExoticAnnual_Cover <[0f, ax, 0z]> : [{}]
Windmill_Dead <[0f, ax]> : [{}]
Spear_Seeds <[ax]> : [{}]
BroadWeeds_Basal <[0f, ax]> : [{}]
Ruderals_Seedlings <[ax]> : [{}]
Nutrient_Nitrogen <[ax]> : [{}]
Spring2000 <[ax]> : [{}]
Onion_Dead <[0f, ax]> : [{}]
BurnStrategyBurnAutumn2000 <[ax]> : [{}]
SensitNative_Seedlings <[ax]> : [{}]
Blanket_Cover <[as, at, 0f, ax, 0z]> : [{}]
BroadWeeds_Seeds <[ax]> : [{}]
Spear_Basal <[0f, ax]> : [{}]
ExoticAnnual_Seeds <[ax]> : [{}]
Themeda_Seedlings <[ax]> : [{}]
SensitNative_Cover <[0f, ax, 0z]> : [{}]
SensitNative_Seeds <[ax]> : [{}]
DeRocked <[ar, cd, as, ci, ax, 0z]> : [{}]
Soil_Friability <[ax, dl]> : [{}]
HardyNative_Basal <[0f, ax]> : [{}]
HerbicideStrategyHerbicideTargetWinter2000 <[ax]> : [{}]
Blanket_Adults <[ax]> : [{}]
Blanket_Dead <[0f, ax]> : [{}]
Wallaby_Cover <[0f, ax, 0z]> : [{}]
Themeda_Cover <[0f, ax, 0z]> : [{}]
Onion_Basal <[0f, ax]> : [{}]
Autumn2000 <[ax]> : [{}]
Grain_Seeds <[ax]> : [{}]
Ruderals_Cover <[0f, ax, 0z]> : [{}]
DurationGrazeCattleSummer2000 <[ax]> : [{}]
Grain_Adults <[ax]> : [{}]
SensitNative_Basal <[0f, ax]> : [{}]
RedLeg_Cover <[0f, ax, 0z]> : [{}]
BurnStrategyBurnSummer2000 <[ax]> : [{}]
Spear_Seedlings <[ax]> : [{}]
Windmill_Seedlings <[ax]> : [{}]
Spear_Cover <[0f, ax, 0z]> : [{}]
Needle_Seeds <[ax]> : [{}]
ST_Cover <[as, at, 0f, ax, 0z]> : [{}]
Blanket_Seeds <[ax]> : [{}]
HardyNative_Seeds <[ax]> : [{}]
ST_Basal <[0f, ax]> : [{}]
Summer2000 <[ax]> : [{}]
HardyNative_Dead <[0f, ax]> : [{}]
RedLeg_Basal <[0f, ax]> : [{}]
RedLeg_Seedlings <[ax]> : [{}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{}]
Ruderals_Basal <[0f, ax]> : [{}]
Grain_Dead <[0f, ax]> : [{}]
TargetHerbicideTargetWinter2000 <[ax]> : [{}]
Themeda_Basal <[0f, ax]> : [{}]
Onion_Cover <[0f, ax, 0z]> : [{}]
BD <[0t, ax]> : [{}]
HardyNative_Seedlings <[ax]> : [{}]
Wallaby_Basal <[0f, ax]> : [{}]
Onion_Seedlings <[ax]> : [{}]
ExoticAnnual_Adults <[ax]> : [{}]
Themeda_Dead <[0f, ax]> : [{}]
BroadWeeds_Seedlings <[ax]> : [{}]
Onion_Seeds <[ax]> : [{}]
HardyNative_Cover <[0f, ax, 0z]> : [{}]
Windmill_Basal <[0f, ax]> : [{}]
ST_Seeds <[ax]> : [{}]
Wallaby_Seeds <[ax]> : [{}]
Nutrient_Phosphorous <[ax]> : [{}]
Themeda_Seeds <[ax]> : [{}]
SensitNative_Dead <[0f, ax]> : [{}]
BurnStrategyBurnSpring2000 <[ax]> : [{}]
RedLeg_Seeds <[ax]> : [{}]
Windmill_Seeds <[ax]> : [{}]
Intervention_Fences <[ax]> : [{}]
Wallaby_Seedlings <[ax]> : [{}]
Needle_Basal <[0f, ax]> : [{}]
BroadWeeds_Dead <[0f, ax]> : [{}]
ExoticAnnual_Dead <[0f, ax]> : [{}]
Windmill_Cover <[0f, ax, 0z]> : [{}]
Needle_Cover <[as, at, 0f, ax, 0z]> : [{}]
RedLeg_Dead <[0f, ax]> : [{}]
ST_Seedlings <[ax]> : [{}]
BroadWeeds_Cover <[as, at, 0f, ax, 0z]> : [{}]
Needle_Dead <[0f, ax]> : [{}]
Grain_Cover <[0f, ax, 0z]> : [{}]
Scale <[ar, cd, as, 0t, cw, ci, ax, 0y, al, am, bq]> : [{}]
Ruderals_Seeds <[ax]> : [{}]
TargetHerbicideTargetSpring2000 <[ax]> : [{}]
Winter2000 <[ax]> : [{}]
Ruderals_Dead <[0f, ax]> : [{}]
ST_Dead <[0f, ax]> : [{}]
HerbicideStrategyHerbicideTargetSpring2000 <[ax]> : [{}]
BurnStrategyBurnWinter2000 <[ax]> : [{}]
DurationGrazeSheepAutumn2000 <[ax]> : [{}]
Nutrient_Carbon <[ax]> : [{}]
Spear_Dead <[0f, ax]> : [{}]
Needle_Seedlings <[ax]> : [{}]
Wallaby_Dead <[0f, ax]> : [{}]



The DAG : dag_HarvestIntervention_dag_RemoveTopSoilIntervention_dag_HerbicideIntervention_dag_ScarifyIntervention_dag_main_dag_EnvValue.txt : 
DeRocked <[ar, cd, as, ci, ax, 0z]> : [{}]



The DAG : dag_HarvestIntervention.txt : 
DeRocked <[ar, cd, as, ci, ax, 0z]> : [{Harvest=[ar]}]
HarvestCost <[ar]> : [{}]
Scale <[ar, cd, as, 0t, cw, ci, ax, 0y, al, am, bq]> : [{HarvestCost=[ar]}]
Harvest <[ar, dj, ck, 0i, az, cl, dq]> : [{HarvestCost=[ar]}]



The DAG : dag_RemoveTopSoilIntervention.txt : 
RemoveTopSoilCost <[cd]> : [{}]
DeRocked <[ar, cd, as, ci, ax, 0z]> : [{RemoveTopSoil=[cd]}]
Scale <[ar, cd, as, 0t, cw, ci, ax, 0y, al, am, bq]> : [{RemoveTopSoilCost=[cd]}]
RemoveTopSoil <[cc, cd, cu, bv, bw, bx, by, bz, bl, ca, cb]> : [{RemoveTopSoilCost=[cd]}]



The DAG : dag_ScarifyIntervention.txt : 
DeRocked <[ar, cd, as, ci, ax, 0z]> : [{Scarify=[ci]}]
Scarify <[df, cv, dg, ae, af, ag, ci, dn]> : [{ScarifyCost=[ci]}]
Scale <[ar, cd, as, 0t, cw, ci, ax, 0y, al, am, bq]> : [{ScarifyCost=[ci]}]
ScarifyCost <[ci]> : [{}]



The DAG : dag_HarvestIntervention_dag_ThemedaHarvest_dag_SensitiveHarvest_dag_BlanketHarvest_dag_ModerateHarvest_dag_SensitiveHarvest2_dag_TolerantHarvest.txt : 
Harvest <[ar, dj, ck, 0i, az, cl, dq]> : [{}]



The DAG : dag_ThemedaHarvest_dag_SensitiveHarvest_dag_BlanketHarvest_dag_ModerateHarvest_dag_SensitiveHarvest2_dag_TolerantHarvest.txt : 
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], LOBio=[dj, ck, 0i, az, cl, dq]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
BioRes <[dj, ck, 0i, az, cl, dq]> : [{}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
LOBio <[dj, ck, 0i, az, cl, dq]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], LOBio=[dj, ck, 0i, az, cl, dq]}]
Harvest <[ar, dj, ck, 0i, az, cl, dq]> : [{BioRes=[dj, ck, 0i, az, cl, dq], CR=[dj, ck, 0i, az, cl, dq]}]
CR <[df, dg, ae, af, ag, dj, cj, ck, cl, dn, dp, dq, 0c, au, av, aw, ay, 0i, az]> : [{}]



The DAG : dag_SensitiveHarvest_dag_BlanketHarvest_dag_SensitiveHarvest2.txt : 
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], LOBio=[dj, ck, 0i, az, cl, dq]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
BioRes <[dj, ck, 0i, az, cl, dq]> : [{}]
Output_Adults <[dg, by, bz, aa, cc, ab, ac, ad, ae, af, ah, ai, ck, aj, cl, ak, 0a, 0b, au, av, aw, 0g, 0h, 0i, 0j, 0k, 0n]> : [{}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
LOBio <[dj, ck, 0i, az, cl, dq]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], LOBio=[dj, ck, 0i, az, cl, dq]}]
Harvest <[ar, dj, ck, 0i, az, cl, dq]> : [{BioRes=[dj, ck, 0i, az, cl, dq], CR=[dj, ck, 0i, az, cl, dq], ADR=[ck, 0i, cl]}]
Input_Adults <[dg, by, bz, aa, cc, ab, ac, ad, ae, af, ah, ai, ck, aj, cl, ak, 0a, 0b, au, av, aw, 0g, 0h, 0i, 0j, 0k, 0n]> : [{Output_Adults=[dg, by, bz, aa, cc, ab, ac, ad, ae, af, ah, ai, ck, aj, cl, ak, 0a, 0b, au, av, aw, 0g, 0h, 0i, 0j, 0k, 0n]}]
CR <[df, dg, ae, af, ag, dj, cj, ck, cl, dn, dp, dq, 0c, au, av, aw, ay, 0i, az]> : [{}]
ADR <[dg, ae, au, af, av, aw, ck, 0i, cl]> : [{}]



The DAG : dag_ThemedaHarvest_dag_ModerateHarvest_dag_TolerantHarvest.txt : 
BR <[df, ag, dj, cj, ay, az, dn, dp, dq]> : [{}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], LOBio=[dj, ck, 0i, az, cl, dq]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
BioRes <[dj, ck, 0i, az, cl, dq]> : [{}]
Input_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Basal=[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
LOBio <[dj, ck, 0i, az, cl, dq]> : [{}]
Output_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], LOBio=[dj, ck, 0i, az, cl, dq]}]
Harvest <[ar, dj, ck, 0i, az, cl, dq]> : [{BR=[dj, az, dq], BioRes=[dj, ck, 0i, az, cl, dq], CR=[dj, ck, 0i, az, cl, dq]}]
CR <[df, dg, ae, af, ag, dj, cj, ck, cl, dn, dp, dq, 0c, au, av, aw, ay, 0i, az]> : [{}]



The DAG : dag_ThemedaHarvest.txt : 
BioRes <[dj, ck, 0i, az, cl, dq]> : [{LOBio=[dj, 0i, cl, dq]}]
Harvest <[ar, dj, ck, 0i, az, cl, dq]> : [{BR=[dj, az, dq], BioRes=[dj, ck, 0i, az, cl, dq], CR=[dj, ck, 0i, az, cl, dq], SR=[dj]}]
CR <[df, dg, ae, af, ag, dj, cj, ck, cl, dn, dp, dq, 0c, au, av, aw, ay, 0i, az]> : [{Output_Dead=[au, av, dj, cj, ay, 0i, cl, dp], Output_Cover=[au, av, dj, cj, ay, 0i, cl, dp], LOBio=[dj, 0i, cl, dq]}]
BR <[df, ag, dj, cj, ay, az, dn, dp, dq]> : [{}]
Input_Seedlings <[dd, bc, 0r, df, dh, 0u, di, 0v, dj, 0w, dk, 0x, dl, dm, dn, dp, bo, dt, bt, bv, dx, cg, cp, ap, cz, 0l, 0m, 0o]> : [{Output_Seedlings=[dd, bc, 0r, df, dh, 0u, di, 0v, dj, 0w, dk, 0x, dm, dn, dp, bo, dt, bt, bv, dx, cg, cp, ap, cz, 0l, 0m, 0o]}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], LOBio=[dj, ck, 0i, az, cl, dq]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Basal=[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
LOBio <[dj, ck, 0i, az, cl, dq]> : [{Output_Dead=[dj, ck, 0i, az]}]
Output_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dj, dk, dq, dr, ds, dt, du, dv, dw, dx, an, ao, ap, aq, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, ce, cf, cg, ch, cn, co, cp, cx, cy, cz, db, dc]}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], LOBio=[dj, ck, 0i, az, cl, dq]}]
Output_Seedlings <[dd, bc, 0r, df, dh, 0u, di, 0v, dj, 0w, dk, 0x, dl, dm, dn, dp, bo, dt, bt, bv, dx, cg, cp, ap, cz, 0l, 0m, 0o]> : [{}]
SR <[dd, bc, de, 0r, bd, df, 0s, 0u, 0v, dj, 0w, dk, 0x, dn, dp, bo, bp, dt, du, bt, bu, dx, dy, ac, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{Output_Seedlings=[dj, dn, dp]}]



The DAG : dag_ThemedaHarvest_dag_SensitiveHarvest_dag_BlanketHarvest_dag_ModerateHarvest.txt : 
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], LOBio=[dj, ck, 0i, az, cl, dq]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
BioRes <[dj, ck, 0i, az, cl, dq]> : [{}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
LOBio <[dj, ck, 0i, az, cl, dq]> : [{Output_Dead=[dj, ck, 0i, az]}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], LOBio=[dj, ck, 0i, az, cl, dq]}]
Harvest <[ar, dj, ck, 0i, az, cl, dq]> : [{BioRes=[dj, ck, 0i, az, cl, dq], CR=[dj, ck, 0i, az, cl, dq]}]
CR <[df, dg, ae, af, ag, dj, cj, ck, cl, dn, dp, dq, 0c, au, av, aw, ay, 0i, az]> : [{}]



The DAG : dag_ThemedaHarvest_dag_BlanketHarvest_dag_SensitiveHarvest2_dag_TolerantHarvest.txt : 
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], LOBio=[dj, ck, 0i, az, cl, dq]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
BioRes <[dj, ck, 0i, az, cl, dq]> : [{LOBio=[dj, 0i, cl, dq]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
LOBio <[dj, ck, 0i, az, cl, dq]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], LOBio=[dj, ck, 0i, az, cl, dq]}]
Harvest <[ar, dj, ck, 0i, az, cl, dq]> : [{BioRes=[dj, ck, 0i, az, cl, dq], CR=[dj, ck, 0i, az, cl, dq]}]
CR <[df, dg, ae, af, ag, dj, cj, ck, cl, dn, dp, dq, 0c, au, av, aw, ay, 0i, az]> : [{LOBio=[dj, 0i, cl, dq]}]



The DAG : dag_BurnIntervention_dag_KilledFire1_dag_KilledFire2_dag_NutrientFire_dag_KilledFire3_dag_SensitiveFire_dag_ModerateFire_dag_TolerantFire.txt : 
Burn <[0t, au, av, bg, aw, cj, ay, dp]> : [{}]



The DAG : dag_KilledFire1_dag_KilledFire2_dag_KilledFire3_dag_SensitiveFire_dag_ModerateFire_dag_TolerantFire.txt : 
Burn <[0t, au, av, bg, aw, cj, ay, dp]> : [{CR=[au, av, aw, cj, ay, dp]}]
RBio <[au, av, aw, cj, ay, dp]> : [{}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{RBio=[au, av, aw, cj, ay, dp], Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
NH <[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{Output_NUI=[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{RBio=[au, av, aw, cj, ay, dp], Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]
CR <[df, dg, ae, af, ag, dj, cj, ck, cl, dn, dp, dq, 0c, au, av, aw, ay, 0i, az]> : [{}]



The DAG : dag_KilledFire1_dag_KilledFire2_dag_KilledFire3.txt : 
Burn <[0t, au, av, bg, aw, cj, ay, dp]> : [{ADR=[au, av, aw], CR=[au, av, aw, cj, ay, dp]}]
RBio <[au, av, aw, cj, ay, dp]> : [{}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{RBio=[au, av, aw, cj, ay, dp], Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Adults <[dg, by, bz, aa, cc, ab, ac, ad, ae, af, ah, ai, ck, aj, cl, ak, 0a, 0b, au, av, aw, 0g, 0h, 0i, 0j, 0k, 0n]> : [{}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
NH <[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{Output_NUI=[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{RBio=[au, av, aw, cj, ay, dp], Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]
Input_Adults <[dg, by, bz, aa, cc, ab, ac, ad, ae, af, ah, ai, ck, aj, cl, ak, 0a, 0b, au, av, aw, 0g, 0h, 0i, 0j, 0k, 0n]> : [{Output_Adults=[dg, by, bz, aa, cc, ab, ac, ad, ae, af, ah, ai, ck, aj, cl, ak, 0a, 0b, au, av, aw, 0g, 0h, 0i, 0j, 0k, 0n]}]
CR <[df, dg, ae, af, ag, dj, cj, ck, cl, dn, dp, dq, 0c, au, av, aw, ay, 0i, az]> : [{}]
ADR <[dg, ae, au, af, av, aw, ck, 0i, cl]> : [{}]



The DAG : dag_KilledFire1_dag_KilledFire2_dag_SensitiveFire_dag_ModerateFire_dag_TolerantFire.txt : 
Burn <[0t, au, av, bg, aw, cj, ay, dp]> : [{CR=[au, av, aw, cj, ay, dp]}]
RBio <[au, av, aw, cj, ay, dp]> : [{Output_NUI=[au, av, cj, ay, dp]}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{RBio=[au, av, aw, cj, ay, dp], Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
NH <[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{Output_NUI=[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{RBio=[au, av, aw, cj, ay, dp], Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]
CR <[df, dg, ae, af, ag, dj, cj, ck, cl, dn, dp, dq, 0c, au, av, aw, ay, 0i, az]> : [{Output_Dead=[au, av, dj, cj, ay, 0i, cl, dp], Output_Cover=[au, av, dj, cj, ay, 0i, cl, dp]}]



The DAG : dag_SensitiveFire_dag_ModerateFire_dag_TolerantFire.txt : 
BR <[df, ag, dj, cj, ay, az, dn, dp, dq]> : [{Output_Basal=[ag, cj, ay, az, dn, dp]}]
Burn <[0t, au, av, bg, aw, cj, ay, dp]> : [{BR=[cj, ay, dp], CR=[au, av, aw, cj, ay, dp]}]
RBio <[au, av, aw, cj, ay, dp]> : [{Output_NUI=[au, av, cj, ay, dp]}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{RBio=[au, av, aw, cj, ay, dp], Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Basal=[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
NH <[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{Output_NUI=[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{RBio=[au, av, aw, cj, ay, dp], Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]
CR <[df, dg, ae, af, ag, dj, cj, ck, cl, dn, dp, dq, 0c, au, av, aw, ay, 0i, az]> : [{Output_Dead=[au, av, dj, cj, ay, 0i, cl, dp], Output_Cover=[au, av, dj, cj, ay, 0i, cl, dp]}]



The DAG : dag_TolerantFire.txt : 
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]
CR <[df, dg, ae, af, ag, dj, cj, ck, cl, dn, dp, dq, 0c, au, av, aw, ay, 0i, az]> : [{Output_Dead=[au, av, dj, cj, ay, 0i, cl, dp], Output_Cover=[au, av, dj, cj, ay, 0i, cl, dp]}]
BR <[df, ag, dj, cj, ay, az, dn, dp, dq]> : [{Output_Basal=[ag, cj, ay, az, dn, dp]}]
Burn <[0t, au, av, bg, aw, cj, ay, dp]> : [{BR=[cj, ay, dp], CR=[au, av, aw, cj, ay, dp], SR=[dp]}]
Input_Seedlings <[dd, bc, 0r, df, dh, 0u, di, 0v, dj, 0w, dk, 0x, dl, dm, dn, dp, bo, dt, bt, bv, dx, cg, cp, ap, cz, 0l, 0m, 0o]> : [{Output_Seedlings=[dd, bc, 0r, df, dh, 0u, di, 0v, dj, 0w, dk, 0x, dm, dn, dp, bo, dt, bt, bv, dx, cg, cp, ap, cz, 0l, 0m, 0o]}]
RBio <[au, av, aw, cj, ay, dp]> : [{Output_NUI=[au, av, cj, ay, dp]}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{RBio=[au, av, aw, cj, ay, dp], Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Basal=[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
NH <[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{Output_NUI=[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{RBio=[au, av, aw, cj, ay, dp], Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Seedlings <[dd, bc, 0r, df, dh, 0u, di, 0v, dj, 0w, dk, 0x, dl, dm, dn, dp, bo, dt, bt, bv, dx, cg, cp, ap, cz, 0l, 0m, 0o]> : [{}]
SR <[dd, bc, de, 0r, bd, df, 0s, 0u, 0v, dj, 0w, dk, 0x, dn, dp, bo, bp, dt, du, bt, bu, dx, dy, ac, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{Output_Seedlings=[dj, dn, dp]}]



The DAG : dag_TenaciousScarify1_dag_SoilScarify_dag_TenaciousScarify2_dag_FragileScarify1_dag_FragileScarify2_dag_FragileScarify3_dag_ScarifyIntervention_dag_ThemedaScarify.txt : 
Scarify <[df, cv, dg, ae, af, ag, ci, dn]> : [{}]



The DAG : dag_TenaciousScarify1_dag_TenaciousScarify2_dag_FragileScarify1_dag_FragileScarify2_dag_FragileScarify3_dag_ThemedaScarify.txt : 
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Cover_Dec=[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ae, cg, af, ch, ag, aj, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Scarify <[df, cv, dg, ae, af, ag, ci, dn]> : [{CR=[df, dg, ae, af, ag, dn]}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Cover_Dec <[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ad, ae, cg, af, ch, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
CR <[df, dg, ae, af, ag, dj, cj, ck, cl, dn, dp, dq, 0c, au, av, aw, ay, 0i, az]> : [{}]



The DAG : dag_TenaciousScarify1_dag_FragileScarify3_dag_ThemedaScarify.txt : 
BR <[df, ag, dj, cj, ay, az, dn, dp, dq]> : [{}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Cover_Dec=[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ae, cg, af, ch, ag, aj, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Basal=[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Scarify <[df, cv, dg, ae, af, ag, ci, dn]> : [{BR=[df, ag, dn], CR=[df, dg, ae, af, ag, dn]}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Cover_Dec <[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ad, ae, cg, af, ch, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
CR <[df, dg, ae, af, ag, dj, cj, ck, cl, dn, dp, dq, 0c, au, av, aw, ay, 0i, az]> : [{}]



The DAG : dag_TenaciousScarify1_dag_ThemedaScarify.txt : 
Cover_Dec <[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ad, ae, cg, af, ch, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
CR <[df, dg, ae, af, ag, dj, cj, ck, cl, dn, dp, dq, 0c, au, av, aw, ay, 0i, az]> : [{}]
BR <[df, ag, dj, cj, ay, az, dn, dp, dq]> : [{}]
Input_Seedlings <[dd, bc, 0r, df, dh, 0u, di, 0v, dj, 0w, dk, 0x, dl, dm, dn, dp, bo, dt, bt, bv, dx, cg, cp, ap, cz, 0l, 0m, 0o]> : [{Output_Seedlings=[dd, bc, 0r, df, dh, 0u, di, 0v, dj, 0w, dk, 0x, dm, dn, dp, bo, dt, bt, bv, dx, cg, cp, ap, cz, 0l, 0m, 0o]}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Cover_Dec=[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ae, cg, af, ch, ag, aj, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Basal=[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Scarify <[df, cv, dg, ae, af, ag, ci, dn]> : [{BR=[df, ag, dn], CR=[df, dg, ae, af, ag, dn], SR=[df, dn]}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Seedlings <[dd, bc, 0r, df, dh, 0u, di, 0v, dj, 0w, dk, 0x, dl, dm, dn, dp, bo, dt, bt, bv, dx, cg, cp, ap, cz, 0l, 0m, 0o]> : [{}]
SR <[dd, bc, de, 0r, bd, df, 0s, 0u, 0v, dj, 0w, dk, 0x, dn, dp, bo, bp, dt, du, bt, bu, dx, dy, ac, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]



The DAG : dag_TenaciousScarify1.txt : 
Cover_Dec <[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ad, ae, cg, af, ch, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
CR <[df, dg, ae, af, ag, dj, cj, ck, cl, dn, dp, dq, 0c, au, av, aw, ay, 0i, az]> : [{Cover_Dec=[df]}]
BR <[df, ag, dj, cj, ay, az, dn, dp, dq]> : [{}]
Input_Seedlings <[dd, bc, 0r, df, dh, 0u, di, 0v, dj, 0w, dk, 0x, dl, dm, dn, dp, bo, dt, bt, bv, dx, cg, cp, ap, cz, 0l, 0m, 0o]> : [{Output_Seedlings=[dd, bc, 0r, df, dh, 0u, di, 0v, dj, 0w, dk, 0x, dm, dn, dp, bo, dt, bt, bv, dx, cg, cp, ap, cz, 0l, 0m, 0o]}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Cover_Dec=[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ae, cg, af, ch, ag, aj, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Basal=[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dj, dk, dq, dr, ds, dt, du, dv, dw, dx, an, ao, ap, aq, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, ce, cf, cg, ch, cn, co, cp, cx, cy, cz, db, dc]}]
Scarify <[df, cv, dg, ae, af, ag, ci, dn]> : [{BR=[df, ag, dn], CR=[df, dg, ae, af, ag, dn], SR=[df, dn]}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Seedlings <[dd, bc, 0r, df, dh, 0u, di, 0v, dj, 0w, dk, 0x, dl, dm, dn, dp, bo, dt, bt, bv, dx, cg, cp, ap, cz, 0l, 0m, 0o]> : [{}]
SR <[dd, bc, de, 0r, bd, df, 0s, 0u, 0v, dj, 0w, dk, 0x, dn, dp, bo, bp, dt, du, bt, bu, dx, dy, ac, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]



The DAG : dag_TenaciousScarify2_dag_FragileScarify1_dag_FragileScarify2.txt : 
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Cover_Dec=[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ae, cg, af, ch, ag, aj, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Adults <[dg, by, bz, aa, cc, ab, ac, ad, ae, af, ah, ai, ck, aj, cl, ak, 0a, 0b, au, av, aw, 0g, 0h, 0i, 0j, 0k, 0n]> : [{Output_Cover=[ac, dg, ae, af, ck, aj, ak, 0a, 0b, au, av, 0i, 0k]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Scarify <[df, cv, dg, ae, af, ag, ci, dn]> : [{ADR=[dg, ae, af], CR=[df, dg, ae, af, ag, dn]}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Cover_Dec <[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ad, ae, cg, af, ch, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{Output_Dead=[dd, bc, 0r, bd, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, bt, dx, dy, ac, ae, cg, af, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0l, 0m, 0n, 0o], Output_Cover=[dd, bc, 0r, dg, 0u, 0v, 0w, dk, 0x, dn, bo, dt, bt, dx, ac, ae, cg, af, ag, aj, cp, ap, 0a, 0b, cz, 0j, 0l, 0m, 0n, 0o]}]
Input_Adults <[dg, by, bz, aa, cc, ab, ac, ad, ae, af, ah, ai, ck, aj, cl, ak, 0a, 0b, au, av, aw, 0g, 0h, 0i, 0j, 0k, 0n]> : [{Output_Adults=[dg, by, bz, aa, cc, ab, ac, ad, ae, af, ah, ai, ck, aj, cl, ak, 0a, 0b, au, av, aw, 0g, 0h, 0i, 0j, 0k, 0n]}]
CR <[df, dg, ae, af, ag, dj, cj, ck, cl, dn, dp, dq, 0c, au, av, aw, ay, 0i, az]> : [{}]
ADR <[dg, ae, au, af, av, aw, ck, 0i, cl]> : [{}]



The DAG : dag_HarvestIntervention_dag_RemoveTopSoilIntervention_dag_HerbicideIntervention_dag_BurnIntervention_dag_SowIntervention_dag_ScarifyIntervention_dag_main_dag_CarbonBoostIntervention_dag_GrazeInterventionCattle_dag_GrazeInterventionSheep_dag_PlantIntervention.txt : 
Scale <[ar, cd, as, 0t, cw, ci, ax, 0y, al, am, bq]> : [{}]



The DAG : dag_CarbonBoostIntervention.txt : 
CarbonBoostCost <[0y]> : [{}]
Scale <[ar, cd, as, 0t, cw, ci, ax, 0y, al, am, bq]> : [{CarbonBoostCost=[0y]}]



The DAG : dag_PlantIntervention.txt : 
Scale <[ar, cd, as, 0t, cw, ci, ax, 0y, al, am, bq]> : [{PlantCost=[bq]}]
PlantCost <[bq]> : [{}]



The DAG : dag_GrazeInterventionCattle_dag_GrazeInterventionSheep.txt : 
Input_Fences <[al, am]> : [{GrazeCost=[al, am], Output_Fences=[al, am]}]
GrazeCost <[al, am]> : [{}]
Output_Fences <[al, am]> : [{}]
Duration <[0p, bb, 0q, dh, di, bh, bi, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, al, cn, am, co, an, ao, 0c, cx, cy, 0g, 0h, db, ba, dc]> : [{GrazeCost=[al, am]}]
Scale <[ar, cd, as, 0t, cw, ci, ax, 0y, al, am, bq]> : [{GrazeCost=[al, am]}]



The DAG : dag_BurnIntervention_dag_main.txt : 
BD <[0t, ax]> : [{}]
Scale <[ar, cd, as, 0t, cw, ci, ax, 0y, al, am, bq]> : [{}]



The DAG : dag_RemoveTopSoil8_dag_RemoveTopSoilIntervention_dag_SoilRemoveTopSoil_dag_RemoveTopSoil1_dag_RemoveTopSoil2_dag_RemoveTopSoil3_dag_RemoveTopSoil4_dag_RemoveTopSoil5_dag_NutrientRemoveTopSoil_dag_RemoveTopSoil6_dag_RemoveTopSoil7.txt : 
RemoveTopSoil <[cc, cd, cu, bv, bw, bx, by, bz, bl, ca, cb]> : [{}]



The DAG : dag_RemoveTopSoil8_dag_RemoveTopSoil1_dag_RemoveTopSoil2_dag_RemoveTopSoil3_dag_RemoveTopSoil4_dag_RemoveTopSoil5_dag_RemoveTopSoil6_dag_RemoveTopSoil7.txt : 
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
RemoveTopSoil <[cc, cd, cu, bv, bw, bx, by, bz, bl, ca, cb]> : [{Output_Dead=[cc, bv, bw, bx, by, bz, ca, cb], Output_Cover=[cc, bv, bw, bx, by, bz, ca, cb]}]



The DAG : dag_RemoveTopSoil1_dag_RemoveTopSoil2_dag_RemoveTopSoil3_dag_RemoveTopSoil6_dag_RemoveTopSoil7.txt : 
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Basal=[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
RemoveTopSoil <[cc, cd, cu, bv, bw, bx, by, bz, bl, ca, cb]> : [{Output_Dead=[cc, bv, bw, bx, by, bz, ca, cb], Output_Cover=[cc, bv, bw, bx, by, bz, ca, cb], Output_Basal=[bv, bw, bx, ca, cb]}]



The DAG : dag_RemoveTopSoil1.txt : 
Input_Seedlings <[dd, bc, 0r, df, dh, 0u, di, 0v, dj, 0w, dk, 0x, dl, dm, dn, dp, bo, dt, bt, bv, dx, cg, cp, ap, cz, 0l, 0m, 0o]> : [{Output_Seedlings=[dd, bc, 0r, df, dh, 0u, di, 0v, dj, 0w, dk, 0x, dm, dn, dp, bo, dt, bt, bv, dx, cg, cp, ap, cz, 0l, 0m, 0o]}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Input_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{Output_Seeds=[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Basal=[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Seedlings <[dd, bc, 0r, df, dh, 0u, di, 0v, dj, 0w, dk, 0x, dl, dm, dn, dp, bo, dt, bt, bv, dx, cg, cp, ap, cz, 0l, 0m, 0o]> : [{}]
Output_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
RemoveTopSoil <[cc, cd, cu, bv, bw, bx, by, bz, bl, ca, cb]> : [{Output_Dead=[cc, bv, bw, bx, by, bz, ca, cb], Output_Cover=[cc, bv, bw, bx, by, bz, ca, cb], Output_Basal=[bv, bw, bx, ca, cb], Output_Seedlings=[bv], Output_Seeds=[cc, bv, bw, bx, by, bz, cb]}]



The DAG : dag_RemoveTopSoil8_dag_RemoveTopSoil1_dag_RemoveTopSoil2_dag_RemoveTopSoil3_dag_RemoveTopSoil4_dag_RemoveTopSoil5_dag_RemoveTopSoil7.txt : 
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Input_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{Output_Seeds=[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
RemoveTopSoil <[cc, cd, cu, bv, bw, bx, by, bz, bl, ca, cb]> : [{Output_Dead=[cc, bv, bw, bx, by, bz, ca, cb], Output_Cover=[cc, bv, bw, bx, by, bz, ca, cb], Output_Seeds=[cc, bv, bw, bx, by, bz, cb]}]



The DAG : dag_RemoveTopSoil8_dag_RemoveTopSoil4_dag_RemoveTopSoil5.txt : 
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Input_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{Output_Seeds=[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Adults <[dg, by, bz, aa, cc, ab, ac, ad, ae, af, ah, ai, ck, aj, cl, ak, 0a, 0b, au, av, aw, 0g, 0h, 0i, 0j, 0k, 0n]> : [{}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
Input_Adults <[dg, by, bz, aa, cc, ab, ac, ad, ae, af, ah, ai, ck, aj, cl, ak, 0a, 0b, au, av, aw, 0g, 0h, 0i, 0j, 0k, 0n]> : [{Output_Adults=[dg, by, bz, aa, cc, ab, ac, ad, ae, af, ah, ai, ck, aj, cl, ak, 0a, 0b, au, av, aw, 0g, 0h, 0i, 0j, 0k, 0n]}]
RemoveTopSoil <[cc, cd, cu, bv, bw, bx, by, bz, bl, ca, cb]> : [{Output_Dead=[cc, bv, bw, bx, by, bz, ca, cb], Output_Adults=[cc, by, bz], Output_Cover=[cc, bv, bw, bx, by, bz, ca, cb], Output_Seeds=[cc, bv, bw, bx, by, bz, cb]}]



The DAG : dag_BroadWeedsGrazeCattle_dag_ExoticAnnualGrazeCattle_dag_RuderGrazeCattle_dag_ThemedaGrazeCattle_dag_GrainGrazeCattle_dag_OnionGrazeCattle_dag_SensitNativeGrazeCattle_dag_HardyNativeGrazeCattle_dag_WallabyGrazeCattle_dag_RedLegGrazeCattle_dag_WindmillGrazeCattle_dag_BiomassNatural_dag_SpearGrazeCattle_dag_BlanketGrazeCattle_dag_STGrazeCattle_dag_NeedleGrazeCattle.txt : 
PalSumCattle <[0p, aa, ce, dh, ah, bm, cn, an, dr, br, dv, 0e, cx, 0g, db, ba]> : [{}]



The DAG : dag_BroadWeedsGrazeCattle_dag_ExoticAnnualGrazeCattle_dag_RuderGrazeCattle_dag_ThemedaGrazeCattle_dag_GrainGrazeCattle_dag_OnionGrazeCattle_dag_SensitNativeGrazeCattle_dag_HardyNativeGrazeCattle_dag_WallabyGrazeCattle_dag_RedLegGrazeCattle_dag_WindmillGrazeCattle_dag_SpearGrazeCattle_dag_BlanketGrazeCattle_dag_STGrazeCattle_dag_NeedleGrazeCattle.txt : 
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
BACG_DR <[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, cx, cy, 0g, 0h, db, ba, dc]> : [{Output_Dead=[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, cx, cy, 0g, 0h, db, ba, dc]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{}]
DPal <[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, 0c, cx, cy, 0g, 0h, db, ba, dc]> : [{}]
Duration <[0p, bb, 0q, dh, di, bh, bi, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, al, cn, am, co, an, ao, 0c, cx, cy, 0g, 0h, db, ba, dc]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{LPal=[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, cx, cy, 0g, 0h, db, ba, dc]}]
LPal <[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, 0c, cx, cy, 0g, 0h, db, ba, dc]> : [{}]
PalSumCattle <[0p, aa, ce, dh, ah, bm, cn, an, dr, br, dv, 0e, cx, 0g, db, ba]> : [{CSumIndex=[0p, aa, ce, dh, ah, bm, cn, an, dr, br, dv, cx, 0g, db, ba]}]



The DAG : dag_NeedleGrazeSheep_dag_BroadWeedsGrazeSheep_dag_ExoticAnnualGrazeSheep_dag_RuderGrazeSheep_dag_ThemedaGrazeSheep_dag_GrainGrazeSheep_dag_OnionGrazeSheep_dag_SensitNativeGrazeSheep_dag_HardyNativeGrazeSheep_dag_WallabyGrazeSheep_dag_RedLegGrazeSheep_dag_WindmillGrazeSheep_dag_BiomassNatural_dag_SpearGrazeSheep_dag_BlanketGrazeSheep_dag_STGrazeSheep.txt : 
PalSumSheep <[bb, 0q, ab, cf, di, ai, bn, co, ao, ds, bs, dw, 0e, cy, 0h, dc]> : [{}]



The DAG : dag_NeedleGrazeSheep_dag_BroadWeedsGrazeSheep_dag_ExoticAnnualGrazeSheep_dag_RuderGrazeSheep_dag_ThemedaGrazeSheep_dag_GrainGrazeSheep_dag_OnionGrazeSheep_dag_SensitNativeGrazeSheep_dag_HardyNativeGrazeSheep_dag_WallabyGrazeSheep_dag_RedLegGrazeSheep_dag_WindmillGrazeSheep_dag_SpearGrazeSheep_dag_BlanketGrazeSheep_dag_STGrazeSheep.txt : 
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
BACG_DR <[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, cx, cy, 0g, 0h, db, ba, dc]> : [{Output_Dead=[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, cx, cy, 0g, 0h, db, ba, dc]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{}]
DPal <[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, 0c, cx, cy, 0g, 0h, db, ba, dc]> : [{}]
Duration <[0p, bb, 0q, dh, di, bh, bi, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, al, cn, am, co, an, ao, 0c, cx, cy, 0g, 0h, db, ba, dc]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{LPal=[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, cx, cy, 0g, 0h, db, ba, dc]}]
LPal <[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, 0c, cx, cy, 0g, 0h, db, ba, dc]> : [{}]
PalSumSheep <[bb, 0q, ab, cf, di, ai, bn, co, ao, ds, bs, dw, 0e, cy, 0h, dc]> : [{CSumIndex=[bb, 0q, ab, cf, di, ai, bn, co, ao, ds, bs, dw, cy, 0h, dc]}]



The DAG : dag_STNatural_dag_NeedleNatural_dag_BroadWeedsNatural_dag_ExoticAnnualNatural_dag_RuderNatural_dag_ThemedaNatural_dag_GrainNatural_dag_OnionNatural_dag_SensitNativeNatural_dag_HardyNativeNatural_dag_WallabyNatural_dag_RedLegNatural_dag_BiomassNatural_dag_WindmillNatural_dag_BlanketNatural_dag_SpearNatural.txt : 
CompSum <[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, 0e, dy, 0k, da]> : [{}]



The DAG : dag_STNatural_dag_NeedleNatural_dag_BroadWeedsNatural_dag_ExoticAnnualNatural_dag_RuderNatural_dag_ThemedaNatural_dag_GrainNatural_dag_OnionNatural_dag_SensitNativeNatural_dag_HardyNativeNatural_dag_WallabyNatural_dag_RedLegNatural_dag_WindmillNatural_dag_BlanketNatural_dag_SpearNatural.txt : 
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CompSum <[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, 0e, dy, 0k, da]> : [{CSumIndex=[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{}]
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{}]



The DAG : dag_STNatural_dag_NeedleNatural_dag_BroadWeedsNatural_dag_ExoticAnnualNatural_dag_ThemedaNatural_dag_GrainNatural_dag_OnionNatural_dag_HardyNativeNatural_dag_WallabyNatural_dag_RedLegNatural_dag_WindmillNatural_dag_BlanketNatural_dag_SpearNatural.txt : 
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CompSum <[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, 0e, dy, 0k, da]> : [{CSumIndex=[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{}]
New_Adults <[de, bd, 0s, ad, dl, ak, bp, aq, du, bu, dy, 0k, da]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{}]
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]
Output_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{}]



The DAG : dag_HardyNativeNatural_dag_STNatural_dag_WallabyNatural_dag_NeedleNatural_dag_BroadWeedsNatural_dag_ExoticAnnualNatural_dag_RedLegNatural_dag_WindmillNatural_dag_GrainNatural_dag_BlanketNatural_dag_SpearNatural_dag_OnionNatural.txt : 
Input_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{New_Adults=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]}]
CompSum <[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, 0e, dy, 0k, da]> : [{CSumIndex=[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
New_Adults <[de, bd, 0s, ad, dl, ak, bp, aq, du, bu, dy, 0k, da]> : [{}]
CCondBAC <[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
GR <[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]> : [{}]
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]
Output_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CCondS <[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{}]
NH <[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{Output_NUI=[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{GR=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{CCondS=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], CCondBAC=[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]}]



The DAG : dag_ExoticAnnualNatural_dag_GrainNatural_dag_BlanketNatural.txt : 
ASR <[ad, ak, 0k]> : [{}]
Cover_Inc <[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
Input_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{New_Adults=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]}]
CompSum <[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, 0e, dy, 0k, da]> : [{CSumIndex=[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
New_Adults <[de, bd, 0s, ad, dl, ak, bp, aq, du, bu, dy, 0k, da]> : [{}]
CCondBAC <[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
GR <[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]> : [{}]
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]
Cover_Dec <[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ad, ae, cg, af, ch, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
Output_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Adults <[dg, by, bz, aa, cc, ab, ac, ad, ae, af, ah, ai, ck, aj, cl, ak, 0a, 0b, au, av, aw, 0g, 0h, 0i, 0j, 0k, 0n]> : [{}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CCondS <[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{}]
NH <[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{Output_NUI=[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Dead_Dec=[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{GR=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{CCondS=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], CCondBAC=[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Input_Adults <[dg, by, bz, aa, cc, ab, ac, ad, ae, af, ah, ai, ck, aj, cl, ak, 0a, 0b, au, av, aw, 0g, 0h, 0i, 0j, 0k, 0n]> : [{Output_Adults=[dg, by, bz, aa, cc, ab, ac, ad, ae, af, ah, ai, ck, aj, cl, ak, 0a, 0b, au, av, aw, 0g, 0h, 0i, 0j, 0k, 0n]}]
Dead_Dec <[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]



The DAG : dag_ExoticAnnualNatural_dag_GrainNatural.txt : 
ASR <[ad, ak, 0k]> : [{}]
Cover_Inc <[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
Input_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{New_Adults=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]}]
CompSum <[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, 0e, dy, 0k, da]> : [{CSumIndex=[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
BCGD_DDRH <[aq, 0s, ad, ch, ak, bp, cq]> : [{Dead_Dec=[aq, 0s, ad, ch, ak, bp, cq]}]
New_Adults <[de, bd, 0s, ad, dl, ak, bp, aq, du, bu, dy, 0k, da]> : [{}]
GSR <[ad, ak]> : [{}]
CCondBAC <[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
GR <[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]> : [{}]
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]
Cover_Dec <[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ad, ae, cg, af, ch, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
Output_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Adults <[dg, by, bz, aa, cc, ab, ac, ad, ae, af, ah, ai, ck, aj, cl, ak, 0a, 0b, au, av, aw, 0g, 0h, 0i, 0j, 0k, 0n]> : [{}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CCondS <[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{}]
NH <[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{Output_NUI=[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Dead_Dec=[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{ASR=[ad, ak], GR=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{CCondS=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], CCondBAC=[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Input_Adults <[dg, by, bz, aa, cc, ab, ac, ad, ae, af, ah, ai, ck, aj, cl, ak, 0a, 0b, au, av, aw, 0g, 0h, 0i, 0j, 0k, 0n]> : [{Output_Adults=[dg, by, bz, aa, cc, ab, ac, ad, ae, af, ah, ai, ck, aj, cl, ak, 0a, 0b, au, av, aw, 0g, 0h, 0i, 0j, 0k, 0n], Cover_Dec=[ad, ak]}]
Dead_Dec <[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]



The DAG : dag_GrainNatural.txt : 
ASR <[ad, ak, 0k]> : [{}]
Cover_Inc <[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{Output_NUI=[aq, du, 0s, dl, ak, 0k, cq]}]
Input_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{New_Adults=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]}]
CompSum <[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, 0e, dy, 0k, da]> : [{CSumIndex=[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
BCGD_DDRH <[aq, 0s, ad, ch, ak, bp, cq]> : [{Dead_Dec=[aq, 0s, ad, ch, ak, bp, cq]}]
New_Adults <[de, bd, 0s, ad, dl, ak, bp, aq, du, bu, dy, 0k, da]> : [{Output_Adults=[ak]}]
GSR <[ad, ak]> : [{}]
CCondBAC <[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
GR <[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]> : [{}]
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]
Cover_Dec <[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ad, ae, cg, af, ch, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{Output_Dead=[dd, bc, 0r, bd, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, bt, dx, dy, ac, ae, cg, af, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0l, 0m, 0n, 0o]}]
Output_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Adults <[dg, by, bz, aa, cc, ab, ac, ad, ae, af, ah, ai, ck, aj, cl, ak, 0a, 0b, au, av, aw, 0g, 0h, 0i, 0j, 0k, 0n]> : [{Output_Cover=[ac, dg, ae, af, ck, aj, ak, 0a, 0b, au, av, 0i, 0k]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CCondS <[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{}]
NH <[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{Output_NUI=[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Dead_Dec=[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{ASR=[ad, ak], GR=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{CCondS=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], CCondBAC=[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Input_Adults <[dg, by, bz, aa, cc, ab, ac, ad, ae, af, ah, ai, ck, aj, cl, ak, 0a, 0b, au, av, aw, 0g, 0h, 0i, 0j, 0k, 0n]> : [{Output_Adults=[dg, by, bz, aa, cc, ab, ac, ad, ae, af, ah, ai, ck, aj, cl, ak, 0a, 0b, au, av, aw, 0g, 0h, 0i, 0j, 0k, 0n], Cover_Dec=[ad, ak]}]
Dead_Dec <[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{Output_NUI=[aq, bd, 0s, ak, 0k, cq]}]



The DAG : dag_ExoticAnnualNatural_dag_BlanketNatural.txt : 
CompSum <[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, 0e, dy, 0k, da]> : [{CSumIndex=[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Cover_Dec <[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ad, ae, cg, af, ch, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
Output_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CCondS <[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]> : [{}]
SI <[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Dead_Dec=[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{SI=[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da], GR=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], SP=[aq, de, du, bd, 0s, ad, bu, dy, 0k, da, bp]}]
SP <[aq, de, du, bd, 0s, ad, bu, dy, dl, 0k, da, bp]> : [{}]
ASR <[ad, ak, 0k]> : [{Output_Adults=[ad, 0k]}]
Cover_Inc <[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
Input_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{New_Adults=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], Output_Seeds=[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
New_Adults <[de, bd, 0s, ad, dl, ak, bp, aq, du, bu, dy, 0k, da]> : [{}]
CCondBAC <[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
GR <[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]> : [{}]
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
SSR <[de, du, bd, ad, bu, dy, 0k, da]> : [{Output_Seeds=[de, du, bd, ad, bu, dy, 0k, da]}]
Output_Adults <[dg, by, bz, aa, cc, ab, ac, ad, ae, af, ah, ai, ck, aj, cl, ak, 0a, 0b, au, av, aw, 0g, 0h, 0i, 0j, 0k, 0n]> : [{}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{}]
NH <[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{Output_NUI=[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{CCondS=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], CCondBAC=[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Input_Adults <[dg, by, bz, aa, cc, ab, ac, ad, ae, af, ah, ai, ck, aj, cl, ak, 0a, 0b, au, av, aw, 0g, 0h, 0i, 0j, 0k, 0n]> : [{Output_Adults=[dg, by, bz, aa, cc, ab, ac, ad, ae, af, ah, ai, ck, aj, cl, ak, 0a, 0b, au, av, aw, 0g, 0h, 0i, 0j, 0k, 0n], Output_Seeds=[ad, 0k]}]
Dead_Dec <[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]



The DAG : dag_HardyNativeNatural_dag_STNatural_dag_WallabyNatural_dag_NeedleNatural_dag_BroadWeedsNatural_dag_ExoticAnnualNatural_dag_RedLegNatural_dag_WindmillNatural_dag_BlanketNatural_dag_SpearNatural_dag_OnionNatural.txt : 
Input_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{New_Adults=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], Output_Seeds=[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
CompSum <[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, 0e, dy, 0k, da]> : [{CSumIndex=[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
New_Adults <[de, bd, 0s, ad, dl, ak, bp, aq, du, bu, dy, 0k, da]> : [{}]
CCondBAC <[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
GR <[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]> : [{}]
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]
Output_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CCondS <[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{}]
SI <[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
NH <[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{Output_NUI=[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{SI=[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da], GR=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], SP=[aq, de, du, bd, 0s, ad, bu, dy, 0k, da, bp]}]
SP <[aq, de, du, bd, 0s, ad, bu, dy, dl, 0k, da, bp]> : [{}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{CCondS=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], CCondBAC=[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]}]



The DAG : dag_HardyNativeNatural_dag_NeedleNatural_dag_BlanketNatural_dag_OnionNatural.txt : 
CC <[aq, de, du, bd, 0s, bu, ch, dy, 0k, da, bp, cq]> : [{Output_Cover=[aq, de, du, bd, 0s, bu, ch, dy, 0k, da, bp, cq]}]
Cover_Inc <[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
Input_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{New_Adults=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], Output_Seeds=[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
CompSum <[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, 0e, dy, 0k, da]> : [{CSumIndex=[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
New_Adults <[de, bd, 0s, ad, dl, ak, bp, aq, du, bu, dy, 0k, da]> : [{}]
CCondBAC <[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
GR <[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]> : [{}]
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]
Cover_Dec <[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ad, ae, cg, af, ch, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
Output_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Cover_Inc=[aq, du, bd, 0s, bu, ch, dy, dl, 0k, da, bp, cq], Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Cover_Dec=[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ae, cg, af, ch, ag, aj, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CCondS <[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]> : [{SR=[aq, bd, 0k, bp]}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{}]
SI <[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
NH <[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{Output_NUI=[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Dead_Dec=[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{SI=[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da], GR=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], SP=[aq, de, du, bd, 0s, ad, bu, dy, 0k, da, bp]}]
SP <[aq, de, du, bd, 0s, ad, bu, dy, dl, 0k, da, bp]> : [{}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{CCondS=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], CCondBAC=[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Dead_Dec <[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
SR <[dd, bc, de, 0r, bd, df, 0s, 0u, 0v, dj, 0w, dk, 0x, dn, dp, bo, bp, dt, du, bt, bu, dx, dy, ac, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]



The DAG : dag_STNatural_dag_WallabyNatural_dag_NeedleNatural_dag_ExoticAnnualNatural_dag_RedLegNatural_dag_WindmillNatural_dag_BlanketNatural_dag_SpearNatural.txt : 
Input_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{New_Adults=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], Output_Seeds=[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
CompSum <[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, 0e, dy, 0k, da]> : [{CSumIndex=[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
New_Adults <[de, bd, 0s, ad, dl, ak, bp, aq, du, bu, dy, 0k, da]> : [{}]
CCondBAC <[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
GR <[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]> : [{}]
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]
Output_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
SSR <[de, du, bd, ad, bu, dy, 0k, da]> : [{Output_Seeds=[de, du, bd, ad, bu, dy, 0k, da]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CCondS <[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{}]
SI <[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
NH <[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{Output_NUI=[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{SI=[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da], GR=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], SP=[aq, de, du, bd, 0s, ad, bu, dy, 0k, da, bp]}]
SP <[aq, de, du, bd, 0s, ad, bu, dy, dl, 0k, da, bp]> : [{}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{CCondS=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], CCondBAC=[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]}]



The DAG : dag_HardyNativeNatural_dag_STNatural_dag_WallabyNatural_dag_NeedleNatural_dag_BroadWeedsNatural_dag_RedLegNatural_dag_WindmillNatural_dag_SpearNatural_dag_OnionNatural.txt : 
CC <[aq, de, du, bd, 0s, bu, ch, dy, 0k, da, bp, cq]> : [{Output_Cover=[aq, de, du, bd, 0s, bu, ch, dy, 0k, da, bp, cq]}]
Input_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{New_Adults=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], Output_Seeds=[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
CompSum <[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, 0e, dy, 0k, da]> : [{CSumIndex=[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
New_Adults <[de, bd, 0s, ad, dl, ak, bp, aq, du, bu, dy, 0k, da]> : [{}]
CCondBAC <[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
GR <[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]> : [{}]
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]
Output_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Basal=[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc], Output_Seeds=[aq, de, du, bd, 0s, bu, dy, da, bp]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CCondS <[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{}]
SI <[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
Output_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
NH <[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{Output_NUI=[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{SI=[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da], GR=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], SP=[aq, de, du, bd, 0s, ad, bu, dy, 0k, da, bp]}]
SP <[aq, de, du, bd, 0s, ad, bu, dy, dl, 0k, da, bp]> : [{}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{CCondS=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], CCondBAC=[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
SR <[dd, bc, de, 0r, bd, df, 0s, 0u, 0v, dj, 0w, dk, 0x, dn, dp, bo, bp, dt, du, bt, bu, dx, dy, ac, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]



The DAG : dag_STNatural_dag_WallabyNatural_dag_NeedleNatural_dag_SpearNatural_dag_OnionNatural.txt : 
CompSum <[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, 0e, dy, 0k, da]> : [{CSumIndex=[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Output_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
BCGD_C3PLBCR <[de, du, bd, da, bp]> : [{Output_Basal=[de, du, bd, da, bp]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
BCGD_C3PLCCR <[de, du, bd, da, bp]> : [{Output_Cover=[de, du, bd, da, bp]}]
Input_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Basal=[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc], Output_Seeds=[aq, de, du, bd, 0s, bu, dy, da, bp]}]
CCondS <[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]> : [{}]
SI <[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
BCGD_C3PLCGR <[de, du, bd, da, bp]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{SI=[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da], GR=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], SP=[aq, de, du, bd, 0s, ad, bu, dy, 0k, da, bp]}]
SP <[aq, de, du, bd, 0s, ad, bu, dy, dl, 0k, da, bp]> : [{}]
SR <[dd, bc, de, 0r, bd, df, 0s, 0u, 0v, dj, 0w, dk, 0x, dn, dp, bo, bp, dt, du, bt, bu, dx, dy, ac, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
CC <[aq, de, du, bd, 0s, bu, ch, dy, 0k, da, bp, cq]> : [{Output_Cover=[aq, de, du, bd, 0s, bu, ch, dy, 0k, da, bp, cq]}]
Input_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{New_Adults=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], Output_Seeds=[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
New_Adults <[de, bd, 0s, ad, dl, ak, bp, aq, du, bu, dy, 0k, da]> : [{}]
CCondBAC <[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
GR <[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]> : [{}]
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
BCGD_C3PLCDR <[de, du, bd, da, bp]> : [{}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{}]
Output_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
NH <[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{Output_NUI=[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{CCondS=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], CCondBAC=[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]}]



The DAG : dag_STNatural_dag_NeedleNatural_dag_SpearNatural.txt : 
CompSum <[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, 0e, dy, 0k, da]> : [{CSumIndex=[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Output_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
BCGD_C3PLBCR <[de, du, bd, da, bp]> : [{Output_Basal=[de, du, bd, da, bp]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
BCGD_C3PLCCR <[de, du, bd, da, bp]> : [{Output_Cover=[de, du, bd, da, bp]}]
Input_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Basal=[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc], Output_Seeds=[aq, de, du, bd, 0s, bu, dy, da, bp]}]
CCondS <[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]> : [{}]
SI <[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
BCGD_C3PLCGR <[de, du, bd, da, bp]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{SI=[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da], GR=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], SP=[aq, de, du, bd, 0s, ad, bu, dy, 0k, da, bp]}]
SP <[aq, de, du, bd, 0s, ad, bu, dy, dl, 0k, da, bp]> : [{}]
SR <[dd, bc, de, 0r, bd, df, 0s, 0u, 0v, dj, 0w, dk, 0x, dn, dp, bo, bp, dt, du, bt, bu, dx, dy, ac, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
CC <[aq, de, du, bd, 0s, bu, ch, dy, 0k, da, bp, cq]> : [{Output_Cover=[aq, de, du, bd, 0s, bu, ch, dy, 0k, da, bp, cq]}]
Input_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{New_Adults=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], Output_Seeds=[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
New_Adults <[de, bd, 0s, ad, dl, ak, bp, aq, du, bu, dy, 0k, da]> : [{}]
CCondBAC <[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
BCGD_DDRL <[de, bd, da]> : [{}]
GR <[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]> : [{}]
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
BCGD_C3PLCDR <[de, du, bd, da, bp]> : [{}]
SSR <[de, du, bd, ad, bu, dy, 0k, da]> : [{Output_Seeds=[de, du, bd, ad, bu, dy, 0k, da]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{}]
Output_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
NH <[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{Output_NUI=[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{CCondS=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], CCondBAC=[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]}]



The DAG : dag_STNatural.txt : 
CompSum <[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, 0e, dy, 0k, da]> : [{CSumIndex=[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Output_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
BCGD_C3PLBCR <[de, du, bd, da, bp]> : [{Output_Basal=[de, du, bd, da, bp]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
BCGD_C3PLCCR <[de, du, bd, da, bp]> : [{Output_Cover=[de, du, bd, da, bp]}]
Input_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Basal=[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc], Output_Seeds=[aq, de, du, bd, 0s, bu, dy, da, bp]}]
CCondS <[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]> : [{}]
SI <[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
BCGD_C3PLCGR <[de, du, bd, da, bp]> : [{Output_NUI=[de]}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Output_NUI=[de]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{SI=[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da], GR=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], SP=[aq, de, du, bd, 0s, ad, bu, dy, 0k, da, bp]}]
SP <[aq, de, du, bd, 0s, ad, bu, dy, dl, 0k, da, bp]> : [{Output_Seeds=[aq, de, du, dy, bp]}]
SR <[dd, bc, de, 0r, bd, df, 0s, 0u, 0v, dj, 0w, dk, 0x, dn, dp, bo, bp, dt, du, bt, bu, dx, dy, ac, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{New_Adults=[aq, de, du, dy, bp]}]
CC <[aq, de, du, bd, 0s, bu, ch, dy, 0k, da, bp, cq]> : [{Output_Cover=[aq, de, du, bd, 0s, bu, ch, dy, 0k, da, bp, cq]}]
Input_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{New_Adults=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], Output_Seeds=[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
New_Adults <[de, bd, 0s, ad, dl, ak, bp, aq, du, bu, dy, 0k, da]> : [{Output_Basal=[aq, de, du, dy, dl, bp]}]
CCondBAC <[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
BCGD_DDRL <[de, bd, da]> : [{Output_Dead=[de], Output_NUI=[de]}]
GR <[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]> : [{New_Adults=[aq, de, du, bp], Output_Seeds=[aq, de, du, dy, bp]}]
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[de], Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Output_NUI=[de]}]
BCGD_C3PLCDR <[de, du, bd, da, bp]> : [{Output_Dead=[de]}]
SSR <[de, du, bd, ad, bu, dy, 0k, da]> : [{Output_Seeds=[de, du, bd, ad, bu, dy, 0k, da]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{CCondBAC=[aq, de, du, ch, bp]}]
Output_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dj, dk, dq, dr, ds, dt, du, dv, dw, dx, an, ao, ap, aq, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, ce, cf, cg, ch, cn, co, cp, cx, cy, cz, db, dc]}]
NH <[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{Output_NUI=[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{CCondS=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], CCondBAC=[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]}]



The DAG : dag_NeedleNatural_dag_SpearNatural.txt : 
CompSum <[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, 0e, dy, 0k, da]> : [{CSumIndex=[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Cover_Dec <[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ad, ae, cg, af, ch, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
Output_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
BCGD_C3PLBCR <[de, du, bd, da, bp]> : [{Output_Basal=[de, du, bd, da, bp]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
BCGD_C3PLCCR <[de, du, bd, da, bp]> : [{Output_Cover=[de, du, bd, da, bp]}]
Input_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Basal=[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc], Output_Seeds=[aq, de, du, bd, 0s, bu, dy, da, bp]}]
CCondS <[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]> : [{}]
SI <[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
BCGD_C3PLCGR <[de, du, bd, da, bp]> : [{Cover_Inc=[du, bd, da, bp]}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Dead_Dec=[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{SI=[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da], GR=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], SP=[aq, de, du, bd, 0s, ad, bu, dy, 0k, da, bp]}]
SP <[aq, de, du, bd, 0s, ad, bu, dy, dl, 0k, da, bp]> : [{}]
SR <[dd, bc, de, 0r, bd, df, 0s, 0u, 0v, dj, 0w, dk, 0x, dn, dp, bo, bp, dt, du, bt, bu, dx, dy, ac, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
CC <[aq, de, du, bd, 0s, bu, ch, dy, 0k, da, bp, cq]> : [{Output_Cover=[aq, de, du, bd, 0s, bu, ch, dy, 0k, da, bp, cq]}]
Cover_Inc <[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
Input_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{New_Adults=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], Output_Seeds=[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
New_Adults <[de, bd, 0s, ad, dl, ak, bp, aq, du, bu, dy, 0k, da]> : [{}]
CCondBAC <[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
BCGD_DDRL <[de, bd, da]> : [{Dead_Dec=[bd, da]}]
GR <[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]> : [{}]
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Cover_Inc=[aq, du, bd, 0s, bu, ch, dy, dl, 0k, da, bp, cq], Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Cover_Dec=[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ae, cg, af, ch, ag, aj, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
BCGD_C3PLCDR <[de, du, bd, da, bp]> : [{Cover_Dec=[du, bd, da, bp]}]
SSR <[de, du, bd, ad, bu, dy, 0k, da]> : [{Output_Seeds=[de, du, bd, ad, bu, dy, 0k, da]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{}]
Output_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
NH <[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{Output_NUI=[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{CCondS=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], CCondBAC=[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Dead_Dec <[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]



The DAG : dag_WallabyNatural_dag_NeedleNatural_dag_SpearNatural_dag_OnionNatural.txt : 
CompSum <[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, 0e, dy, 0k, da]> : [{CSumIndex=[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Cover_Dec <[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ad, ae, cg, af, ch, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
Output_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
BCGD_C3PLBCR <[de, du, bd, da, bp]> : [{Output_Basal=[de, du, bd, da, bp]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
BCGD_C3PLCCR <[de, du, bd, da, bp]> : [{Output_Cover=[de, du, bd, da, bp]}]
Input_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Basal=[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc], Output_Seeds=[aq, de, du, bd, 0s, bu, dy, da, bp]}]
CCondS <[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]> : [{}]
SI <[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
BCGD_C3PLCGR <[de, du, bd, da, bp]> : [{Cover_Inc=[du, bd, da, bp]}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Dead_Dec=[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{SI=[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da], GR=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], SP=[aq, de, du, bd, 0s, ad, bu, dy, 0k, da, bp]}]
SP <[aq, de, du, bd, 0s, ad, bu, dy, dl, 0k, da, bp]> : [{}]
SR <[dd, bc, de, 0r, bd, df, 0s, 0u, 0v, dj, 0w, dk, 0x, dn, dp, bo, bp, dt, du, bt, bu, dx, dy, ac, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
CC <[aq, de, du, bd, 0s, bu, ch, dy, 0k, da, bp, cq]> : [{Output_Cover=[aq, de, du, bd, 0s, bu, ch, dy, 0k, da, bp, cq]}]
Cover_Inc <[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
Input_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{New_Adults=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], Output_Seeds=[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
New_Adults <[de, bd, 0s, ad, dl, ak, bp, aq, du, bu, dy, 0k, da]> : [{}]
CCondBAC <[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
GR <[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]> : [{}]
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Cover_Inc=[aq, du, bd, 0s, bu, ch, dy, dl, 0k, da, bp, cq], Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Cover_Dec=[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ae, cg, af, ch, ag, aj, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
BCGD_C3PLCDR <[de, du, bd, da, bp]> : [{Cover_Dec=[du, bd, da, bp]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{}]
Output_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
NH <[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{Output_NUI=[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{CCondS=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], CCondBAC=[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Dead_Dec <[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]



The DAG : dag_HardyNativeNatural_dag_STNatural_dag_WallabyNatural_dag_NeedleNatural_dag_BroadWeedsNatural_dag_ExoticAnnualNatural_dag_RedLegNatural_dag_WindmillNatural_dag_ThemedaNatural_dag_BlanketNatural_dag_SpearNatural_dag_OnionNatural.txt : 
Input_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{Output_Seeds=[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
CompSum <[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, 0e, dy, 0k, da]> : [{CSumIndex=[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
New_Adults <[de, bd, 0s, ad, dl, ak, bp, aq, du, bu, dy, 0k, da]> : [{}]
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]
Output_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{}]
SI <[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{SI=[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da]}]
SP <[aq, de, du, bd, 0s, ad, bu, dy, dl, 0k, da, bp]> : [{}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{}]



The DAG : dag_WallabyNatural_dag_RedLegNatural_dag_WindmillNatural_dag_ThemedaNatural_dag_BlanketNatural.txt : 
Cover_Inc <[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
Input_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{Output_Seeds=[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
CompSum <[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, 0e, dy, 0k, da]> : [{CSumIndex=[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
New_Adults <[de, bd, 0s, ad, dl, ak, bp, aq, du, bu, dy, 0k, da]> : [{}]
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]
Cover_Dec <[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ad, ae, cg, af, ch, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
Output_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
BCGD_DDRM <[du, bu, dy, dl, 0k]> : [{Dead_Dec=[du, bu, dy, dl, 0k]}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Cover_Inc=[aq, du, bd, 0s, bu, ch, dy, dl, 0k, da, bp, cq], Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Cover_Dec=[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ae, cg, af, ch, ag, aj, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{}]
SI <[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Dead_Dec=[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{SI=[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da]}]
SP <[aq, de, du, bd, 0s, ad, bu, dy, dl, 0k, da, bp]> : [{}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{}]
Dead_Dec <[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]



The DAG : dag_RedLegNatural_dag_BlanketNatural.txt : 
CompSum <[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, 0e, dy, 0k, da]> : [{CSumIndex=[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
BCGD_C4PMCCR <[bu, 0k]> : [{Output_Cover=[bu, 0k]}]
Cover_Dec <[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ad, ae, cg, af, ch, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
Output_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CCondS <[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]> : [{}]
SI <[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Dead_Dec=[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{SI=[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da], GR=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], SP=[aq, de, du, bd, 0s, ad, bu, dy, 0k, da, bp]}]
SP <[aq, de, du, bd, 0s, ad, bu, dy, dl, 0k, da, bp]> : [{}]
SR <[dd, bc, de, 0r, bd, df, 0s, 0u, 0v, dj, 0w, dk, 0x, dn, dp, bo, bp, dt, du, bt, bu, dx, dy, ac, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
CC <[aq, de, du, bd, 0s, bu, ch, dy, 0k, da, bp, cq]> : [{Output_Cover=[aq, de, du, bd, 0s, bu, ch, dy, 0k, da, bp, cq]}]
Cover_Inc <[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
Input_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{New_Adults=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], Output_Seeds=[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
New_Adults <[de, bd, 0s, ad, dl, ak, bp, aq, du, bu, dy, 0k, da]> : [{}]
CCondBAC <[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
BCGD_C4PMCDR <[bu, 0k]> : [{Cover_Dec=[bu, 0k]}]
GR <[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]> : [{}]
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]
BCGD_DDRM <[du, bu, dy, dl, 0k]> : [{Dead_Dec=[du, bu, dy, dl, 0k]}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Cover_Inc=[aq, du, bd, 0s, bu, ch, dy, dl, 0k, da, bp, cq], Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Cover_Dec=[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ae, cg, af, ch, ag, aj, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
SSR <[de, du, bd, ad, bu, dy, 0k, da]> : [{Output_Seeds=[de, du, bd, ad, bu, dy, 0k, da]}]
BCGD_C4PMCGR <[bu, 0k]> : [{Cover_Inc=[bu, 0k]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{}]
NH <[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{Output_NUI=[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{CCondS=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], CCondBAC=[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Dead_Dec <[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]



The DAG : dag_RedLegNatural.txt : 
CompSum <[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, 0e, dy, 0k, da]> : [{CSumIndex=[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
BCGD_C4PMCCR <[bu, 0k]> : [{Output_Cover=[bu, 0k]}]
BCGD_C4PMBCR <[bu]> : [{Output_Basal=[bu]}]
Cover_Dec <[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ad, ae, cg, af, ch, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
Output_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Basal=[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc], Output_Seeds=[aq, de, du, bd, 0s, bu, dy, da, bp]}]
CCondS <[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]> : [{}]
SI <[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Dead_Dec=[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{SI=[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da], GR=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], SP=[aq, de, du, bd, 0s, ad, bu, dy, 0k, da, bp]}]
SP <[aq, de, du, bd, 0s, ad, bu, dy, dl, 0k, da, bp]> : [{}]
SR <[dd, bc, de, 0r, bd, df, 0s, 0u, 0v, dj, 0w, dk, 0x, dn, dp, bo, bp, dt, du, bt, bu, dx, dy, ac, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
CC <[aq, de, du, bd, 0s, bu, ch, dy, 0k, da, bp, cq]> : [{Output_Cover=[aq, de, du, bd, 0s, bu, ch, dy, 0k, da, bp, cq]}]
Cover_Inc <[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
Input_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{New_Adults=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], Output_Seeds=[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
New_Adults <[de, bd, 0s, ad, dl, ak, bp, aq, du, bu, dy, 0k, da]> : [{}]
CCondBAC <[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
BCGD_C4PMCDR <[bu, 0k]> : [{Cover_Dec=[bu, 0k]}]
GR <[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]> : [{}]
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]
BCGD_DDRM <[du, bu, dy, dl, 0k]> : [{Dead_Dec=[du, bu, dy, dl, 0k]}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Cover_Inc=[aq, du, bd, 0s, bu, ch, dy, dl, 0k, da, bp, cq], Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Cover_Dec=[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ae, cg, af, ch, ag, aj, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
SSR <[de, du, bd, ad, bu, dy, 0k, da]> : [{Output_Seeds=[de, du, bd, ad, bu, dy, 0k, da]}]
BCGD_C4PMCGR <[bu, 0k]> : [{Cover_Inc=[bu, 0k]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{}]
Output_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
NH <[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{Output_NUI=[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{CCondS=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], CCondBAC=[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Dead_Dec <[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]



The DAG : dag_HardyNativeNatural_dag_STNatural_dag_WallabyNatural_dag_WindmillNatural_dag_ThemedaNatural_dag_OnionNatural.txt : 
Input_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{Output_Seeds=[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
CompSum <[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, 0e, dy, 0k, da]> : [{CSumIndex=[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
New_Adults <[de, bd, 0s, ad, dl, ak, bp, aq, du, bu, dy, 0k, da]> : [{Output_Basal=[aq, de, du, dy, dl, bp]}]
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]
Output_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Basal=[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{}]
SI <[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
Output_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{SI=[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da]}]
SP <[aq, de, du, bd, 0s, ad, bu, dy, dl, 0k, da, bp]> : [{}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{}]



The DAG : dag_HardyNativeNatural_dag_STNatural_dag_WallabyNatural_dag_WindmillNatural_dag_OnionNatural.txt : 
CC <[aq, de, du, bd, 0s, bu, ch, dy, 0k, da, bp, cq]> : [{Output_Cover=[aq, de, du, bd, 0s, bu, ch, dy, 0k, da, bp, cq]}]
Input_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{New_Adults=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], Output_Seeds=[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
CompSum <[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, 0e, dy, 0k, da]> : [{CSumIndex=[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
New_Adults <[de, bd, 0s, ad, dl, ak, bp, aq, du, bu, dy, 0k, da]> : [{Output_Basal=[aq, de, du, dy, dl, bp]}]
CCondBAC <[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
GR <[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]> : [{Output_Seeds=[aq, de, du, dy, bp]}]
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]
Output_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Basal=[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc], Output_Seeds=[aq, de, du, bd, 0s, bu, dy, da, bp]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CCondS <[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{}]
SI <[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
Output_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
NH <[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{Output_NUI=[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{SI=[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da], GR=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], SP=[aq, de, du, bd, 0s, ad, bu, dy, 0k, da, bp]}]
SP <[aq, de, du, bd, 0s, ad, bu, dy, dl, 0k, da, bp]> : [{Output_Seeds=[aq, de, du, dy, bp]}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{CCondS=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], CCondBAC=[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
SR <[dd, bc, de, 0r, bd, df, 0s, 0u, 0v, dj, 0w, dk, 0x, dn, dp, bo, bp, dt, du, bt, bu, dx, dy, ac, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{New_Adults=[aq, de, du, dy, bp]}]



The DAG : dag_HardyNativeNatural_dag_STNatural_dag_WallabyNatural_dag_OnionNatural.txt : 
CC <[aq, de, du, bd, 0s, bu, ch, dy, 0k, da, bp, cq]> : [{Output_Cover=[aq, de, du, bd, 0s, bu, ch, dy, 0k, da, bp, cq]}]
Input_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{New_Adults=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], Output_Seeds=[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
CompSum <[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, 0e, dy, 0k, da]> : [{CSumIndex=[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
New_Adults <[de, bd, 0s, ad, dl, ak, bp, aq, du, bu, dy, 0k, da]> : [{Output_Basal=[aq, de, du, dy, dl, bp]}]
CCondBAC <[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
GR <[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]> : [{New_Adults=[aq, de, du, bp], Output_Seeds=[aq, de, du, dy, bp]}]
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]
Output_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Basal=[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc], Output_Seeds=[aq, de, du, bd, 0s, bu, dy, da, bp]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CCondS <[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{CCondBAC=[aq, de, du, ch, bp]}]
SI <[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
Output_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dj, dk, dq, dr, ds, dt, du, dv, dw, dx, an, ao, ap, aq, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, ce, cf, cg, ch, cn, co, cp, cx, cy, cz, db, dc]}]
NH <[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{Output_NUI=[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{SI=[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da], GR=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], SP=[aq, de, du, bd, 0s, ad, bu, dy, 0k, da, bp]}]
SP <[aq, de, du, bd, 0s, ad, bu, dy, dl, 0k, da, bp]> : [{Output_Seeds=[aq, de, du, dy, bp]}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{CCondS=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], CCondBAC=[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
SR <[dd, bc, de, 0r, bd, df, 0s, 0u, 0v, dj, 0w, dk, 0x, dn, dp, bo, bp, dt, du, bt, bu, dx, dy, ac, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{New_Adults=[aq, de, du, dy, bp]}]



The DAG : dag_STNatural_dag_NeedleNatural_dag_BroadWeedsNatural_dag_ExoticAnnualNatural_dag_RuderNatural_dag_ThemedaNatural_dag_OnionNatural_dag_SensitNativeNatural_dag_HardyNativeNatural_dag_WallabyNatural_dag_RedLegNatural_dag_WindmillNatural_dag_BlanketNatural_dag_SpearNatural.txt : 
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CompSum <[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, 0e, dy, 0k, da]> : [{CSumIndex=[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{}]
SI <[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{SI=[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da]}]
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{}]



The DAG : dag_HardyNativeNatural_dag_NeedleNatural_dag_ExoticAnnualNatural_dag_WindmillNatural_dag_OnionNatural_dag_SensitNativeNatural.txt : 
Cover_Inc <[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
CompSum <[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, 0e, dy, 0k, da]> : [{CSumIndex=[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
CCondBAC <[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]
Cover_Dec <[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ad, ae, cg, af, ch, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{}]
SI <[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
NH <[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{Output_NUI=[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Dead_Dec=[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{SI=[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da]}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{CCondBAC=[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Dead_Dec <[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{Output_Dead=[aq, bd, ad, dy, bp, cq]}]



The DAG : dag_HardyNativeNatural_dag_STNatural_dag_WallabyNatural_dag_NeedleNatural_dag_BroadWeedsNatural_dag_RedLegNatural_dag_RuderNatural_dag_WindmillNatural_dag_BlanketNatural_dag_SpearNatural_dag_OnionNatural_dag_SensitNativeNatural.txt : 
CC <[aq, de, du, bd, 0s, bu, ch, dy, 0k, da, bp, cq]> : [{Output_Cover=[aq, de, du, bd, 0s, bu, ch, dy, 0k, da, bp, cq]}]
CompSum <[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, 0e, dy, 0k, da]> : [{CSumIndex=[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
CCondBAC <[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{}]
SI <[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
NH <[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{Output_NUI=[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{SI=[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da]}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{CCondBAC=[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]}]



The DAG : dag_HardyNativeNatural_dag_STNatural_dag_WallabyNatural_dag_RuderNatural_dag_OnionNatural.txt : 
CC <[aq, de, du, bd, 0s, bu, ch, dy, 0k, da, bp, cq]> : [{Output_Cover=[aq, de, du, bd, 0s, bu, ch, dy, 0k, da, bp, cq]}]
CompSum <[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, 0e, dy, 0k, da]> : [{CSumIndex=[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
CCondBAC <[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Basal=[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{CCondBAC=[aq, de, du, ch, bp]}]
SI <[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
Output_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dj, dk, dq, dr, ds, dt, du, dv, dw, dx, an, ao, ap, aq, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, ce, cf, cg, ch, cn, co, cp, cx, cy, cz, db, dc]}]
NH <[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{Output_NUI=[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{SI=[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da]}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{CCondBAC=[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]}]



The DAG : dag_RuderNatural.txt : 
CC <[aq, de, du, bd, 0s, bu, ch, dy, 0k, da, bp, cq]> : [{Output_Cover=[aq, de, du, bd, 0s, bu, ch, dy, 0k, da, bp, cq]}]
Cover_Inc <[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
BCGD_C3PSCGR <[ch]> : [{Cover_Inc=[ch]}]
CompSum <[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, 0e, dy, 0k, da]> : [{CSumIndex=[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
BCGD_C3PSBCR <[ch]> : [{Output_Basal=[ch]}]
BCGD_C3PSCDR <[ch]> : [{Cover_Dec=[ch]}]
BCGD_DDRH <[aq, 0s, ad, ch, ak, bp, cq]> : [{Dead_Dec=[aq, 0s, ad, ch, ak, bp, cq]}]
BCGD_C3PSCCR <[ch]> : [{Output_Cover=[ch]}]
CCondBAC <[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]
Cover_Dec <[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ad, ae, cg, af, ch, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Cover_Inc=[aq, du, bd, 0s, bu, ch, dy, dl, 0k, da, bp, cq], Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Cover_Dec=[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ae, cg, af, ch, ag, aj, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Basal=[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{CCondBAC=[aq, de, du, ch, bp]}]
SI <[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da]> : [{Output_Basal=[aq, bd, ch, dy, dl, bp]}]
Output_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dj, dk, dq, dr, ds, dt, du, dv, dw, dx, an, ao, ap, aq, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, ce, cf, cg, ch, cn, co, cp, cx, cy, cz, db, dc]}]
NH <[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{Output_NUI=[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Dead_Dec=[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{SI=[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da]}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{CCondBAC=[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Dead_Dec <[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]



The DAG : dag_HardyNativeNatural_dag_WallabyNatural_dag_NeedleNatural_dag_BroadWeedsNatural_dag_RedLegNatural_dag_RuderNatural_dag_WindmillNatural_dag_ThemedaNatural_dag_BlanketNatural_dag_SpearNatural_dag_OnionNatural_dag_SensitNativeNatural.txt : 
Cover_Inc <[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
CompSum <[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, 0e, dy, 0k, da]> : [{CSumIndex=[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]
Cover_Dec <[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ad, ae, cg, af, ch, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Cover_Inc=[aq, du, bd, 0s, bu, ch, dy, dl, 0k, da, bp, cq], Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Cover_Dec=[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ae, cg, af, ch, ag, aj, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{}]
SI <[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Dead_Dec=[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{SI=[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da]}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{}]
Dead_Dec <[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]



The DAG : dag_HardyNativeNatural_dag_NeedleNatural_dag_RuderNatural_dag_WindmillNatural_dag_ThemedaNatural_dag_OnionNatural.txt : 
Cover_Inc <[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
CompSum <[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, 0e, dy, 0k, da]> : [{CSumIndex=[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]
Cover_Dec <[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ad, ae, cg, af, ch, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Cover_Inc=[aq, du, bd, 0s, bu, ch, dy, dl, 0k, da, bp, cq], Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Cover_Dec=[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ae, cg, af, ch, ag, aj, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Basal=[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{}]
SI <[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da]> : [{Output_Basal=[aq, bd, ch, dy, dl, bp]}]
Output_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Dead_Dec=[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{SI=[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da]}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{}]
Dead_Dec <[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]



The DAG : dag_HardyNativeNatural_dag_NeedleNatural_dag_WindmillNatural_dag_OnionNatural.txt : 
CompSum <[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, 0e, dy, 0k, da]> : [{CSumIndex=[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Cover_Dec <[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ad, ae, cg, af, ch, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{Output_Dead=[dd, bc, 0r, bd, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, bt, dx, dy, ac, ae, cg, af, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0l, 0m, 0n, 0o]}]
Output_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Basal=[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc], Output_Seeds=[aq, de, du, bd, 0s, bu, dy, da, bp]}]
CCondS <[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]> : [{}]
SI <[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da]> : [{Output_Basal=[aq, bd, ch, dy, dl, bp]}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Dead_Dec=[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{SI=[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da], GR=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], SP=[aq, de, du, bd, 0s, ad, bu, dy, 0k, da, bp]}]
SP <[aq, de, du, bd, 0s, ad, bu, dy, dl, 0k, da, bp]> : [{}]
SR <[dd, bc, de, 0r, bd, df, 0s, 0u, 0v, dj, 0w, dk, 0x, dn, dp, bo, bp, dt, du, bt, bu, dx, dy, ac, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
CC <[aq, de, du, bd, 0s, bu, ch, dy, 0k, da, bp, cq]> : [{Output_Cover=[aq, de, du, bd, 0s, bu, ch, dy, 0k, da, bp, cq]}]
Cover_Inc <[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
Input_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{New_Adults=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], Output_Seeds=[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
New_Adults <[de, bd, 0s, ad, dl, ak, bp, aq, du, bu, dy, 0k, da]> : [{}]
CCondBAC <[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
GR <[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]> : [{}]
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Cover_Inc=[aq, du, bd, 0s, bu, ch, dy, dl, 0k, da, bp, cq], Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Cover_Dec=[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ae, cg, af, ch, ag, aj, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{CCondS=[aq, bd, dy, bp]}]
Output_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
NH <[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{Output_NUI=[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{CCondS=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], CCondBAC=[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Dead_Dec <[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{Output_Dead=[aq, bd, ad, dy, bp, cq]}]



The DAG : dag_WindmillNatural.txt : 
CompSum <[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, 0e, dy, 0k, da]> : [{CSumIndex=[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Cover_Dec <[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ad, ae, cg, af, ch, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{Output_Dead=[dd, bc, 0r, bd, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, bt, dx, dy, ac, ae, cg, af, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0l, 0m, 0n, 0o]}]
Output_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
BCGD_C4PSCDR <[dy]> : [{Cover_Dec=[dy]}]
Input_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Basal=[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc], Output_Seeds=[aq, de, du, bd, 0s, bu, dy, da, bp]}]
CCondS <[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]> : [{}]
SI <[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da]> : [{Output_Basal=[aq, bd, ch, dy, dl, bp]}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Dead_Dec=[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{SI=[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da], GR=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], SP=[aq, de, du, bd, 0s, ad, bu, dy, 0k, da, bp]}]
SP <[aq, de, du, bd, 0s, ad, bu, dy, dl, 0k, da, bp]> : [{Output_Seeds=[aq, de, du, dy, bp]}]
SR <[dd, bc, de, 0r, bd, df, 0s, 0u, 0v, dj, 0w, dk, 0x, dn, dp, bo, bp, dt, du, bt, bu, dx, dy, ac, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{New_Adults=[aq, de, du, dy, bp]}]
CC <[aq, de, du, bd, 0s, bu, ch, dy, 0k, da, bp, cq]> : [{Output_Cover=[aq, de, du, bd, 0s, bu, ch, dy, 0k, da, bp, cq]}]
Cover_Inc <[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
Input_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{New_Adults=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], Output_Seeds=[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
New_Adults <[de, bd, 0s, ad, dl, ak, bp, aq, du, bu, dy, 0k, da]> : [{Output_Basal=[aq, de, du, dy, dl, bp]}]
CCondBAC <[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
GR <[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]> : [{Output_Seeds=[aq, de, du, dy, bp]}]
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]
BCGD_DDRM <[du, bu, dy, dl, 0k]> : [{Dead_Dec=[du, bu, dy, dl, 0k]}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Cover_Inc=[aq, du, bd, 0s, bu, ch, dy, dl, 0k, da, bp, cq], Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Cover_Dec=[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ae, cg, af, ch, ag, aj, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
BCGD_C4PSBCR <[dy]> : [{Output_Basal=[dy]}]
SSR <[de, du, bd, ad, bu, dy, 0k, da]> : [{Output_Seeds=[de, du, bd, ad, bu, dy, 0k, da]}]
BCGD_C4PSCCR <[dy]> : [{Output_Cover=[dy]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{CCondS=[aq, bd, dy, bp]}]
BCGD_C4PSCGR <[dy]> : [{Cover_Inc=[dy]}]
Output_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
NH <[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{Output_NUI=[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{CCondS=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], CCondBAC=[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Dead_Dec <[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{Output_Dead=[aq, bd, ad, dy, bp, cq]}]



The DAG : dag_STNatural_dag_NeedleNatural_dag_BroadWeedsNatural_dag_ExoticAnnualNatural_dag_RuderNatural_dag_GrainNatural_dag_OnionNatural_dag_SensitNativeNatural_dag_HardyNativeNatural_dag_WallabyNatural_dag_RedLegNatural_dag_WindmillNatural_dag_BlanketNatural_dag_SpearNatural.txt : 
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CompSum <[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, 0e, dy, 0k, da]> : [{CSumIndex=[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{}]
CCondBAC <[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
NH <[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{Output_NUI=[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{}]
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{CCondBAC=[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]}]



The DAG : dag_HardyNativeNatural_dag_NeedleNatural_dag_BroadWeedsNatural_dag_GrainNatural_dag_BlanketNatural_dag_SensitNativeNatural.txt : 
Cover_Inc <[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
CompSum <[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, 0e, dy, 0k, da]> : [{CSumIndex=[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
CCondBAC <[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]
Cover_Dec <[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ad, ae, cg, af, ch, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{}]
NH <[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{Output_NUI=[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Dead_Dec=[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{CCondBAC=[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Dead_Dec <[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{Output_NUI=[aq, bd, 0s, ak, 0k, cq]}]



The DAG : dag_HardyNativeNatural_dag_SensitNativeNatural.txt : 
CC <[aq, de, du, bd, 0s, bu, ch, dy, 0k, da, bp, cq]> : [{Output_Cover=[aq, de, du, bd, 0s, bu, ch, dy, 0k, da, bp, cq]}]
Cover_Inc <[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{Output_NUI=[aq, du, 0s, dl, ak, 0k, cq]}]
CompSum <[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, 0e, dy, 0k, da]> : [{CSumIndex=[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
BCGD_DDRH <[aq, 0s, ad, ch, ak, bp, cq]> : [{Dead_Dec=[aq, 0s, ad, ch, ak, bp, cq]}]
CCondBAC <[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
BCGD_C3PHBCH <[aq, cq]> : [{Output_Basal=[aq, cq]}]
BCGD_C3PHCCH <[aq, cq]> : [{Output_Cover=[aq, cq]}]
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]
Cover_Dec <[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ad, ae, cg, af, ch, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{Output_Dead=[dd, bc, 0r, bd, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, bt, dx, dy, ac, ae, cg, af, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0l, 0m, 0n, 0o]}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Cover_Inc=[aq, du, bd, 0s, bu, ch, dy, dl, 0k, da, bp, cq], Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Cover_Dec=[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ae, cg, af, ch, ag, aj, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Basal=[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{}]
SI <[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
Output_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
NH <[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{Output_NUI=[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Dead_Dec=[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{SI=[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da]}]
BCGD_C3PHCDR <[aq, cq]> : [{Cover_Dec=[aq, cq]}]
BCGD_C3PCGR <[aq, cq]> : [{Cover_Inc=[aq, cq]}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{CCondBAC=[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Dead_Dec <[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{Output_Dead=[aq, bd, ad, dy, bp, cq], Output_NUI=[aq, bd, 0s, ak, 0k, cq]}]



The DAG : dag_HardyNativeNatural_dag_BroadWeedsNatural_dag_ExoticAnnualNatural_dag_RuderNatural_dag_GrainNatural_dag_OnionNatural_dag_SensitNativeNatural.txt : 
Cover_Inc <[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
CompSum <[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, 0e, dy, 0k, da]> : [{CSumIndex=[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
BCGD_DDRH <[aq, 0s, ad, ch, ak, bp, cq]> : [{Dead_Dec=[aq, 0s, ad, ch, ak, bp, cq]}]
CCondBAC <[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]
Cover_Dec <[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ad, ae, cg, af, ch, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{}]
NH <[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{Output_NUI=[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Dead_Dec=[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{CCondBAC=[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Dead_Dec <[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]



The DAG : dag_HardyNativeNatural_dag_BroadWeedsNatural_dag_OnionNatural.txt : 
CompSum <[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, 0e, dy, 0k, da]> : [{CSumIndex=[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Cover_Dec <[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ad, ae, cg, af, ch, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
Output_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Basal=[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc], Output_Seeds=[aq, de, du, bd, 0s, bu, dy, da, bp]}]
CCondS <[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]> : [{}]
SI <[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Dead_Dec=[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{SI=[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da], GR=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], SP=[aq, de, du, bd, 0s, ad, bu, dy, 0k, da, bp]}]
SP <[aq, de, du, bd, 0s, ad, bu, dy, dl, 0k, da, bp]> : [{}]
SR <[dd, bc, de, 0r, bd, df, 0s, 0u, 0v, dj, 0w, dk, 0x, dn, dp, bo, bp, dt, du, bt, bu, dx, dy, ac, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
SDR <[aq, 0s, bp]> : [{Output_Seeds=[aq, 0s, bp]}]
CC <[aq, de, du, bd, 0s, bu, ch, dy, 0k, da, bp, cq]> : [{Output_Cover=[aq, de, du, bd, 0s, bu, ch, dy, 0k, da, bp, cq]}]
Cover_Inc <[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
Input_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{New_Adults=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], Output_Seeds=[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
BCGD_DDRH <[aq, 0s, ad, ch, ak, bp, cq]> : [{Dead_Dec=[aq, 0s, ad, ch, ak, bp, cq]}]
New_Adults <[de, bd, 0s, ad, dl, ak, bp, aq, du, bu, dy, 0k, da]> : [{}]
CCondBAC <[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
GR <[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]> : [{}]
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Cover_Inc=[aq, du, bd, 0s, bu, ch, dy, dl, 0k, da, bp, cq], Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Cover_Dec=[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ae, cg, af, ch, ag, aj, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{}]
Output_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
NH <[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{Output_NUI=[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{CCondS=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], CCondBAC=[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Dead_Dec <[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]



The DAG : dag_BroadWeedsNatural.txt : 
CompSum <[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, 0e, dy, 0k, da]> : [{CSumIndex=[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Cover_Dec <[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ad, ae, cg, af, ch, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
Output_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Basal=[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc], Output_Seeds=[aq, de, du, bd, 0s, bu, dy, da, bp]}]
BCGD_C3PMCDR <[0s]> : [{Cover_Dec=[0s]}]
CCondS <[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]> : [{}]
SI <[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Dead_Dec=[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{SI=[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da], GR=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], SP=[aq, de, du, bd, 0s, ad, bu, dy, 0k, da, bp]}]
SP <[aq, de, du, bd, 0s, ad, bu, dy, dl, 0k, da, bp]> : [{}]
SR <[dd, bc, de, 0r, bd, df, 0s, 0u, 0v, dj, 0w, dk, 0x, dn, dp, bo, bp, dt, du, bt, bu, dx, dy, ac, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
SDR <[aq, 0s, bp]> : [{Output_Seeds=[aq, 0s, bp]}]
CC <[aq, de, du, bd, 0s, bu, ch, dy, 0k, da, bp, cq]> : [{Output_Cover=[aq, de, du, bd, 0s, bu, ch, dy, 0k, da, bp, cq]}]
Cover_Inc <[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{Output_NUI=[aq, du, 0s, dl, ak, 0k, cq]}]
Input_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{New_Adults=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], Output_Seeds=[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
BCGD_DDRH <[aq, 0s, ad, ch, ak, bp, cq]> : [{Dead_Dec=[aq, 0s, ad, ch, ak, bp, cq]}]
New_Adults <[de, bd, 0s, ad, dl, ak, bp, aq, du, bu, dy, 0k, da]> : [{}]
CCondBAC <[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
GR <[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]> : [{}]
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Cover_Inc=[aq, du, bd, 0s, bu, ch, dy, dl, 0k, da, bp, cq], Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Cover_Dec=[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ae, cg, af, ch, ag, aj, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
BCGD_C3PMCCR <[0s]> : [{Output_Cover=[0s]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
BCGD_C3PMBCR <[0s]> : [{Output_Basal=[0s]}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{}]
BCGD_C3PMCGR <[0s]> : [{Cover_Inc=[0s]}]
Output_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
NH <[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{Output_NUI=[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{CCondS=[aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp], CCondBAC=[de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Dead_Dec <[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{Output_NUI=[aq, bd, 0s, ak, 0k, cq]}]



The DAG : dag_NeedleNatural_dag_BroadWeedsNatural_dag_ExoticAnnualNatural_dag_RuderNatural_dag_ThemedaNatural_dag_GrainNatural_dag_OnionNatural_dag_SensitNativeNatural_dag_HardyNativeNatural_dag_WallabyNatural_dag_RedLegNatural_dag_WindmillNatural_dag_BlanketNatural_dag_SpearNatural.txt : 
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Cover_Inc <[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CompSum <[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, 0e, dy, 0k, da]> : [{CSumIndex=[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Dead_Dec=[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{}]
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]
Cover_Dec <[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ad, ae, cg, af, ch, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{}]
Dead_Dec <[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]



The DAG : dag_HardyNativeNatural_dag_WallabyNatural_dag_BroadWeedsNatural_dag_ThemedaNatural_dag_GrainNatural_dag_BlanketNatural_dag_SensitNativeNatural.txt : 
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Cover_Inc <[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{Output_NUI=[aq, du, 0s, dl, ak, 0k, cq]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CompSum <[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, 0e, dy, 0k, da]> : [{CSumIndex=[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Dead_Dec=[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{}]
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]
Cover_Dec <[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ad, ae, cg, af, ch, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{}]
Dead_Dec <[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]



The DAG : dag_TenaciousScarify1_dag_TenaciousScarify2_dag_FragileScarify1_dag_FragileScarify2_dag_FragileScarify3_dag_ThemedaHarvest_dag_SensitiveFire_dag_SensitiveHarvest_dag_SensitiveHarvest2_dag_ThemedaScarify_dag_TolerantFire_dag_TolerantHarvest_dag_BasalAdultCoverGraze_dag_KilledFire1_dag_KilledFire2_dag_KilledFire3_dag_ModerateFire_dag_BlanketHarvest_dag_ModerateHarvest.txt : 
CR <[df, dg, ae, af, ag, dj, cj, ck, cl, dn, dp, dq, 0c, au, av, aw, ay, 0i, az]> : [{}]



The DAG : dag_BasalAdultCoverGraze.txt : 
SBR <[0c]> : [{}]
SAR <[0c]> : [{}]
DPal <[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, 0c, cx, cy, 0g, 0h, db, ba, dc]> : [{DR=[0c]}]
HAR <[0c]> : [{}]
HBR <[0c]> : [{}]
Duration <[0p, bb, 0q, dh, di, bh, bi, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, al, cn, am, co, an, ao, 0c, cx, cy, 0g, 0h, db, ba, dc]> : [{SBR=[0c], SAR=[0c], HAR=[0c], HBR=[0c], DR=[0c], CR=[0c]}]
LPal <[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, 0c, cx, cy, 0g, 0h, db, ba, dc]> : [{SBR=[0c], SAR=[0c], HAR=[0c], HBR=[0c], CR=[0c]}]
DR <[0c]> : [{}]
CR <[df, dg, ae, af, ag, dj, cj, ck, cl, dn, dp, dq, 0c, au, av, aw, ay, 0i, az]> : [{}]



The DAG : dag_KilledFire1_dag_KilledFire2_dag_ThemedaHarvest_dag_SensitiveFire_dag_ModerateFire_dag_BlanketHarvest_dag_SensitiveHarvest2_dag_TolerantFire.txt : 
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
CR <[df, dg, ae, af, ag, dj, cj, ck, cl, dn, dp, dq, 0c, au, av, aw, ay, 0i, az]> : [{Output_Dead=[au, av, dj, cj, ay, 0i, cl, dp], Output_Cover=[au, av, dj, cj, ay, 0i, cl, dp]}]



The DAG : dag_TenaciousScarify2_dag_FragileScarify1_dag_KilledFire1_dag_FragileScarify2_dag_KilledFire2_dag_KilledFire3_dag_SensitiveHarvest_dag_BlanketHarvest_dag_SensitiveHarvest2.txt : 
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Adults <[dg, by, bz, aa, cc, ab, ac, ad, ae, af, ah, ai, ck, aj, cl, ak, 0a, 0b, au, av, aw, 0g, 0h, 0i, 0j, 0k, 0n]> : [{}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Input_Adults <[dg, by, bz, aa, cc, ab, ac, ad, ae, af, ah, ai, ck, aj, cl, ak, 0a, 0b, au, av, aw, 0g, 0h, 0i, 0j, 0k, 0n]> : [{Output_Adults=[dg, by, bz, aa, cc, ab, ac, ad, ae, af, ah, ai, ck, aj, cl, ak, 0a, 0b, au, av, aw, 0g, 0h, 0i, 0j, 0k, 0n]}]
CR <[df, dg, ae, af, ag, dj, cj, ck, cl, dn, dp, dq, 0c, au, av, aw, ay, 0i, az]> : [{}]
ADR <[dg, ae, au, af, av, aw, ck, 0i, cl]> : [{}]



The DAG : dag_KilledFire3_dag_SensitiveHarvest2.txt : 
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Adults <[dg, by, bz, aa, cc, ab, ac, ad, ae, af, ah, ai, ck, aj, cl, ak, 0a, 0b, au, av, aw, 0g, 0h, 0i, 0j, 0k, 0n]> : [{}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Input_Adults <[dg, by, bz, aa, cc, ab, ac, ad, ae, af, ah, ai, ck, aj, cl, ak, 0a, 0b, au, av, aw, 0g, 0h, 0i, 0j, 0k, 0n]> : [{Output_Adults=[dg, by, bz, aa, cc, ab, ac, ad, ae, af, ah, ai, ck, aj, cl, ak, 0a, 0b, au, av, aw, 0g, 0h, 0i, 0j, 0k, 0n]}]
CR <[df, dg, ae, af, ag, dj, cj, ck, cl, dn, dp, dq, 0c, au, av, aw, ay, 0i, az]> : [{}]
ADR <[dg, ae, au, af, av, aw, ck, 0i, cl]> : [{Output_Adults=[aw, cl]}]



The DAG : dag_KilledFire3.txt : 
Burn <[0t, au, av, bg, aw, cj, ay, dp]> : [{ADR=[au, av, aw], CR=[au, av, aw, cj, ay, dp]}]
RBio <[au, av, aw, cj, ay, dp]> : [{}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{RBio=[au, av, aw, cj, ay, dp], Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Adults <[dg, by, bz, aa, cc, ab, ac, ad, ae, af, ah, ai, ck, aj, cl, ak, 0a, 0b, au, av, aw, 0g, 0h, 0i, 0j, 0k, 0n]> : [{}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
NH <[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{Output_NUI=[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{RBio=[au, av, aw, cj, ay, dp], Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]
Input_Adults <[dg, by, bz, aa, cc, ab, ac, ad, ae, af, ah, ai, ck, aj, cl, ak, 0a, 0b, au, av, aw, 0g, 0h, 0i, 0j, 0k, 0n]> : [{Output_Adults=[dg, by, bz, aa, cc, ab, ac, ad, ae, af, ah, ai, ck, aj, cl, ak, 0a, 0b, au, av, aw, 0g, 0h, 0i, 0j, 0k, 0n]}]
CR <[df, dg, ae, af, ag, dj, cj, ck, cl, dn, dp, dq, 0c, au, av, aw, ay, 0i, az]> : [{RBio=[aw]}]
ADR <[dg, ae, au, af, av, aw, ck, 0i, cl]> : [{Output_Adults=[aw, cl]}]



The DAG : dag_TenaciousScarify1_dag_FragileScarify3_dag_ThemedaHarvest_dag_SensitiveFire_dag_ModerateFire_dag_ModerateHarvest_dag_ThemedaScarify_dag_TolerantFire_dag_TolerantHarvest.txt : 
BR <[df, ag, dj, cj, ay, az, dn, dp, dq]> : [{}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Basal=[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
CR <[df, dg, ae, af, ag, dj, cj, ck, cl, dn, dp, dq, 0c, au, av, aw, ay, 0i, az]> : [{}]



The DAG : dag_ThemedaHarvest_dag_ThemedaScarify_dag_TolerantFire.txt : 
BR <[df, ag, dj, cj, ay, az, dn, dp, dq]> : [{}]
Input_Seedlings <[dd, bc, 0r, df, dh, 0u, di, 0v, dj, 0w, dk, 0x, dl, dm, dn, dp, bo, dt, bt, bv, dx, cg, cp, ap, cz, 0l, 0m, 0o]> : [{Output_Seedlings=[dd, bc, 0r, df, dh, 0u, di, 0v, dj, 0w, dk, 0x, dm, dn, dp, bo, dt, bt, bv, dx, cg, cp, ap, cz, 0l, 0m, 0o]}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Basal=[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Seedlings <[dd, bc, 0r, df, dh, 0u, di, 0v, dj, 0w, dk, 0x, dl, dm, dn, dp, bo, dt, bt, bv, dx, cg, cp, ap, cz, 0l, 0m, 0o]> : [{}]
CR <[df, dg, ae, af, ag, dj, cj, ck, cl, dn, dp, dq, 0c, au, av, aw, ay, 0i, az]> : [{}]
SR <[dd, bc, de, 0r, bd, df, 0s, 0u, 0v, dj, 0w, dk, 0x, dn, dp, bo, bp, dt, du, bt, bu, dx, dy, ac, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{Output_Seedlings=[dj, dn, dp]}]



The DAG : dag_FragileScarify3_dag_SensitiveFire_dag_ModerateFire_dag_ModerateHarvest_dag_ThemedaScarify_dag_TolerantFire.txt : 
BR <[df, ag, dj, cj, ay, az, dn, dp, dq]> : [{Output_Basal=[ag, cj, ay, az, dn, dp]}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Basal=[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
CR <[df, dg, ae, af, ag, dj, cj, ck, cl, dn, dp, dq, 0c, au, av, aw, ay, 0i, az]> : [{}]



The DAG : dag_STNatural_dag_NeedleNatural_dag_BroadWeedsNatural_dag_ExoticAnnualNatural_dag_NutrientCarbonBoost_dag_NutrientFire_dag_RuderNatural_dag_NutrientGrazeCattle_dag_NutrientGrazeSheep_dag_ThemedaNatural_dag_NutrientNatural_dag_GrainNatural_dag_NutrientRemoveTopSoil_dag_OnionNatural_dag_SensitNativeNatural_dag_HardyNativeNatural_dag_WallabyNatural_dag_RedLegNatural_dag_WindmillNatural_dag_BiomassSummaries_dag_main_dag_BlanketNatural_dag_SpearNatural.txt : 
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{}]



The DAG : dag_main_dag_ThemedaNatural.txt : 
Soil_Friability <[ax, dl]> : [{}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{}]



The DAG : dag_NutrientCarbonBoost_dag_NutrientFire_dag_NutrientGrazeCattle_dag_NutrientGrazeSheep_dag_NutrientNatural_dag_NutrientRemoveTopSoil.txt : 
Input_Nitrogen <[bf, bg, bh, bi, bk, bl]> : [{Output_Nitrogen=[bf, bg, bh, bi, bk, bl]}]
Output_Phosphorous <[bf, bg, bh, bi, bk, bl]> : [{NL=[bf, bg, bh, bi, bk, bl]}]
Input_Phosphorous <[bf, bg, bh, bi, bk, bl]> : [{Output_Phosphorous=[bf, bg, bh, bi, bk, bl]}]
Output_Carbon <[bf, bg, bh, bi, bk, bl]> : [{NL=[bf, bg, bh, bi, bk, bl]}]
Output_Nitrogen <[bf, bg, bh, bi, bk, bl]> : [{NL=[bf, bg, bh, bi, bk, bl]}]
Input_Carbon <[bf, bg, bh, bi, bk, bl]> : [{Output_Carbon=[bf, bg, bh, bi, bk, bl]}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{}]



The DAG : dag_NutrientRemoveTopSoil.txt : 
Input_Nitrogen <[bf, bg, bh, bi, bk, bl]> : [{Output_Nitrogen=[bf, bg, bh, bi, bk, bl]}]
Output_Phosphorous <[bf, bg, bh, bi, bk, bl]> : [{NL=[bf, bg, bh, bi, bk, bl]}]
Input_Phosphorous <[bf, bg, bh, bi, bk, bl]> : [{Output_Phosphorous=[bf, bg, bh, bi, bk, bl]}]
Output_Carbon <[bf, bg, bh, bi, bk, bl]> : [{NL=[bf, bg, bh, bi, bk, bl]}]
Output_Nitrogen <[bf, bg, bh, bi, bk, bl]> : [{NL=[bf, bg, bh, bi, bk, bl]}]
Input_Carbon <[bf, bg, bh, bi, bk, bl]> : [{Output_Carbon=[bf, bg, bh, bi, bk, bl]}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{}]
RemoveTopSoil <[cc, cd, cu, bv, bw, bx, by, bz, bl, ca, cb]> : [{Output_Phosphorous=[bl], Output_Carbon=[bl], Output_Nitrogen=[bl]}]



The DAG : dag_NutrientGrazeCattle_dag_NutrientGrazeSheep.txt : 
Input_Nitrogen <[bf, bg, bh, bi, bk, bl]> : [{Output_Nitrogen=[bf, bg, bh, bi, bk, bl]}]
Output_Phosphorous <[bf, bg, bh, bi, bk, bl]> : [{NL=[bf, bg, bh, bi, bk, bl]}]
Input_Phosphorous <[bf, bg, bh, bi, bk, bl]> : [{Output_Phosphorous=[bf, bg, bh, bi, bk, bl]}]
Output_Carbon <[bf, bg, bh, bi, bk, bl]> : [{NL=[bf, bg, bh, bi, bk, bl]}]
Output_Nitrogen <[bf, bg, bh, bi, bk, bl]> : [{NL=[bf, bg, bh, bi, bk, bl]}]
Duration <[0p, bb, 0q, dh, di, bh, bi, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, al, cn, am, co, an, ao, 0c, cx, cy, 0g, 0h, db, ba, dc]> : [{Output_Nitrogen=[bh, bi]}]
Input_Carbon <[bf, bg, bh, bi, bk, bl]> : [{Output_Carbon=[bf, bg, bh, bi, bk, bl]}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{}]



The DAG : dag_STHerbicideTarget_dag_NeedleHerbicideTarget_dag_BroadWeedsHerbicideTarget_dag_C3GrassHerbicide_dag_C3GrassTargetHerbicide1_dag_C3GrassTargetHerbicide2_dag_ThemedaHerbicideTarget_dag_C4GrassHerbicide_dag_OnionHerbicideTarget_dag_WallabyHerbicideTarget_dag_RedLegHerbicideTarget_dag_WindmillHerbicideTarget_dag_ExoticAnnualHerbicideTarget_dag_RuderHerbicideTarget_dag_GrainHerbicideTarget_dag_SensitNativeHerbicideTarget_dag_HardyNativeHerbicideTarget_dag_AnnualGrassHerbicide1_dag_AnnualGrassHerbicide2_dag_HerbicideIntervention_dag_HerbicideInterventionTarget_dag_SpearHerbicideTarget_dag_BlanketHerbicideTarget_dag_BroadleafHerbicide1_dag_BroadleafHerbicide2_dag_BroadleafTargetHerbicide1_dag_BroadleafTargetHerbicide2.txt : 
Application <[dd, bc, 0r, 0u, 0v, 0w, dk, 0x, bo, dt, bt, dx, ac, cg, aj, cp, ap, 0a, 0b, as, at, cz, 0j, 0l, 0m, 0n, 0o]> : [{}]



The DAG : dag_AnnualGrassHerbicide1_dag_AnnualGrassHerbicide2_dag_HerbicideIntervention_dag_C3GrassHerbicide_dag_C3GrassTargetHerbicide1_dag_C3GrassTargetHerbicide2_dag_C4GrassHerbicide_dag_BroadleafHerbicide1_dag_BroadleafHerbicide2_dag_BroadleafTargetHerbicide1_dag_BroadleafTargetHerbicide2.txt : 
Product <[0a, 0b, as, 0u, 0v, 0w, 0x, 0l, 0m, 0n, 0o]> : [{}]
Application <[dd, bc, 0r, 0u, 0v, 0w, dk, 0x, bo, dt, bt, dx, ac, cg, aj, cp, ap, 0a, 0b, as, at, cz, 0j, 0l, 0m, 0n, 0o]> : [{}]



The DAG : dag_AnnualGrassHerbicide1_dag_AnnualGrassHerbicide2_dag_C3GrassHerbicide_dag_C3GrassTargetHerbicide1_dag_C3GrassTargetHerbicide2_dag_C4GrassHerbicide_dag_BroadleafHerbicide1_dag_BroadleafHerbicide2_dag_BroadleafTargetHerbicide1_dag_BroadleafTargetHerbicide2.txt : 
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Cover_Dec=[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ae, cg, af, ch, ag, aj, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
Input_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{Output_Seeds=[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Product <[0a, 0b, as, 0u, 0v, 0w, 0x, 0l, 0m, 0n, 0o]> : [{CBAR=[0a, 0b, 0u, 0v, 0w, 0x, 0l, 0m, 0n, 0o], SR=[0a, 0b, 0u, 0v, 0w, 0x, 0l, 0m, 0n, 0o]}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Cover_Dec <[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ad, ae, cg, af, ch, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{Output_Dead=[dd, bc, 0r, bd, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, bt, dx, dy, ac, ae, cg, af, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0l, 0m, 0n, 0o], Output_Cover=[dd, bc, 0r, dg, 0u, 0v, 0w, dk, 0x, dn, bo, dt, bt, dx, ac, ae, cg, af, ag, aj, cp, ap, 0a, 0b, cz, 0j, 0l, 0m, 0n, 0o]}]
Application <[dd, bc, 0r, 0u, 0v, 0w, dk, 0x, bo, dt, bt, dx, ac, cg, aj, cp, ap, 0a, 0b, as, at, cz, 0j, 0l, 0m, 0n, 0o]> : [{CBAR=[dd, bc, 0r, 0u, 0v, 0w, dk, 0x, bo, dt, bt, dx, ac, cg, aj, cp, ap, 0a, 0b, cz, 0j, 0l, 0m, 0n, 0o], SR=[dd, bc, 0r, 0u, 0v, 0w, dk, 0x, bo, dt, bt, dx, ac, cg, aj, cp, ap, 0a, 0b, cz, 0j, 0l, 0m, 0n, 0o]}]
Output_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
CBAR <[dd, bc, 0r, 0u, 0v, 0w, dk, 0x, bo, dt, bt, dx, ac, cg, aj, cp, ap, 0a, 0b, cz, 0j, 0l, 0m, 0n, 0o]> : [{}]
SR <[dd, bc, de, 0r, bd, df, 0s, 0u, 0v, dj, 0w, dk, 0x, dn, dp, bo, bp, dt, du, bt, bu, dx, dy, ac, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]



The DAG : dag_STHerbicideTarget_dag_NeedleHerbicideTarget_dag_BroadWeedsHerbicideTarget_dag_ExoticAnnualHerbicideTarget_dag_RuderHerbicideTarget_dag_ThemedaHerbicideTarget_dag_GrainHerbicideTarget_dag_OnionHerbicideTarget_dag_SensitNativeHerbicideTarget_dag_HardyNativeHerbicideTarget_dag_WallabyHerbicideTarget_dag_HerbicideIntervention_dag_RedLegHerbicideTarget_dag_HerbicideInterventionTarget_dag_WindmillHerbicideTarget_dag_SpearHerbicideTarget_dag_BlanketHerbicideTarget.txt : 
Target <[dd, bc, 0r, ac, cg, dk, aj, bo, cp, ap, dt, as, bt, at, dx, cz, 0j]> : [{}]
Application <[dd, bc, 0r, 0u, 0v, 0w, dk, 0x, bo, dt, bt, dx, ac, cg, aj, cp, ap, 0a, 0b, as, at, cz, 0j, 0l, 0m, 0n, 0o]> : [{}]



The DAG : dag_STHerbicideTarget_dag_NeedleHerbicideTarget_dag_BroadWeedsHerbicideTarget_dag_ExoticAnnualHerbicideTarget_dag_RuderHerbicideTarget_dag_ThemedaHerbicideTarget_dag_GrainHerbicideTarget_dag_OnionHerbicideTarget_dag_SensitNativeHerbicideTarget_dag_HardyNativeHerbicideTarget_dag_WallabyHerbicideTarget_dag_RedLegHerbicideTarget_dag_WindmillHerbicideTarget_dag_SpearHerbicideTarget_dag_BlanketHerbicideTarget.txt : 
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Cover_Dec=[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ae, cg, af, ch, ag, aj, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
Input_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{Output_Seeds=[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
Target <[dd, bc, 0r, ac, cg, dk, aj, bo, cp, ap, dt, as, bt, at, dx, cz, 0j]> : [{CBAR=[dd, bc, 0r, ac, cg, dk, aj, bo, cp, ap, dt, bt, dx, cz, 0j], SR=[dd, bc, 0r, ac, cg, dk, aj, bo, cp, ap, dt, bt, dx, cz, 0j]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Cover_Dec <[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ad, ae, cg, af, ch, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{Output_Dead=[dd, bc, 0r, bd, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, bt, dx, dy, ac, ae, cg, af, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0l, 0m, 0n, 0o], Output_Cover=[dd, bc, 0r, dg, 0u, 0v, 0w, dk, 0x, dn, bo, dt, bt, dx, ac, ae, cg, af, ag, aj, cp, ap, 0a, 0b, cz, 0j, 0l, 0m, 0n, 0o]}]
Application <[dd, bc, 0r, 0u, 0v, 0w, dk, 0x, bo, dt, bt, dx, ac, cg, aj, cp, ap, 0a, 0b, as, at, cz, 0j, 0l, 0m, 0n, 0o]> : [{CBAR=[dd, bc, 0r, 0u, 0v, 0w, dk, 0x, bo, dt, bt, dx, ac, cg, aj, cp, ap, 0a, 0b, cz, 0j, 0l, 0m, 0n, 0o], SR=[dd, bc, 0r, 0u, 0v, 0w, dk, 0x, bo, dt, bt, dx, ac, cg, aj, cp, ap, 0a, 0b, cz, 0j, 0l, 0m, 0n, 0o]}]
Output_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
CBAR <[dd, bc, 0r, 0u, 0v, 0w, dk, 0x, bo, dt, bt, dx, ac, cg, aj, cp, ap, 0a, 0b, cz, 0j, 0l, 0m, 0n, 0o]> : [{}]
SR <[dd, bc, de, 0r, bd, df, 0s, 0u, 0v, dj, 0w, dk, 0x, dn, dp, bo, bp, dt, du, bt, bu, dx, dy, ac, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]



The DAG : dag_STHerbicideTarget_dag_NeedleHerbicideTarget_dag_BroadWeedsHerbicideTarget_dag_C3GrassHerbicide_dag_C3GrassTargetHerbicide1_dag_C3GrassTargetHerbicide2_dag_ThemedaHerbicideTarget_dag_C4GrassHerbicide_dag_OnionHerbicideTarget_dag_WallabyHerbicideTarget_dag_RedLegHerbicideTarget_dag_WindmillHerbicideTarget_dag_ExoticAnnualHerbicideTarget_dag_RuderHerbicideTarget_dag_GrainHerbicideTarget_dag_SensitNativeHerbicideTarget_dag_HardyNativeHerbicideTarget_dag_AnnualGrassHerbicide1_dag_AnnualGrassHerbicide2_dag_SpearHerbicideTarget_dag_BlanketHerbicideTarget_dag_BroadleafHerbicide1_dag_BroadleafHerbicide2_dag_BroadleafTargetHerbicide1_dag_BroadleafTargetHerbicide2.txt : 
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Cover_Dec=[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ae, cg, af, ch, ag, aj, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
Input_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{Output_Seeds=[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Cover_Dec <[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ad, ae, cg, af, ch, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{Output_Dead=[dd, bc, 0r, bd, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, bt, dx, dy, ac, ae, cg, af, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0l, 0m, 0n, 0o], Output_Cover=[dd, bc, 0r, dg, 0u, 0v, 0w, dk, 0x, dn, bo, dt, bt, dx, ac, ae, cg, af, ag, aj, cp, ap, 0a, 0b, cz, 0j, 0l, 0m, 0n, 0o]}]
Application <[dd, bc, 0r, 0u, 0v, 0w, dk, 0x, bo, dt, bt, dx, ac, cg, aj, cp, ap, 0a, 0b, as, at, cz, 0j, 0l, 0m, 0n, 0o]> : [{CBAR=[dd, bc, 0r, 0u, 0v, 0w, dk, 0x, bo, dt, bt, dx, ac, cg, aj, cp, ap, 0a, 0b, cz, 0j, 0l, 0m, 0n, 0o], SR=[dd, bc, 0r, 0u, 0v, 0w, dk, 0x, bo, dt, bt, dx, ac, cg, aj, cp, ap, 0a, 0b, cz, 0j, 0l, 0m, 0n, 0o]}]
Output_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
CBAR <[dd, bc, 0r, 0u, 0v, 0w, dk, 0x, bo, dt, bt, dx, ac, cg, aj, cp, ap, 0a, 0b, cz, 0j, 0l, 0m, 0n, 0o]> : [{}]
SR <[dd, bc, de, 0r, bd, df, 0s, 0u, 0v, dj, 0w, dk, 0x, dn, dp, bo, bp, dt, du, bt, bu, dx, dy, ac, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]



The DAG : dag_STHerbicideTarget_dag_NeedleHerbicideTarget_dag_BroadWeedsHerbicideTarget_dag_TenaciousScarify1_dag_ThemedaGrazeCattle_dag_C3GrassHerbicide_dag_ThemedaGrazeSheep_dag_C3GrassTargetHerbicide1_dag_ThemedaHarvest_dag_C3GrassTargetHerbicide2_dag_ThemedaHerbicideTarget_dag_C4GrassHerbicide_dag_ThemedaNatural_dag_ThemedaPlant_dag_ThemedaScarify_dag_TolerantFire_dag_OnionHerbicideTarget_dag_WallabyHerbicideTarget_dag_RedLegHerbicideTarget_dag_RemoveTopSoil1_dag_WindmillHerbicideTarget_dag_RuderHerbicideTarget_dag_SensitNativeHerbicideTarget_dag_HardyNativeHerbicideTarget_dag_SpearHerbicideTarget_dag_BroadleafHerbicide1_dag_BroadleafHerbicide2_dag_BroadleafTargetHerbicide2.txt : 
Input_Seedlings <[dd, bc, 0r, df, dh, 0u, di, 0v, dj, 0w, dk, 0x, dl, dm, dn, dp, bo, dt, bt, bv, dx, cg, cp, ap, cz, 0l, 0m, 0o]> : [{}]
Output_Seedlings <[dd, bc, 0r, df, dh, 0u, di, 0v, dj, 0w, dk, 0x, dl, dm, dn, dp, bo, dt, bt, bv, dx, cg, cp, ap, cz, 0l, 0m, 0o]> : [{}]



The DAG : dag_STHerbicideTarget_dag_NeedleHerbicideTarget_dag_BroadWeedsHerbicideTarget_dag_TenaciousScarify1_dag_ThemedaGrazeCattle_dag_C3GrassHerbicide_dag_ThemedaGrazeSheep_dag_C3GrassTargetHerbicide1_dag_ThemedaHarvest_dag_C3GrassTargetHerbicide2_dag_ThemedaHerbicideTarget_dag_C4GrassHerbicide_dag_ThemedaPlant_dag_ThemedaScarify_dag_TolerantFire_dag_OnionHerbicideTarget_dag_WallabyHerbicideTarget_dag_RedLegHerbicideTarget_dag_RemoveTopSoil1_dag_WindmillHerbicideTarget_dag_RuderHerbicideTarget_dag_SensitNativeHerbicideTarget_dag_HardyNativeHerbicideTarget_dag_SpearHerbicideTarget_dag_BroadleafHerbicide1_dag_BroadleafHerbicide2_dag_BroadleafTargetHerbicide2.txt : 
Input_Seedlings <[dd, bc, 0r, df, dh, 0u, di, 0v, dj, 0w, dk, 0x, dl, dm, dn, dp, bo, dt, bt, bv, dx, cg, cp, ap, cz, 0l, 0m, 0o]> : [{Output_Seedlings=[dd, bc, 0r, df, dh, 0u, di, 0v, dj, 0w, dk, 0x, dm, dn, dp, bo, dt, bt, bv, dx, cg, cp, ap, cz, 0l, 0m, 0o]}]
Output_Seedlings <[dd, bc, 0r, df, dh, 0u, di, 0v, dj, 0w, dk, 0x, dl, dm, dn, dp, bo, dt, bt, bv, dx, cg, cp, ap, cz, 0l, 0m, 0o]> : [{}]



The DAG : dag_BroadWeedsGrazeCattle_dag_NeedleGrazeSheep_dag_BroadWeedsGrazeSheep_dag_ThemedaGrazeCattle_dag_ThemedaGrazeSheep_dag_NutrientGrazeCattle_dag_NutrientGrazeSheep_dag_OnionGrazeCattle_dag_OnionGrazeSheep_dag_WallabyGrazeCattle_dag_WallabyGrazeSheep_dag_RedLegGrazeCattle_dag_RedLegGrazeSheep_dag_WindmillGrazeCattle_dag_WindmillGrazeSheep_dag_ExoticAnnualGrazeCattle_dag_ExoticAnnualGrazeSheep_dag_RuderGrazeCattle_dag_RuderGrazeSheep_dag_GrainGrazeCattle_dag_GrainGrazeSheep_dag_GrazeInterventionCattle_dag_SensitNativeGrazeCattle_dag_GrazeInterventionSheep_dag_SensitNativeGrazeSheep_dag_HardyNativeGrazeCattle_dag_HardyNativeGrazeSheep_dag_BasalAdultCoverGraze_dag_SpearGrazeCattle_dag_SpearGrazeSheep_dag_BlanketGrazeCattle_dag_BlanketGrazeSheep_dag_STGrazeCattle_dag_NeedleGrazeCattle_dag_STGrazeSheep.txt : 
Duration <[0p, bb, 0q, dh, di, bh, bi, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, al, cn, am, co, an, ao, 0c, cx, cy, 0g, 0h, db, ba, dc]> : [{}]



The DAG : dag_BroadWeedsGrazeCattle_dag_NeedleGrazeSheep_dag_BroadWeedsGrazeSheep_dag_ThemedaGrazeCattle_dag_ThemedaGrazeSheep_dag_OnionGrazeCattle_dag_OnionGrazeSheep_dag_WallabyGrazeCattle_dag_WallabyGrazeSheep_dag_RedLegGrazeCattle_dag_RedLegGrazeSheep_dag_WindmillGrazeCattle_dag_WindmillGrazeSheep_dag_ExoticAnnualGrazeCattle_dag_ExoticAnnualGrazeSheep_dag_RuderGrazeCattle_dag_RuderGrazeSheep_dag_GrainGrazeCattle_dag_GrainGrazeSheep_dag_SensitNativeGrazeCattle_dag_SensitNativeGrazeSheep_dag_HardyNativeGrazeCattle_dag_HardyNativeGrazeSheep_dag_BasalAdultCoverGraze_dag_SpearGrazeCattle_dag_SpearGrazeSheep_dag_BlanketGrazeCattle_dag_BlanketGrazeSheep_dag_STGrazeCattle_dag_NeedleGrazeCattle_dag_STGrazeSheep.txt : 
DPal <[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, 0c, cx, cy, 0g, 0h, db, ba, dc]> : [{}]
Duration <[0p, bb, 0q, dh, di, bh, bi, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, al, cn, am, co, an, ao, 0c, cx, cy, 0g, 0h, db, ba, dc]> : [{}]
LPal <[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, 0c, cx, cy, 0g, 0h, db, ba, dc]> : [{}]



The DAG : dag_BroadWeedsGrazeCattle_dag_NeedleGrazeSheep_dag_BroadWeedsGrazeSheep_dag_ThemedaGrazeCattle_dag_ThemedaGrazeSheep_dag_OnionGrazeCattle_dag_OnionGrazeSheep_dag_WallabyGrazeCattle_dag_WallabyGrazeSheep_dag_RedLegGrazeCattle_dag_RedLegGrazeSheep_dag_WindmillGrazeCattle_dag_WindmillGrazeSheep_dag_ExoticAnnualGrazeCattle_dag_ExoticAnnualGrazeSheep_dag_RuderGrazeCattle_dag_RuderGrazeSheep_dag_GrainGrazeCattle_dag_GrainGrazeSheep_dag_SensitNativeGrazeCattle_dag_SensitNativeGrazeSheep_dag_HardyNativeGrazeCattle_dag_HardyNativeGrazeSheep_dag_SpearGrazeCattle_dag_SpearGrazeSheep_dag_BlanketGrazeCattle_dag_BlanketGrazeSheep_dag_STGrazeCattle_dag_NeedleGrazeCattle_dag_STGrazeSheep.txt : 
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
BACG_DR <[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, cx, cy, 0g, 0h, db, ba, dc]> : [{Output_Dead=[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, cx, cy, 0g, 0h, db, ba, dc]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{}]
DPal <[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, 0c, cx, cy, 0g, 0h, db, ba, dc]> : [{}]
Duration <[0p, bb, 0q, dh, di, bh, bi, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, al, cn, am, co, an, ao, 0c, cx, cy, 0g, 0h, db, ba, dc]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{LPal=[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, cx, cy, 0g, 0h, db, ba, dc]}]
LPal <[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, 0c, cx, cy, 0g, 0h, db, ba, dc]> : [{}]



The DAG : dag_BroadWeedsGrazeCattle_dag_NeedleGrazeSheep_dag_BroadWeedsGrazeSheep_dag_ThemedaGrazeCattle_dag_ThemedaGrazeSheep_dag_OnionGrazeCattle_dag_OnionGrazeSheep_dag_WallabyGrazeCattle_dag_WallabyGrazeSheep_dag_RedLegGrazeCattle_dag_RedLegGrazeSheep_dag_WindmillGrazeCattle_dag_WindmillGrazeSheep_dag_RuderGrazeCattle_dag_RuderGrazeSheep_dag_SensitNativeGrazeCattle_dag_SensitNativeGrazeSheep_dag_HardyNativeGrazeCattle_dag_HardyNativeGrazeSheep_dag_SpearGrazeCattle_dag_SpearGrazeSheep_dag_BlanketGrazeCattle_dag_BlanketGrazeSheep_dag_STGrazeCattle_dag_NeedleGrazeCattle_dag_STGrazeSheep.txt : 
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
BACG_DR <[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, cx, cy, 0g, 0h, db, ba, dc]> : [{Output_Dead=[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, cx, cy, 0g, 0h, db, ba, dc]}]
BACG_CR <[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, ce, cf, cn, co, an, ao, cx, cy, 0g, 0h, db, ba, dc]> : [{Output_Cover=[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, ce, cf, cn, co, an, ao, cx, cy, 0g, 0h, db, ba, dc]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{}]
DPal <[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, 0c, cx, cy, 0g, 0h, db, ba, dc]> : [{}]
Duration <[0p, bb, 0q, dh, di, bh, bi, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, al, cn, am, co, an, ao, 0c, cx, cy, 0g, 0h, db, ba, dc]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{LPal=[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, cx, cy, 0g, 0h, db, ba, dc]}]
LPal <[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, 0c, cx, cy, 0g, 0h, db, ba, dc]> : [{}]



The DAG : dag_BlanketGrazeCattle_dag_BlanketGrazeSheep.txt : 
Duration <[0p, bb, 0q, dh, di, bh, bi, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, al, cn, am, co, an, ao, 0c, cx, cy, 0g, 0h, db, ba, dc]> : [{}]
LPal <[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, 0c, cx, cy, 0g, 0h, db, ba, dc]> : [{}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
BACG_HAR <[0g, 0h]> : [{Output_Adults=[0g, 0h]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
BACG_DR <[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, cx, cy, 0g, 0h, db, ba, dc]> : [{Output_Dead=[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, cx, cy, 0g, 0h, db, ba, dc]}]
Output_Adults <[dg, by, bz, aa, cc, ab, ac, ad, ae, af, ah, ai, ck, aj, cl, ak, 0a, 0b, au, av, aw, 0g, 0h, 0i, 0j, 0k, 0n]> : [{}]
BACG_CR <[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, ce, cf, cn, co, an, ao, cx, cy, 0g, 0h, db, ba, dc]> : [{Output_Cover=[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, ce, cf, cn, co, an, ao, cx, cy, 0g, 0h, db, ba, dc]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{}]
DPal <[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, 0c, cx, cy, 0g, 0h, db, ba, dc]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{LPal=[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, cx, cy, 0g, 0h, db, ba, dc]}]
Input_Adults <[dg, by, bz, aa, cc, ab, ac, ad, ae, af, ah, ai, ck, aj, cl, ak, 0a, 0b, au, av, aw, 0g, 0h, 0i, 0j, 0k, 0n]> : [{Output_Adults=[dg, by, bz, aa, cc, ab, ac, ad, ae, af, ah, ai, ck, aj, cl, ak, 0a, 0b, au, av, aw, 0g, 0h, 0i, 0j, 0k, 0n]}]



The DAG : dag_BroadWeedsGrazeCattle_dag_BroadWeedsGrazeSheep_dag_RuderGrazeCattle_dag_RuderGrazeSheep_dag_SensitNativeGrazeCattle_dag_SensitNativeGrazeSheep.txt : 
Duration <[0p, bb, 0q, dh, di, bh, bi, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, al, cn, am, co, an, ao, 0c, cx, cy, 0g, 0h, db, ba, dc]> : [{}]
BACG_SBR <[0p, 0q, ce, cf, cn, co]> : [{Output_Basal=[0p, 0q, ce, cf, cn, co]}]
LPal <[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, 0c, cx, cy, 0g, 0h, db, ba, dc]> : [{}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
BACG_DR <[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, cx, cy, 0g, 0h, db, ba, dc]> : [{Output_Dead=[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, cx, cy, 0g, 0h, db, ba, dc]}]
BACG_CR <[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, ce, cf, cn, co, an, ao, cx, cy, 0g, 0h, db, ba, dc]> : [{Output_Cover=[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, ce, cf, cn, co, an, ao, cx, cy, 0g, 0h, db, ba, dc]}]
Input_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Basal=[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{}]
DPal <[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, 0c, cx, cy, 0g, 0h, db, ba, dc]> : [{}]
Output_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dj, dk, dq, dr, ds, dt, du, dv, dw, dx, an, ao, ap, aq, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, ce, cf, cg, ch, cn, co, cp, cx, cy, cz, db, dc]}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{LPal=[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, cx, cy, 0g, 0h, db, ba, dc]}]



The DAG : dag_NeedleGrazeSheep_dag_ThemedaGrazeCattle_dag_ThemedaGrazeSheep_dag_OnionGrazeCattle_dag_OnionGrazeSheep_dag_HardyNativeGrazeCattle_dag_HardyNativeGrazeSheep_dag_WallabyGrazeCattle_dag_WallabyGrazeSheep_dag_RedLegGrazeCattle_dag_RedLegGrazeSheep_dag_WindmillGrazeCattle_dag_WindmillGrazeSheep_dag_SpearGrazeCattle_dag_SpearGrazeSheep_dag_STGrazeCattle_dag_NeedleGrazeCattle_dag_STGrazeSheep.txt : 
Duration <[0p, bb, 0q, dh, di, bh, bi, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, al, cn, am, co, an, ao, 0c, cx, cy, 0g, 0h, db, ba, dc]> : [{}]
LPal <[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, 0c, cx, cy, 0g, 0h, db, ba, dc]> : [{}]
BACG_HBR <[bb, dh, di, bm, bn, an, ao, dr, ds, br, bs, dv, dw, cx, cy, db, ba, dc]> : [{Output_Basal=[bb, dh, di, bm, bn, an, ao, dr, ds, br, bs, dv, dw, cx, cy, db, ba, dc]}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
BACG_DR <[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, cx, cy, 0g, 0h, db, ba, dc]> : [{Output_Dead=[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, cx, cy, 0g, 0h, db, ba, dc]}]
BACG_CR <[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, ce, cf, cn, co, an, ao, cx, cy, 0g, 0h, db, ba, dc]> : [{Output_Cover=[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, ce, cf, cn, co, an, ao, cx, cy, 0g, 0h, db, ba, dc]}]
Input_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Basal=[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{}]
DPal <[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, 0c, cx, cy, 0g, 0h, db, ba, dc]> : [{}]
Output_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{LPal=[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, cx, cy, 0g, 0h, db, ba, dc]}]



The DAG : dag_ThemedaGrazeCattle_dag_ThemedaGrazeSheep.txt : 
Duration <[0p, bb, 0q, dh, di, bh, bi, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, al, cn, am, co, an, ao, 0c, cx, cy, 0g, 0h, db, ba, dc]> : [{}]
LPal <[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, 0c, cx, cy, 0g, 0h, db, ba, dc]> : [{}]
BACG_HBR <[bb, dh, di, bm, bn, an, ao, dr, ds, br, bs, dv, dw, cx, cy, db, ba, dc]> : [{Output_Basal=[bb, dh, di, bm, bn, an, ao, dr, ds, br, bs, dv, dw, cx, cy, db, ba, dc]}]
Input_Seedlings <[dd, bc, 0r, df, dh, 0u, di, 0v, dj, 0w, dk, 0x, dl, dm, dn, dp, bo, dt, bt, bv, dx, cg, cp, ap, cz, 0l, 0m, 0o]> : [{Output_Seedlings=[dd, bc, 0r, df, dh, 0u, di, 0v, dj, 0w, dk, 0x, dm, dn, dp, bo, dt, bt, bv, dx, cg, cp, ap, cz, 0l, 0m, 0o]}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
BACG_DR <[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, cx, cy, 0g, 0h, db, ba, dc]> : [{Output_Dead=[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, cx, cy, 0g, 0h, db, ba, dc]}]
BACG_CR <[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, ce, cf, cn, co, an, ao, cx, cy, 0g, 0h, db, ba, dc]> : [{Output_Cover=[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, ce, cf, cn, co, an, ao, cx, cy, 0g, 0h, db, ba, dc], Output_Seedlings=[dh, di]}]
Input_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Basal=[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{DPal=[dh, di], LPal=[dh, di]}]
DPal <[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, 0c, cx, cy, 0g, 0h, db, ba, dc]> : [{}]
Output_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{LPal=[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, cx, cy, 0g, 0h, db, ba, dc]}]
Output_Seedlings <[dd, bc, 0r, df, dh, 0u, di, 0v, dj, 0w, dk, 0x, dl, dm, dn, dp, bo, dt, bt, bv, dx, cg, cp, ap, cz, 0l, 0m, 0o]> : [{}]



The DAG : dag_STHerbicideTarget_dag_NeedleHerbicideTarget_dag_STNatural_dag_BroadWeedsHerbicideTarget_dag_NeedleNatural_dag_BroadWeedsNatural_dag_C3GrassHerbicide_dag_C3GrassTargetHerbicide1_dag_C3GrassTargetHerbicide2_dag_ThemedaHerbicideTarget_dag_C4GrassHerbicide_dag_ThemedaNatural_dag_ThemedaScarify_dag_ThemedaSow_dag_OnionHerbicideTarget_dag_OnionNatural_dag_WallabyHerbicideTarget_dag_WallabyNatural_dag_RedLegHerbicideTarget_dag_RedLegNatural_dag_RemoveTopSoil1_dag_WindmillHerbicideTarget_dag_RemoveTopSoil2_dag_WindmillNatural_dag_RemoveTopSoil3_dag_RemoveTopSoil4_dag_RemoveTopSoil5_dag_RemoveTopSoil7_dag_RemoveTopSoil8_dag_ExoticAnnualHerbicideTarget_dag_ExoticAnnualNatural_dag_RuderHerbicideTarget_dag_GrainHerbicideTarget_dag_GrainNatural_dag_SensitNativeHerbicideTarget_dag_HardyNativeHerbicideTarget_dag_HardyNativeNatural_dag_AnnualGrassHerbicide1_dag_AnnualGrassHerbicide2_dag_SpearHerbicideTarget_dag_BlanketHerbicideTarget_dag_BlanketNatural_dag_BroadleafHerbicide1_dag_BroadleafHerbicide2_dag_SpearNatural_dag_BroadleafTargetHerbicide1_dag_BroadleafTargetHerbicide2.txt : 
Input_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
Output_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]



The DAG : dag_STHerbicideTarget_dag_NeedleHerbicideTarget_dag_STNatural_dag_BroadWeedsHerbicideTarget_dag_NeedleNatural_dag_BroadWeedsNatural_dag_C3GrassHerbicide_dag_C3GrassTargetHerbicide1_dag_C3GrassTargetHerbicide2_dag_ThemedaHerbicideTarget_dag_C4GrassHerbicide_dag_ThemedaNatural_dag_ThemedaScarify_dag_ThemedaSow_dag_OnionHerbicideTarget_dag_OnionNatural_dag_WallabyHerbicideTarget_dag_WallabyNatural_dag_RedLegHerbicideTarget_dag_RedLegNatural_dag_RemoveTopSoil1_dag_WindmillHerbicideTarget_dag_RemoveTopSoil2_dag_WindmillNatural_dag_RemoveTopSoil3_dag_RemoveTopSoil4_dag_RemoveTopSoil5_dag_RemoveTopSoil7_dag_RemoveTopSoil8_dag_ExoticAnnualHerbicideTarget_dag_ExoticAnnualNatural_dag_RuderHerbicideTarget_dag_GrainHerbicideTarget_dag_SensitNativeHerbicideTarget_dag_HardyNativeHerbicideTarget_dag_HardyNativeNatural_dag_AnnualGrassHerbicide1_dag_AnnualGrassHerbicide2_dag_SpearHerbicideTarget_dag_BlanketHerbicideTarget_dag_BlanketNatural_dag_BroadleafHerbicide1_dag_BroadleafHerbicide2_dag_SpearNatural_dag_BroadleafTargetHerbicide1_dag_BroadleafTargetHerbicide2.txt : 
Input_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{Output_Seeds=[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
Output_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]



The DAG : dag_STNatural_dag_ThemedaGrazeCattle_dag_ThemedaGrazeSheep_dag_ThemedaNatural_dag_WallabyGrazeCattle_dag_WallabyGrazeSheep_dag_WallabyNatural_dag_WindmillGrazeCattle_dag_WindmillGrazeSheep_dag_WindmillNatural_dag_ExoticAnnualGrazeCattle_dag_ExoticAnnualGrazeSheep_dag_ExoticAnnualNatural_dag_GrainGrazeCattle_dag_GrainGrazeSheep_dag_GrainNatural_dag_HardyNativeGrazeCattle_dag_HardyNativeGrazeSheep_dag_HardyNativeNatural_dag_BasalCoverGrowthDeath_dag_BiomassSummaries_dag_BlanketGrazeCattle_dag_BlanketGrazeSheep_dag_BlanketNatural_dag_NeedleGrazeCattle_dag_BroadWeedsGrazeCattle_dag_NeedleGrazeSheep_dag_BroadWeedsGrazeSheep_dag_NeedleNatural_dag_BroadWeedsNatural_dag_BurnIntervention_dag_OnionGrazeCattle_dag_OnionGrazeSheep_dag_OnionNatural_dag_RedLegGrazeCattle_dag_RedLegGrazeSheep_dag_RedLegNatural_dag_RuderGrazeCattle_dag_RuderGrazeSheep_dag_RuderNatural_dag_SensitNativeGrazeCattle_dag_SensitNativeGrazeSheep_dag_SensitNativeNatural_dag_SoilNatural_dag_SowIntervention_dag_SpearGrazeCattle_dag_SpearGrazeSheep_dag_SpearNatural_dag_STGrazeCattle_dag_STGrazeSheep.txt : 
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{}]



The DAG : dag_BasalCoverGrowthDeath_dag_ThemedaNatural.txt : 
CCond <[0d, dl]> : [{}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{}]



The DAG : dag_BasalCoverGrowthDeath.txt : 
C4PLBGR <[0d]> : [{}]
C3PSCDR <[0d]> : [{}]
C4PLCGR <[0d]> : [{}]
C4PMBDR <[0d]> : [{}]
C3PSBDR <[0d]> : [{C3PSBCR=[0d]}]
C4PMCDR <[0d]> : [{}]
C4PLBCR <[0d]> : [{}]
C4PLCCR <[0d]> : [{}]
C3PHBCH <[0d]> : [{}]
C3PMBCR <[0d]> : [{}]
C4PSCGR <[0d]> : [{}]
C3PMCCR <[0d]> : [{}]
C4PSBGR <[0d]> : [{}]
C3PMBGR <[0d]> : [{C3PMBCR=[0d]}]
C4PSCCR <[0d]> : [{}]
C3PMCGR <[0d]> : [{C3PMCCR=[0d]}]
CCond <[0d, dl]> : [{C3PSCDR=[0d], C4PLBGR=[0d], C4PLCGR=[0d], C4PMBDR=[0d], C3PSBDR=[0d], C4PMCDR=[0d], C4PSCGR=[0d], C4PSBGR=[0d], C3PMBGR=[0d], C3PMCGR=[0d], C3PLCDR=[0d], C4PMBGR=[0d], C3PLBDR=[0d], C3PHCDR=[0d], C3PHBDR=[0d], C3PCGR=[0d], C4PMCGR=[0d], C4PLBDR=[0d], C3PSBGR=[0d], C4PLCDR=[0d], C3PSCGR=[0d], C3PMCDR=[0d], C3PLCGR=[0d], C3PLBGR=[0d], C3PHBGR=[0d], C4PSCDR=[0d], C4PSBDR=[0d], C3PMBDR=[0d]}]
C4PSBCR <[0d]> : [{}]
C3PLCDR <[0d]> : [{}]
C3PLBDR <[0d]> : [{}]
C4PMBGR <[0d]> : [{}]
C3PHCDR <[0d]> : [{}]
C3PHBDR <[0d]> : [{}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{C3PSCDR=[0d], C4PLBGR=[0d], C4PLCGR=[0d], C4PMBDR=[0d], C3PSBDR=[0d], C4PMCDR=[0d], C4PSCGR=[0d], C4PSBGR=[0d], C3PMBGR=[0d], C3PMCGR=[0d], C3PLCDR=[0d], C4PMBGR=[0d], C3PLBDR=[0d], C3PHCDR=[0d], C3PHBDR=[0d], C3PCGR=[0d], C4PMCGR=[0d], C4PLBDR=[0d], C4PLCDR=[0d], C3PSBGR=[0d], C3PSCGR=[0d], C3PMCDR=[0d], C3PLCGR=[0d], C3PLBGR=[0d], C3PHBGR=[0d], C4PSCDR=[0d], C4PSBDR=[0d], C3PMBDR=[0d]}]
DDRM <[0d]> : [{}]
DDRL <[0d]> : [{}]
C3PCGR <[0d]> : [{}]
C4PMCGR <[0d]> : [{}]
C3PSBCR <[0d]> : [{}]
DDRH <[0d]> : [{}]
C3PSCCR <[0d]> : [{}]
C4PLBDR <[0d]> : [{}]
C4PMBCR <[0d]> : [{}]
C3PSBGR <[0d]> : [{}]
C4PMCCR <[0d]> : [{}]
C4PLCDR <[0d]> : [{}]
C3PSCGR <[0d]> : [{}]
C3PMCDR <[0d]> : [{C3PMCCR=[0d]}]
C3PLCGR <[0d]> : [{}]
C3PHCCH <[0d]> : [{}]
C3PLBGR <[0d]> : [{}]
C3PHBGR <[0d]> : [{}]
C3PLCCR <[0d]> : [{}]
C4PSCDR <[0d]> : [{}]
C3PLBCR <[0d]> : [{}]
C4PSBDR <[0d]> : [{}]
C3PMBDR <[0d]> : [{C3PMBCR=[0d]}]



The DAG : dag_ThemedaNatural.txt : 
CompSum <[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, 0e, dy, 0k, da]> : [{CSumIndex=[de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
SoilTemperature <[ct, dl, cm]> : [{GP=[dl], SP=[dl]}]
BCGD_C4PLCDR <[dl]> : [{Cover_Dec=[dl]}]
DP <[dl]> : [{Seed_Dec=[dl]}]
Cover_Dec <[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ad, ae, cg, af, ch, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{Output_Dead=[dd, bc, 0r, bd, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, bt, dx, dy, ac, ae, cg, af, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0l, 0m, 0n, 0o]}]
Output_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]
Seed_Inc <[dl]> : [{Output_Seeds=[dl]}]
Shade <[ct, dl, cm]> : [{SP=[dl]}]
Input_Seedlings <[dd, bc, 0r, df, dh, 0u, di, 0v, dj, 0w, dk, 0x, dl, dm, dn, dp, bo, dt, bt, bv, dx, cg, cp, ap, cz, 0l, 0m, 0o]> : [{New_Adults=[dl]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Basal=[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc], Seed_Inc=[dl]}]
SPR <[dl]> : [{}]
CCond <[0d, dl]> : [{}]
SI <[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da]> : [{Output_Basal=[aq, bd, ch, dy, dl, bp]}]
Soil_Friability <[ax, dl]> : [{GP=[dl]}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Dead_Dec=[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{SPR=[dl], SI=[de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da], GP=[dl]}]
SP <[aq, de, du, bd, 0s, ad, bu, dy, dl, 0k, da, bp]> : [{}]
Cover_Inc <[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{Output_NUI=[aq, du, 0s, dl, ak, 0k, cq]}]
Input_Seeds <[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{Germ_Seeds=[dl], Seed_Dec=[dl], Output_Seeds=[dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
New_Adults <[de, bd, 0s, ad, dl, ak, bp, aq, du, bu, dy, 0k, da]> : [{Output_Basal=[aq, de, du, dy, dl, bp]}]
BCGD_C4PLBCR <[dl]> : [{Output_Basal=[dl]}]
GP <[dl]> : [{Germ_Seeds=[dl]}]
Seed_Dec <[dl]> : [{}]
BCGD_C4PLCGR <[dl]> : [{Cover_Inc=[dl]}]
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]
BCGD_DDRM <[du, bu, dy, dl, 0k]> : [{Dead_Dec=[du, bu, dy, dl, 0k]}]
BCGD_C4PLCCR <[dl]> : [{Output_Cover=[dl]}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Cover_Inc=[aq, du, bd, 0s, bu, ch, dy, dl, 0k, da, bp, cq], Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Cover_Dec=[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ae, cg, af, ch, ag, aj, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
Germ_Seeds <[dl]> : [{Seed_Dec=[dl]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{CCond=[dl]}]
Output_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
SoilMoisture <[ct, dl, cm]> : [{GP=[dl], SP=[dl]}]
Output_Seedlings <[dd, bc, 0r, df, dh, 0u, di, 0v, dj, 0w, dk, 0x, dl, dm, dn, dp, bo, dt, bt, bv, dx, cg, cp, ap, cz, 0l, 0m, 0o]> : [{}]
NL <[de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]> : [{CCond=[dl]}]
Dead_Dec <[bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]> : [{}]



The DAG : dag_BroadWeedsGrazeCattle_dag_NeedleGrazeSheep_dag_BroadWeedsGrazeSheep_dag_STNatural_dag_NeedleNatural_dag_BroadWeedsNatural_dag_ThemedaGrazeCattle_dag_ThemedaGrazeSheep_dag_ThemedaNatural_dag_OnionGrazeCattle_dag_OnionGrazeSheep_dag_OnionNatural_dag_WallabyGrazeCattle_dag_WallabyGrazeSheep_dag_RedLegGrazeCattle_dag_RedLegGrazeSheep_dag_WallabyNatural_dag_WindmillGrazeCattle_dag_RedLegNatural_dag_WindmillGrazeSheep_dag_WindmillNatural_dag_ExoticAnnualGrazeCattle_dag_ExoticAnnualGrazeSheep_dag_RuderGrazeCattle_dag_ExoticAnnualNatural_dag_RuderGrazeSheep_dag_RuderNatural_dag_GrainGrazeCattle_dag_GrainGrazeSheep_dag_GrainNatural_dag_SensitNativeGrazeCattle_dag_SensitNativeGrazeSheep_dag_HardyNativeGrazeCattle_dag_HardyNativeGrazeSheep_dag_SensitNativeNatural_dag_HardyNativeNatural_dag_SpearGrazeCattle_dag_SpearGrazeSheep_dag_BlanketGrazeCattle_dag_BlanketGrazeSheep_dag_BlanketNatural_dag_SpearNatural_dag_STGrazeCattle_dag_NeedleGrazeCattle_dag_STGrazeSheep.txt : 
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{}]



The DAG : dag_STHerbicideTarget_dag_STNatural_dag_TenaciousScarify1_dag_ThemedaGrazeCattle_dag_ThemedaGrazeSheep_dag_ThemedaHarvest_dag_ThemedaHerbicideTarget_dag_ThemedaNatural_dag_ThemedaScarify_dag_TolerantFire_dag_TolerantHarvest_dag_WallabyGrazeCattle_dag_WallabyGrazeSheep_dag_WallabyHerbicideTarget_dag_WallabyNatural_dag_WindmillGrazeCattle_dag_WindmillGrazeSheep_dag_WindmillHerbicideTarget_dag_WindmillNatural_dag_FragileScarify3_dag_HardyNativeGrazeCattle_dag_HardyNativeGrazeSheep_dag_HardyNativeHerbicideTarget_dag_HardyNativeNatural_dag_ModerateFire_dag_ModerateHarvest_dag_BroadleafHerbicide1_dag_BroadleafHerbicide2_dag_BroadleafTargetHerbicide2_dag_NeedleGrazeCattle_dag_BroadWeedsGrazeCattle_dag_NeedleGrazeSheep_dag_BroadWeedsGrazeSheep_dag_NeedleHerbicideTarget_dag_BroadWeedsHerbicideTarget_dag_NeedleNatural_dag_BroadWeedsNatural_dag_C3GrassHerbicide_dag_C3GrassTargetHerbicide1_dag_C3GrassTargetHerbicide2_dag_C4GrassHerbicide_dag_OnionGrazeCattle_dag_OnionGrazeSheep_dag_OnionHerbicideTarget_dag_OnionNatural_dag_RedLegGrazeCattle_dag_RedLegGrazeSheep_dag_RedLegHerbicideTarget_dag_RedLegNatural_dag_RemoveTopSoil1_dag_RemoveTopSoil2_dag_RemoveTopSoil3_dag_RemoveTopSoil6_dag_RemoveTopSoil7_dag_RuderGrazeCattle_dag_RuderGrazeSheep_dag_RuderHerbicideTarget_dag_RuderNatural_dag_SensitiveFire_dag_SensitiveNativeSow_dag_SensitNativeGrazeCattle_dag_SensitNativeGrazeSheep_dag_SensitNativeHerbicideTarget_dag_SensitNativeNatural_dag_SpearGrazeCattle_dag_SpearGrazeSheep_dag_SpearHerbicideTarget_dag_SpearNatural_dag_STGrazeCattle_dag_STGrazeSheep.txt : 
Input_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Basal=[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]



The DAG : dag_STHerbicideTarget_dag_STNatural_dag_TenaciousScarify1_dag_ThemedaHarvest_dag_ThemedaHerbicideTarget_dag_TolerantHarvest_dag_WallabyGrazeCattle_dag_WallabyGrazeSheep_dag_WallabyHerbicideTarget_dag_WallabyNatural_dag_WindmillGrazeCattle_dag_WindmillGrazeSheep_dag_WindmillHerbicideTarget_dag_HardyNativeGrazeCattle_dag_HardyNativeGrazeSheep_dag_HardyNativeHerbicideTarget_dag_HardyNativeNatural_dag_BroadleafHerbicide1_dag_BroadleafHerbicide2_dag_BroadleafTargetHerbicide2_dag_NeedleGrazeCattle_dag_BroadWeedsGrazeCattle_dag_NeedleGrazeSheep_dag_BroadWeedsGrazeSheep_dag_NeedleHerbicideTarget_dag_BroadWeedsHerbicideTarget_dag_C3GrassHerbicide_dag_C3GrassTargetHerbicide1_dag_C3GrassTargetHerbicide2_dag_C4GrassHerbicide_dag_OnionGrazeCattle_dag_OnionGrazeSheep_dag_OnionHerbicideTarget_dag_OnionNatural_dag_RedLegGrazeCattle_dag_RedLegGrazeSheep_dag_RedLegHerbicideTarget_dag_RuderGrazeCattle_dag_RuderGrazeSheep_dag_RuderHerbicideTarget_dag_RuderNatural_dag_SensitNativeGrazeCattle_dag_SensitNativeGrazeSheep_dag_SensitNativeHerbicideTarget_dag_SpearGrazeCattle_dag_SpearGrazeSheep_dag_SpearHerbicideTarget_dag_STGrazeCattle_dag_STGrazeSheep.txt : 
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Basal=[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Basal <[dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dj, dk, dq, dr, ds, dt, du, dv, dw, dx, an, ao, ap, aq, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, ce, cf, cg, ch, cn, co, cp, cx, cy, cz, db, dc]}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]



The DAG : dag_STHerbicideTarget_dag_STNatural_dag_TenaciousScarify1_dag_TenaciousScarify2_dag_ThemedaGrazeCattle_dag_ThemedaGrazeSheep_dag_ThemedaHarvest_dag_ThemedaHerbicideTarget_dag_ThemedaNatural_dag_ThemedaScarify_dag_TolerantFire_dag_TolerantHarvest_dag_WallabyGrazeCattle_dag_WallabyGrazeSheep_dag_WallabyHerbicideTarget_dag_WallabyNatural_dag_WindmillGrazeCattle_dag_WindmillGrazeSheep_dag_WindmillHerbicideTarget_dag_WindmillNatural_dag_ExoticAnnualGrazeCattle_dag_ExoticAnnualGrazeSheep_dag_ExoticAnnualHerbicideTarget_dag_ExoticAnnualNatural_dag_FragileScarify1_dag_FragileScarify2_dag_FragileScarify3_dag_GrainGrazeCattle_dag_GrainGrazeSheep_dag_GrainHerbicideTarget_dag_GrainNatural_dag_HardyNativeGrazeCattle_dag_HardyNativeGrazeSheep_dag_HardyNativeHerbicideTarget_dag_HardyNativeNatural_dag_AnnualGrassHerbicide1_dag_AnnualGrassHerbicide2_dag_KilledFire1_dag_KilledFire2_dag_KilledFire3_dag_BlanketGrazeCattle_dag_BlanketGrazeSheep_dag_ModerateFire_dag_BlanketHarvest_dag_ModerateHarvest_dag_BlanketHerbicideTarget_dag_BlanketNatural_dag_BroadleafHerbicide1_dag_BroadleafHerbicide2_dag_BroadleafTargetHerbicide1_dag_BroadleafTargetHerbicide2_dag_NeedleGrazeCattle_dag_BroadWeedsGrazeCattle_dag_NeedleGrazeSheep_dag_BroadWeedsGrazeSheep_dag_NeedleHerbicideTarget_dag_BroadWeedsHerbicideTarget_dag_NeedleNatural_dag_BroadWeedsNatural_dag_C3GrassHerbicide_dag_C3GrassTargetHerbicide1_dag_C3GrassTargetHerbicide2_dag_C4GrassHerbicide_dag_OnionGrazeCattle_dag_OnionGrazeSheep_dag_OnionHerbicideTarget_dag_OnionNatural_dag_RedLegGrazeCattle_dag_RedLegGrazeSheep_dag_RedLegHerbicideTarget_dag_RedLegNatural_dag_RemoveTopSoil1_dag_RemoveTopSoil2_dag_RemoveTopSoil3_dag_RemoveTopSoil4_dag_RemoveTopSoil5_dag_RemoveTopSoil6_dag_RemoveTopSoil7_dag_RemoveTopSoil8_dag_RuderGrazeCattle_dag_RuderGrazeSheep_dag_RuderHerbicideTarget_dag_RuderNatural_dag_SensitiveFire_dag_SensitiveHarvest_dag_SensitiveHarvest2_dag_SensitNativeGrazeCattle_dag_SensitNativeGrazeSheep_dag_SensitNativeHerbicideTarget_dag_SensitNativeNatural_dag_SpearGrazeCattle_dag_SpearGrazeSheep_dag_SpearHerbicideTarget_dag_SpearNatural_dag_STGrazeCattle_dag_STGrazeSheep.txt : 
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]



The DAG : dag_STNatural_dag_NeedleNatural_dag_BroadWeedsNatural_dag_ExoticAnnualNatural_dag_RuderNatural_dag_SensitiveFire_dag_ThemedaNatural_dag_GrainNatural_dag_TolerantFire_dag_OnionNatural_dag_SensitNativeNatural_dag_HardyNativeNatural_dag_WallabyNatural_dag_RedLegNatural_dag_KilledFire1_dag_KilledFire2_dag_WindmillNatural_dag_KilledFire3_dag_ModerateFire_dag_BlanketNatural_dag_SpearNatural.txt : 
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]



The DAG : dag_STNatural_dag_NeedleNatural_dag_BroadWeedsNatural_dag_ExoticAnnualNatural_dag_RuderNatural_dag_SensitiveFire_dag_GrainNatural_dag_TolerantFire_dag_OnionNatural_dag_SensitNativeNatural_dag_HardyNativeNatural_dag_WallabyNatural_dag_RedLegNatural_dag_KilledFire1_dag_KilledFire2_dag_WindmillNatural_dag_KilledFire3_dag_ModerateFire_dag_BlanketNatural_dag_SpearNatural.txt : 
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
NH <[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{Output_NUI=[de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_NUI <[de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]> : [{}]



The DAG : dag_TenaciousScarify2_dag_RemoveTopSoil4_dag_RemoveTopSoil5_dag_ExoticAnnualGrazeCattle_dag_RemoveTopSoil8_dag_ExoticAnnualGrazeSheep_dag_ExoticAnnualHerbicideTarget_dag_ExoticAnnualNatural_dag_FragileScarify1_dag_FragileScarify2_dag_GrainGrazeCattle_dag_GrainGrazeSheep_dag_SensitiveHarvest_dag_GrainHerbicideTarget_dag_SensitiveHarvest2_dag_GrainNatural_dag_AnnualGrassHerbicide1_dag_AnnualGrassHerbicide2_dag_KilledFire1_dag_KilledFire2_dag_KilledFire3_dag_BlanketGrazeCattle_dag_BlanketGrazeSheep_dag_BlanketHarvest_dag_BlanketHerbicideTarget_dag_BlanketNatural_dag_BroadleafTargetHerbicide1.txt : 
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Adults <[dg, by, bz, aa, cc, ab, ac, ad, ae, af, ah, ai, ck, aj, cl, ak, 0a, 0b, au, av, aw, 0g, 0h, 0i, 0j, 0k, 0n]> : [{}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Input_Adults <[dg, by, bz, aa, cc, ab, ac, ad, ae, af, ah, ai, ck, aj, cl, ak, 0a, 0b, au, av, aw, 0g, 0h, 0i, 0j, 0k, 0n]> : [{Output_Adults=[dg, by, bz, aa, cc, ab, ac, ad, ae, af, ah, ai, ck, aj, cl, ak, 0a, 0b, au, av, aw, 0g, 0h, 0i, 0j, 0k, 0n]}]



The DAG : dag_ExoticAnnualGrazeCattle_dag_ExoticAnnualGrazeSheep_dag_GrainGrazeCattle_dag_GrainGrazeSheep.txt : 
BACG_SAR <[aa, ab, ah, ai]> : [{Output_Adults=[aa, ab, ah, ai]}]
Duration <[0p, bb, 0q, dh, di, bh, bi, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, al, cn, am, co, an, ao, 0c, cx, cy, 0g, 0h, db, ba, dc]> : [{}]
LPal <[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, 0c, cx, cy, 0g, 0h, db, ba, dc]> : [{}]
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
BACG_DR <[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, cx, cy, 0g, 0h, db, ba, dc]> : [{Output_Dead=[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, cx, cy, 0g, 0h, db, ba, dc]}]
Output_Adults <[dg, by, bz, aa, cc, ab, ac, ad, ae, af, ah, ai, ck, aj, cl, ak, 0a, 0b, au, av, aw, 0g, 0h, 0i, 0j, 0k, 0n]> : [{}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
CSumIndex <[0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]> : [{}]
DPal <[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, 0c, cx, cy, 0g, 0h, db, ba, dc]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Season <[de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]> : [{LPal=[0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, cx, cy, 0g, 0h, db, ba, dc]}]
Input_Adults <[dg, by, bz, aa, cc, ab, ac, ad, ae, af, ah, ai, ck, aj, cl, ak, 0a, 0b, au, av, aw, 0g, 0h, 0i, 0j, 0k, 0n]> : [{Output_Adults=[dg, by, bz, aa, cc, ab, ac, ad, ae, af, ah, ai, ck, aj, cl, ak, 0a, 0b, au, av, aw, 0g, 0h, 0i, 0j, 0k, 0n]}]



The DAG : dag_ExoticAnnualHerbicideTarget_dag_TenaciousScarify2_dag_FragileScarify1_dag_FragileScarify2_dag_SensitiveHarvest_dag_GrainHerbicideTarget_dag_GrainNatural_dag_AnnualGrassHerbicide1_dag_AnnualGrassHerbicide2_dag_KilledFire1_dag_KilledFire2_dag_BlanketHarvest_dag_BlanketNatural.txt : 
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Adults <[dg, by, bz, aa, cc, ab, ac, ad, ae, af, ah, ai, ck, aj, cl, ak, 0a, 0b, au, av, aw, 0g, 0h, 0i, 0j, 0k, 0n]> : [{Output_Cover=[ac, dg, ae, af, ck, aj, ak, 0a, 0b, au, av, 0i, 0k]}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Input_Adults <[dg, by, bz, aa, cc, ab, ac, ad, ae, af, ah, ai, ck, aj, cl, ak, 0a, 0b, au, av, aw, 0g, 0h, 0i, 0j, 0k, 0n]> : [{Output_Adults=[dg, by, bz, aa, cc, ab, ac, ad, ae, af, ah, ai, ck, aj, cl, ak, 0a, 0b, au, av, aw, 0g, 0h, 0i, 0j, 0k, 0n]}]



The DAG : dag_STHerbicideTarget_dag_NeedleHerbicideTarget_dag_BroadWeedsHerbicideTarget_dag_NeedleNatural_dag_TenaciousScarify1_dag_BroadWeedsNatural_dag_TenaciousScarify2_dag_C3GrassHerbicide_dag_C3GrassTargetHerbicide1_dag_C3GrassTargetHerbicide2_dag_ThemedaHerbicideTarget_dag_C4GrassHerbicide_dag_ThemedaNatural_dag_ThemedaScarify_dag_OnionHerbicideTarget_dag_OnionNatural_dag_WallabyHerbicideTarget_dag_WallabyNatural_dag_RedLegHerbicideTarget_dag_RedLegNatural_dag_WindmillHerbicideTarget_dag_WindmillNatural_dag_ExoticAnnualHerbicideTarget_dag_ExoticAnnualNatural_dag_FragileScarify1_dag_RuderHerbicideTarget_dag_FragileScarify2_dag_RuderNatural_dag_FragileScarify3_dag_GrainHerbicideTarget_dag_GrainNatural_dag_SensitNativeHerbicideTarget_dag_SensitNativeNatural_dag_HardyNativeHerbicideTarget_dag_HardyNativeNatural_dag_AnnualGrassHerbicide1_dag_AnnualGrassHerbicide2_dag_SpearHerbicideTarget_dag_BlanketHerbicideTarget_dag_BlanketNatural_dag_BroadleafHerbicide1_dag_BroadleafHerbicide2_dag_SpearNatural_dag_BroadleafTargetHerbicide1_dag_BroadleafTargetHerbicide2.txt : 
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Cover_Dec <[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ad, ae, cg, af, ch, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]



The DAG : dag_STHerbicideTarget_dag_NeedleHerbicideTarget_dag_BroadWeedsHerbicideTarget_dag_NeedleNatural_dag_TenaciousScarify2_dag_C3GrassHerbicide_dag_C3GrassTargetHerbicide1_dag_C3GrassTargetHerbicide2_dag_ThemedaHerbicideTarget_dag_C4GrassHerbicide_dag_ThemedaNatural_dag_ThemedaScarify_dag_OnionHerbicideTarget_dag_OnionNatural_dag_WallabyHerbicideTarget_dag_RedLegHerbicideTarget_dag_WindmillHerbicideTarget_dag_WindmillNatural_dag_ExoticAnnualHerbicideTarget_dag_FragileScarify1_dag_RuderHerbicideTarget_dag_FragileScarify2_dag_FragileScarify3_dag_GrainHerbicideTarget_dag_GrainNatural_dag_SensitNativeHerbicideTarget_dag_SensitNativeNatural_dag_HardyNativeHerbicideTarget_dag_HardyNativeNatural_dag_AnnualGrassHerbicide1_dag_AnnualGrassHerbicide2_dag_SpearHerbicideTarget_dag_BlanketHerbicideTarget_dag_BroadleafHerbicide1_dag_BroadleafHerbicide2_dag_BroadleafTargetHerbicide1_dag_BroadleafTargetHerbicide2.txt : 
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Cover_Dec <[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ad, ae, cg, af, ch, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{Output_Dead=[dd, bc, 0r, bd, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, bt, dx, dy, ac, ae, cg, af, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0l, 0m, 0n, 0o]}]



The DAG : dag_STHerbicideTarget_dag_NeedleHerbicideTarget_dag_BroadWeedsHerbicideTarget_dag_TenaciousScarify2_dag_C3GrassHerbicide_dag_C3GrassTargetHerbicide1_dag_C3GrassTargetHerbicide2_dag_ThemedaHerbicideTarget_dag_C4GrassHerbicide_dag_ThemedaScarify_dag_OnionHerbicideTarget_dag_WallabyHerbicideTarget_dag_RedLegHerbicideTarget_dag_WindmillHerbicideTarget_dag_ExoticAnnualHerbicideTarget_dag_FragileScarify1_dag_RuderHerbicideTarget_dag_FragileScarify2_dag_FragileScarify3_dag_GrainHerbicideTarget_dag_SensitNativeHerbicideTarget_dag_HardyNativeHerbicideTarget_dag_AnnualGrassHerbicide1_dag_AnnualGrassHerbicide2_dag_SpearHerbicideTarget_dag_BlanketHerbicideTarget_dag_BroadleafHerbicide1_dag_BroadleafHerbicide2_dag_BroadleafTargetHerbicide1_dag_BroadleafTargetHerbicide2.txt : 
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Cover_Dec=[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ae, cg, af, ch, ag, aj, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Cover_Dec <[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ad, ae, cg, af, ch, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{Output_Dead=[dd, bc, 0r, bd, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, bt, dx, dy, ac, ae, cg, af, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0l, 0m, 0n, 0o], Output_Cover=[dd, bc, 0r, dg, 0u, 0v, 0w, dk, 0x, dn, bo, dt, bt, dx, ac, ae, cg, af, ag, aj, cp, ap, 0a, 0b, cz, 0j, 0l, 0m, 0n, 0o]}]



The DAG : dag_STHerbicideTarget_dag_NeedleHerbicideTarget_dag_BroadWeedsHerbicideTarget_dag_NeedleNatural_dag_TenaciousScarify1_dag_BroadWeedsNatural_dag_TenaciousScarify2_dag_C3GrassHerbicide_dag_C3GrassTargetHerbicide1_dag_C3GrassTargetHerbicide2_dag_ThemedaHerbicideTarget_dag_C4GrassHerbicide_dag_ThemedaNatural_dag_ThemedaScarify_dag_OnionHerbicideTarget_dag_OnionNatural_dag_WallabyHerbicideTarget_dag_WallabyNatural_dag_RedLegHerbicideTarget_dag_RedLegNatural_dag_WindmillHerbicideTarget_dag_WindmillNatural_dag_ExoticAnnualHerbicideTarget_dag_FragileScarify1_dag_RuderHerbicideTarget_dag_FragileScarify2_dag_RuderNatural_dag_FragileScarify3_dag_GrainHerbicideTarget_dag_SensitNativeHerbicideTarget_dag_SensitNativeNatural_dag_HardyNativeHerbicideTarget_dag_HardyNativeNatural_dag_AnnualGrassHerbicide1_dag_AnnualGrassHerbicide2_dag_SpearHerbicideTarget_dag_BlanketHerbicideTarget_dag_BlanketNatural_dag_BroadleafHerbicide1_dag_BroadleafHerbicide2_dag_SpearNatural_dag_BroadleafTargetHerbicide1_dag_BroadleafTargetHerbicide2.txt : 
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc], Cover_Dec=[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ae, cg, af, ch, ag, aj, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Cover_Dec <[dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ad, ae, cg, af, ch, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]



The DAG : dag_STHerbicideTarget_dag_STNatural_dag_TenaciousScarify1_dag_TenaciousScarify2_dag_ThemedaGrazeCattle_dag_ThemedaGrazeSheep_dag_ThemedaHarvest_dag_ThemedaHerbicideTarget_dag_ThemedaNatural_dag_ThemedaScarify_dag_TolerantFire_dag_TolerantHarvest_dag_WallabyGrazeCattle_dag_WallabyGrazeSheep_dag_WallabyHerbicideTarget_dag_WallabyNatural_dag_WindmillGrazeCattle_dag_WindmillGrazeSheep_dag_WindmillHerbicideTarget_dag_WindmillNatural_dag_ExoticAnnualHerbicideTarget_dag_FragileScarify1_dag_FragileScarify2_dag_FragileScarify3_dag_GrainHerbicideTarget_dag_HardyNativeGrazeCattle_dag_HardyNativeGrazeSheep_dag_HardyNativeHerbicideTarget_dag_HardyNativeNatural_dag_AnnualGrassHerbicide1_dag_AnnualGrassHerbicide2_dag_KilledFire1_dag_KilledFire2_dag_KilledFire3_dag_BlanketGrazeCattle_dag_BlanketGrazeSheep_dag_ModerateFire_dag_BlanketHarvest_dag_ModerateHarvest_dag_BlanketHerbicideTarget_dag_BlanketNatural_dag_BroadleafHerbicide1_dag_BroadleafHerbicide2_dag_BroadleafTargetHerbicide1_dag_BroadleafTargetHerbicide2_dag_NeedleGrazeCattle_dag_BroadWeedsGrazeCattle_dag_NeedleGrazeSheep_dag_BroadWeedsGrazeSheep_dag_NeedleHerbicideTarget_dag_BroadWeedsHerbicideTarget_dag_NeedleNatural_dag_BroadWeedsNatural_dag_C3GrassHerbicide_dag_C3GrassTargetHerbicide1_dag_C3GrassTargetHerbicide2_dag_C4GrassHerbicide_dag_OnionGrazeCattle_dag_OnionGrazeSheep_dag_OnionHerbicideTarget_dag_OnionNatural_dag_RedLegGrazeCattle_dag_RedLegGrazeSheep_dag_RedLegHerbicideTarget_dag_RedLegNatural_dag_RemoveTopSoil1_dag_RemoveTopSoil2_dag_RemoveTopSoil3_dag_RemoveTopSoil4_dag_RemoveTopSoil5_dag_RemoveTopSoil6_dag_RemoveTopSoil7_dag_RemoveTopSoil8_dag_RuderGrazeCattle_dag_RuderGrazeSheep_dag_RuderHerbicideTarget_dag_RuderNatural_dag_SensitiveFire_dag_SensitiveHarvest_dag_SensitiveHarvest2_dag_SensitNativeGrazeCattle_dag_SensitNativeGrazeSheep_dag_SensitNativeHerbicideTarget_dag_SensitNativeNatural_dag_SpearGrazeCattle_dag_SpearGrazeSheep_dag_SpearHerbicideTarget_dag_SpearNatural_dag_STGrazeCattle_dag_STGrazeSheep.txt : 
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   Notation |   Label Name                                                                                                                                                                                                                                                                                                                                                                                        |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   0A       |   [aq, de, du, bd, 0s, ad, bu, dy, ak, 0k, da, bp]                                                                                                                                                                                                                                                                                                                                                  |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   0B       |   [ar, cd, as, 0t, cw, ci, ax, 0y, al, am, bq]                                                                                                                                                                                                                                                                                                                                                      |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   0C       |   [dh, di]                                                                                                                                                                                                                                                                                                                                                                                          |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   0D       |   [ck, 0i, cl]                                                                                                                                                                                                                                                                                                                                                                                      |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   0E       |   [df, dn]                                                                                                                                                                                                                                                                                                                                                                                          |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   0F       |   [cc, by, bz]                                                                                                                                                                                                                                                                                                                                                                                      |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   0G       |   [ag, cj, ay, az, dn, dp]                                                                                                                                                                                                                                                                                                                                                                          |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   0H       |   [de, du, bd, ad, bu, dy, 0k, da]                                                                                                                                                                                                                                                                                                                                                                  |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   0I       |   [as, at, 0f, ax, 0z]                                                                                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   0J       |   [0p, 0q, ce, cf, cn, co]                                                                                                                                                                                                                                                                                                                                                                          |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   0K       |   [de, du, bd, da, bp]                                                                                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   0L       |   [dd, bc, 0r, 0u, 0v, 0w, dk, 0x, bo, dt, bt, dx, ac, cg, aj, cp, ap, 0a, 0b, as, at, cz, 0j, 0l, 0m, 0n, 0o]                                                                                                                                                                                                                                                                                      |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   0M       |   [dd, bc, 0r, df, dh, 0u, di, 0v, dj, 0w, dk, 0x, dl, dm, dn, dp, bo, dt, bt, bv, dx, cg, cp, ap, cz, 0l, 0m, 0o]                                                                                                                                                                                                                                                                                  |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   0N       |   [aq, de, du, dy, bp]                                                                                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   0O       |   [de, bd, 0s, ad, ch, cj, dl, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   0P       |   [0p, aa, ce, dh, ah, bm, cn, an, dr, br, dv, cx, 0g, db, ba]                                                                                                                                                                                                                                                                                                                                      |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   0Q       |   [ak]                                                                                                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   0R       |   [cj, ay, dp]                                                                                                                                                                                                                                                                                                                                                                                      |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   0S       |   [dg, by, bz, aa, cc, ab, ac, ad, ae, af, ah, ai, ck, aj, cl, ak, 0a, 0b, au, av, aw, 0g, 0h, 0i, 0j, 0k, 0n]                                                                                                                                                                                                                                                                                      |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   0T       |   [ar]                                                                                                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   0U       |   [as]                                                                                                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   0V       |   [df, ag, dn]                                                                                                                                                                                                                                                                                                                                                                                      |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   0W       |   [de, bd, 0s, ad, ch, dl, bp, cq, aq, du, bu, dy, 0k, da]                                                                                                                                                                                                                                                                                                                                          |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   0X       |   [0c]                                                                                                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   0Y       |   [at]                                                                                                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   0Z       |   [0d]                                                                                                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   AA       |   [0e]                                                                                                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   AB       |   [ct, 0t, 0f, 0z]                                                                                                                                                                                                                                                                                                                                                                                  |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   AC       |   [0f]                                                                                                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   AD       |   [aw]                                                                                                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   AE       |   [ax]                                                                                                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   AF       |   [bb, 0q, ab, cf, di, ai, bn, co, ao, ds, bs, dw, cy, 0h, dc]                                                                                                                                                                                                                                                                                                                                      |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   AG       |   [dd, bc, 0r, dg, 0u, 0v, 0w, dk, 0x, dn, bo, dt, bt, dx, ac, ae, cg, af, ag, aj, cp, ap, 0a, 0b, cz, 0j, 0l, 0m, 0n, 0o]                                                                                                                                                                                                                                                                          |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   AH       |   [du, bu, dy, dl, 0k]                                                                                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   AI       |   [de, bd, da]                                                                                                                                                                                                                                                                                                                                                                                      |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   AJ       |   [aq, bd, ch, dy, dl, bp]                                                                                                                                                                                                                                                                                                                                                                          |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   AK       |   [be]                                                                                                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   AL       |   [0s]                                                                                                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   AM       |   [0t]                                                                                                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   AN       |   [bb, dh, di, bm, bn, an, ao, dr, ds, br, bs, dv, dw, cx, cy, db, ba, dc]                                                                                                                                                                                                                                                                                                                          |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   AO       |   [bg]                                                                                                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   AP       |   [dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ae, cg, af, ch, ag, aj, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]                                                                                                                                                                                                                      |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   AQ       |   [0y]                                                                                                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------db, dc]> : [{Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]



The DAG : dag_STHerbicideTarget_dag_NeedleHerbicideTarget_dag_STNatural_dag_BroadWeedsHerbicideTarget_dag_NeedleNatural_dag_TenaciousScarify1_dag_BroadWeedsNatural_dag_C3GrassHerbicide_dag_C3GrassTargetHerbicide1_dag_ThemedaHarvest_dag_C3GrassTargetHerbicide2_dag_ThemedaHerbicideTarget_dag_C4GrassHerbicide_dag_ThemedaScarify_dag_TolerantFire_dag_OnionHerbicideTarget_dag_OnionNatural_dag_WallabyHerbicideTarget_dag_WallabyNatural_dag_RedLegHerbicideTarget_dag_RedLegNatural_dag_WindmillHerbicideTarget_dag_WindmillNatural_dag_ExoticAnnualHerbicideTarget_dag_RuderHerbicideTarget_dag_GrainHerbicideTarget_dag_SensitNativeHerbicideTarget_dag_HardyNativeHerbicideTarget_dag_HardyNativeNatural_dag_AnnualGrassHerbicide1_dag_AnnualGrassHerbicide2_dag_SpearHerbicideTarget_dag_BlanketHerbicideTarget_dag_BlanketNatural_dag_BroadleafHerbicide1_dag_BroadleafHerbicide2_dag_SpearNatural_dag_BroadleafTargetHerbicide1_dag_BroadleafTargetHerbicide2.txt : 
Input_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Cover=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
Output_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Output_Cover <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{}]
Input_Dead <[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]> : [{Output_Dead=[dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]}]
SR <[dd, bc, de, 0r, bd, df, 0s, 0u, 0v, dj, 0w, dk, 0x, dn, dp, bo, bp, dt, du, bt, bu, dx, dy, ac, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]> : [{}]




|   AR       |   [dd, bc, 0r, ac, cg, dk, aj, bo, cp, ap, dt, bt, dx, cz, 0j]                                                                                                                                                                                                                                                                                                                                      |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   AS       |   [0z]                                                                                                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   AT       |   [bl]                                                                                                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   AU       |   [dj, az, dq]                                                                                                                                                                                                                                                                                                                                                                                      |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   AV       |   [ad, ak]                                                                                                                                                                                                                                                                                                                                                                                          |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   AW       |   [bq]                                                                                                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   AX       |   [df, dg, ae, af, ag, dj, cj, ck, cl, dn, dp, dq, 0c, au, av, aw, ay, 0i, az]                                                                                                                                                                                                                                                                                                                      |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   AY       |   [de, dh, di, dl, dr, ds, du, dv, dw, dy, aa, ab, ad, ah, ai, ak, an, ao, aq, 0d, 0f, 0g, 0h, 0k, ba, 0p, bb, 0q, bd, 0s, 0t, bm, bn, bp, br, bs, bu, ce, cf, ch, cn, co, cq, ct, cw, cx, cy, da, db, dc]                                                                                                                                                                                          |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   AZ       |   [bu]                                                                                                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   BA       |   [0t, au, av, bg, aw, cj, ay, dp]                                                                                                                                                                                                                                                                                                                                                                  |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   BB       |   [bv]                                                                                                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   BC       |   [aq, bd, dy, bp]                                                                                                                                                                                                                                                                                                                                                                                  |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   BD       |   [dj, ck, 0i, az, cl, dq]                                                                                                                                                                                                                                                                                                                                                                          |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   BE       |   [al, am]                                                                                                                                                                                                                                                                                                                                                                                          |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   BF       |   [de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]                                                                                                                                                                                                                                                                                                                                      |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   BG       |   [ad, 0k]                                                                                                                                                                                                                                                                                                                                                                                          |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   BH       |   [0p, aa, ce, dh, ah, bm, cn, an, dr, br, dv, 0e, cx, 0g, db, ba]                                                                                                                                                                                                                                                                                                                                  |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   BI       |   [aq, du, 0s, dl, ak, 0k, cq]                                                                                                                                                                                                                                                                                                                                                                      |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   BJ       |   [0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, cx, cy, 0g, 0h, db, ba, dc]                                                                                                                                                                                                                                                                          |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   BK       |   [dj, ck, 0i, az]                                                                                                                                                                                                                                                                                                                                                                                  |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   BL       |   [aq, de, du, bd, 0s, ad, bu, dy, dl, 0k, da, bp]                                                                                                                                                                                                                                                                                                                                                  |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   BM       |   [cd]                                                                                                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   BN       |   [ct, dl, cm]                                                                                                                                                                                                                                                                                                                                                                                      |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   BO       |   [ch]                                                                                                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   BP       |   [as, at]                                                                                                                                                                                                                                                                                                                                                                                          |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   BQ       |   [ci]                                                                                                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   BR       |   [dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]  |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   BS       |   [cw, cm, do]                                                                                                                                                                                                                                                                                                                                                                                      |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   BT       |   [cm]                                                                                                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   BU       |   [0e, 0f]                                                                                                                                                                                                                                                                                                                                                                                          |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   BV       |   [0f, ax]                                                                                                                                                                                                                                                                                                                                                                                          |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   BW       |   [cc, bv, bw, bx, by, bz, cb]                                                                                                                                                                                                                                                                                                                                                                      |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   BX       |   [bb, 0q, ab, cf, di, ai, bn, co, ao, ds, bs, dw, 0e, cy, 0h, dc]                                                                                                                                                                                                                                                                                                                                  |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   BY       |   [0g, 0h]                                                                                                                                                                                                                                                                                                                                                                                          |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   BZ       |   [ct]                                                                                                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   CA       |   [cu]                                                                                                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   CB       |   [de, bd, 0s, ad, bf, bg, ch, bh, bi, dl, bk, ak, bl, bp, cq, aq, du, bu, dy, 0f, ax, 0k, da]                                                                                                                                                                                                                                                                                                      |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   CC       |   [0a, 0b, 0u, 0v, 0w, 0x, 0l, 0m, 0n, 0o]                                                                                                                                                                                                                                                                                                                                                          |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   CD       |   [cv]                                                                                                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   CE       |   [cw]                                                                                                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   CF       |   [dg, ae, au, af, av, aw, ck, 0i, cl]                                                                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   CG       |   [0p, bb, 0q, dh, di, bh, bi, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, al, cn, am, co, an, ao, 0c, cx, cy, 0g, 0h, db, ba, dc]                                                                                                                                                                                                                                                      |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   CH       |   [aq, de, du, bd, 0s, bu, dy, da, bp]                                                                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   CI       |   [0t, 0f]                                                                                                                                                                                                                                                                                                                                                                                          |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   CJ       |   [0t, ax]                                                                                                                                                                                                                                                                                                                                                                                          |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   CK       |   [dd, de, df, dj, dk, dq, dr, ds, dt, du, dv, dw, dx, an, ao, ap, aq, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, ce, cf, cg, ch, cn, co, cp, cx, cy, cz, db, dc]                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   CL       |   [de]                                                                                                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   CM       |   [df]                                                                                                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   CN       |   [dd, de, df, dg, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ac, ae, af, ag, aj, an, ao, ap, aq, 0a, 0b, au, av, aw, 0g, 0h, ay, 0i, az, 0j, 0k, 0l, 0m, 0n, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, ce, cf, cg, ch, cj, ck, cl, cn, co, cp, cq, cx, cy, cz, da, db, dc]                          |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   CO       |   [dj]                                                                                                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   CP       |   [ar, dj, ck, 0i, az, cl, dq]                                                                                                                                                                                                                                                                                                                                                                      |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   CQ       |   [dl]                                                                                                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   CR       |   [aq, de, du, bd, 0s, bu, ch, dy, 0k, da, bp, cq]                                                                                                                                                                                                                                                                                                                                                  |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   CS       |   [aq, bd, 0s, ak, 0k, cq]                                                                                                                                                                                                                                                                                                                                                                          |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   CT       |   [ad, ak, 0k]                                                                                                                                                                                                                                                                                                                                                                                      |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   CU       |   [de, bd, 0s, ad, dl, ak, bp, aq, du, bu, dy, 0k, da]                                                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   CV       |   [do]                                                                                                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   CW       |   [dp]                                                                                                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   CX       |   [bh, bi]                                                                                                                                                                                                                                                                                                                                                                                          |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   CY       |   [bu, 0k]                                                                                                                                                                                                                                                                                                                                                                                          |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   CZ       |   [dd, bc, de, 0r, bd, df, 0s, 0u, 0v, dj, 0w, dk, 0x, dn, dp, bo, bp, dt, du, bt, bu, dx, dy, ac, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]                                                                                                                                                                                                                                      |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   DA       |   [bg, bk]                                                                                                                                                                                                                                                                                                                                                                                          |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   DB       |   [aq, du, bd, 0s, bu, ch, dy, dl, 0k, da, bp, cq]                                                                                                                                                                                                                                                                                                                                                  |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   DC       |   [aq, de, du, bp]                                                                                                                                                                                                                                                                                                                                                                                  |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   DD       |   [aa, ab, ah, ai]                                                                                                                                                                                                                                                                                                                                                                                  |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   DE       |   [de, bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, 0e, dy, 0k, da]                                                                                                                                                                                                                                                                                                                                  |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   DF       |   [au, av, cj, ay, dp]                                                                                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   DG       |   [0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, aa, ab, ce, cf, ah, ai, cn, co, an, ao, 0c, cx, cy, 0g, 0h, db, ba, dc]                                                                                                                                                                                                                                                                      |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   DH       |   [dy]                                                                                                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   DI       |   [dd, bc, 0r, bd, df, 0s, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, du, bt, bu, dx, dy, ac, ad, ae, cg, af, ch, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   DJ       |   [dd, bc, 0r, df, dh, 0u, di, 0v, dj, 0w, dk, 0x, dm, dn, dp, bo, dt, bt, bv, dx, cg, cp, ap, cz, 0l, 0m, 0o]                                                                                                                                                                                                                                                                                      |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   DK       |   [dj, dn, dp]                                                                                                                                                                                                                                                                                                                                                                                      |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   DL       |   [aq, cq]                                                                                                                                                                                                                                                                                                                                                                                          |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   DM       |   [du, bd, da, bp]                                                                                                                                                                                                                                                                                                                                                                                  |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   DN       |   [aw, cl]                                                                                                                                                                                                                                                                                                                                                                                          |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   DO       |   [dd, de, df, dh, di, dj, dk, dl, dn, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, ag, an, ao, ap, aq, ay, az, 0l, 0m, 0o, ba, 0p, bb, 0q, bc, 0r, bd, 0s, 0u, 0v, 0w, 0x, bm, bn, bo, bp, br, bs, bt, bu, bv, bw, bx, ca, cb, ce, cf, cg, ch, cj, cm, cn, co, cp, cq, cx, cy, cz, da, db, dc]                                                                                                          |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   DP       |   [dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]                                                                                                                                                                                                          |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   DQ       |   [de, bd, 0s, ad, ch, cj, ak, dp, bp, cq, aq, du, bu, au, av, dy, aw, ay, 0k, da]                                                                                                                                                                                                                                                                                                                  |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   DR       |   [au, av, aw]                                                                                                                                                                                                                                                                                                                                                                                      |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   DS       |   [0a, 0b, as, 0u, 0v, 0w, 0x, 0l, 0m, 0n, 0o]                                                                                                                                                                                                                                                                                                                                                      |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   DT       |   [bf, bg, bh, bi, bk, bl]                                                                                                                                                                                                                                                                                                                                                                          |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   DU       |   [df, ag, dj, cj, ay, az, dn, dp, dq]                                                                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   DV       |   [ar, cd, as, ci, ax, 0z]                                                                                                                                                                                                                                                                                                                                                                          |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   DW       |   [dd, bc, 0r, bd, dg, 0u, 0v, 0w, dk, 0x, dl, dn, bo, bp, dt, bt, dx, dy, ac, ae, cg, af, ag, aj, ak, cp, cq, ap, aq, 0a, 0b, cz, 0j, 0l, 0m, 0n, 0o]                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   DX       |   [aq, de, du, dy, dl, bp]                                                                                                                                                                                                                                                                                                                                                                          |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   DY       |   [dd, bc, 0r, ac, cg, dk, aj, bo, cp, ap, dt, as, bt, at, dx, cz, 0j]                                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   DZ       |   [dj, 0i, cl, dq]                                                                                                                                                                                                                                                                                                                                                                                  |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   EA       |   [0f, ax, 0z]                                                                                                                                                                                                                                                                                                                                                                                      |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   EB       |   [au, av, dj, cj, ay, 0i, cl, dp]                                                                                                                                                                                                                                                                                                                                                                  |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   EC       |   [dd, bc, 0r, 0u, 0v, 0w, dk, 0x, bo, dt, bt, dx, ac, cg, aj, cp, ap, 0a, 0b, cz, 0j, 0l, 0m, 0n, 0o]                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   ED       |   [bv, bw, bx, ca, cb]                                                                                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   EE       |   [0d, dl]                                                                                                                                                                                                                                                                                                                                                                                          |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   EF       |   [0p, bb, 0q, de, bd, 0s, dh, di, dl, bm, bn, bp, dr, ds, br, bs, du, dv, bu, dw, dy, aa, ab, ce, ad, cf, ch, ah, ai, ak, cn, co, an, ao, cq, aq, cx, cy, 0g, 0h, 0k, da, db, ba, dc]                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   EG       |   [ax, dl]                                                                                                                                                                                                                                                                                                                                                                                          |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   EH       |   [bd, da]                                                                                                                                                                                                                                                                                                                                                                                          |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   EI       |   [aq, 0s, bp]                                                                                                                                                                                                                                                                                                                                                                                      |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   EJ       |   [cs, cu, cv, cr]                                                                                                                                                                                                                                                                                                                                                                                  |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   EK       |   [dd, bc, de, 0r, bd, 0s, 0u, 0v, 0w, dk, 0x, dl, dn, do, bo, bp, dt, du, bt, bu, bv, dx, bw, dy, bx, by, bz, cb, cc, ac, ad, cg, aj, ak, cp, ap, aq, 0a, 0b, cz, 0j, 0k, 0l, 0m, da, 0n, 0o]                                                                                                                                                                                                      |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   EL       |   [au, av, aw, cj, ay, dp]                                                                                                                                                                                                                                                                                                                                                                          |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   EM       |   [cc, bv, bw, bx, by, bz, ca, cb]                                                                                                                                                                                                                                                                                                                                                                  |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   EN       |   [dg, ae, af]                                                                                                                                                                                                                                                                                                                                                                                      |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   EO       |   [0p, bb, 0q, dh, di, bm, bn, dr, ds, br, bs, dv, dw, ce, cf, cn, co, an, ao, cx, cy, 0g, 0h, db, ba, dc]                                                                                                                                                                                                                                                                                          |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   EP       |   [be, bg, bk]                                                                                                                                                                                                                                                                                                                                                                                      |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   EQ       |   [de, bd, 0s, ad, ch, ak, bp, cq, aq, du, bu, dy, 0k, da]                                                                                                                                                                                                                                                                                                                                          |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   ER       |   [df, cv, dg, ae, af, ag, ci, dn]                                                                                                                                                                                                                                                                                                                                                                  |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   ES       |   [aq, de, du, bd, 0s, ad, bu, dy, 0k, da, bp]                                                                                                                                                                                                                                                                                                                                                      |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   ET       |   [bd, 0s, ad, ch, dl, ak, bp, cq, aq, du, bu, dy, 0k, da]                                                                                                                                                                                                                                                                                                                                          |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   EU       |   [aq, 0s, ad, ch, ak, bp, cq]                                                                                                                                                                                                                                                                                                                                                                      |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   EV       |   [aq, bd, ad, dy, bp, cq]                                                                                                                                                                                                                                                                                                                                                                          |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   EW       |   [cc, cd, cu, bv, bw, bx, by, bz, bl, ca, cb]                                                                                                                                                                                                                                                                                                                                                      |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   EX       |   [ac, dg, ae, af, ck, aj, ak, 0a, 0b, au, av, 0i, 0k]                                                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   EY       |   [ct, 0t, 0f]                                                                                                                                                                                                                                                                                                                                                                                      |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   EZ       |   [aq, de, du, ch, bp]                                                                                                                                                                                                                                                                                                                                                                              |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   FA       |   [aq, bd, 0k, bp]                                                                                                                                                                                                                                                                                                                                                                                  |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   FB       |   [df, dg, ae, af, ag, dn]                                                                                                                                                                                                                                                                                                                                                                          |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   [X]
    |   
    |   
    |   
   0A   
    |   
  ----- 
  |   | 
  |   | 
 0B  0C 
        
   [X]
    |   
    |   
    |   
   0E   
    |   
  ----- 
  |   | 
  |   | 
 0F  0G 
        
   [X]
    |   
    |   
    |   
   0I   
    |   
  ----- 
  |   | 
  |   | 
 0J  0K 
        
   [X]
    |   
    |   
    |   
   0M   
    |   
  ----- 
  |   | 
  |   | 
 0N  0O 
      | 
      | 
      | 
      | 
     0P 
        
 [X]
  | 
  | 
  | 
 0R 
  | 
  | 
  | 
  | 
 0S 
  | 
  | 
  | 
  | 
 0T 
  | 
  | 
  | 
  | 
 0U 
    
   [X]
    |   
    |   
    |   
   0W   
    |   
  ----- 
  |   | 
  |   | 
 0X  0Y 
        
       [X]
        |       
        |       
        |       
       AA       
        |       
    ---------   
    |       |   
    |       |   
   AB      AE   
    |       |   
  -----   ----- 
  |   |   |   | 
  |   |   |   | 
 AC  AD  AF  AG 
              | 
              | 
              | 
              | 
             AH 
                
     [X]
      |     
      |     
      |     
     AJ     
      |     
  --------- 
  |   |   | 
  |   |   | 
 AK  AL  AM 
            
       [X]
        |       
        |       
        |       
       AO       
        |       
        |       
        |       
        |       
       AP       
        |       
  ------------- 
  |   |   |   | 
  |   |   |   | 
 AQ  AR  AT  AU 
      |         
      | 
      | 
      | 
     AS 
        
   [X]
    |   
    |   
    |   
   AW   
    |   
    |   
    |   
    |   
   AX   
    |   
  ----- 
  |   | 
  |   | 
 AY  AZ 
      | 
      | 
      | 
      | 
     BA 
      | 
      | 
      | 
      | 
     BB 
        
   [X]
    |   
    |   
    |   
   BD   
    |   
    |   
    |   
    |   
   BE   
    |   
  ----- 
  |   | 
  |   | 
 BF  BI 
  |     
  | 
  | 
  | 
 BG 
  | 
  | 
  | 
  | 
 BH 
    
       [X]
        |       
        |       
        |       
       BK       
        |       
  ------------- 
  |   |   |   | 
  |   |   |   | 
 BL  BM  BN  BO 
                
   [X]
    |   
    |   
    |   
   BQ   
    |   
    |   
    |   
    |   
   BR   
    |   
  ----- 
  |   | 
  |   | 
 BS  BU 
  |   | 
  |   | 
  |   | 
  |   | 
 BT  BV 
        
 [X]
  | 
  | 
  | 
 BX 
  | 
  | 
  | 
  | 
 BY 
    
 [X]
  | 
  | 
  | 
 CA 
  | 
  | 
  | 
  | 
 CB 
    
                             [X]
                              |                             
                              |                             
                              |                             
                             CD                             
                              |                             
                              |                             
                              |                             
                              |                             
                             CE                             
                              |                             
                  ----------------------------------------- 
                  |                       |         |     | 
                  |                       |         |     | 
                 CF                      DB        DK    DQ 
                  |                       |         |     | 
              -------------------     ---------   -----   | 
              |                 |     |   |   |   |   |   | 
              |                 |     |   |   |   |   |   | 
             CG                CU    DC  DD  DG  DL  DN  DR 
              |                 |         |   |   |   |     
    ---------------           -----       |   |   |   | 
    |             |           |   |       |   |   |   | 
    |             |           |   |       |   |   |   | 
   CH            CL          CV  CY      DE  DH  DM  DO 
    |             |           |   |       |   |       | 
  -----   -------------       |   |       |   |       | 
  |   |   |   |       |       |   |       |   |       | 
  |   |   |   |       |       |   |       |   |       | 
 CI  CK  CM  CN      CO      CW  CZ      DF  DI      DP 
  |                   |       |   |           |         
  |                   |       |   |           | 
  |                   |       |   |           | 
  |                   |       |   |           | 
 CJ                  CP      CX  DA          DJ 
                      |                         
                    ------- 
                    |     | 
                    |     | 
                   CQ    CT 
                    |       
                  ----- 
                  |   | 
                  |   | 
                 CR  CS 
                        
         [X]
          |         
          |         
          |         
         DT         
          |         
  ---------------   
  |   |   |     |   
  |   |   |     |   
 DU  DV  DW    DZ   
          |     |   
          |   ----- 
          |   |   | 
          |   |   | 
         DX  EA  EB 
          |         
          | 
          | 
          | 
         DY 
            
     [X]
      |     
      |     
      |     
     ED     
      |     
  -------   
  |     |   
  |     |   
 EE    EF   
        |   
      ----- 
      |   | 
      |   | 
     EG  EH 
            
     [X]
      |     
      |     
      |     
     EJ     
      |     
  --------- 
  |   |   | 
  |   |   | 
 EK  EM  EO 
  |   |     
  |   | 
  |   | 
  |   | 
 EL  EN 
        
 [X]
  | 
  | 
  | 
 EQ 
  | 
  | 
  | 
  | 
 ER 
    
     [X]
      |     
      |     
      |     
     ET     
      |     
      |     
      |     
      |     
     EU     
      |     
      |     
      |     
      |     
     EV     
      |     
      |     
      |     
      |     
     EW     
      |     
  --------- 
  |   |   | 
  |   |   | 
 EX  EY  EZ 
          | 
          | 
          | 
          | 
         FA 
            
 [X]
  | 
  | 
  | 
 FC 
  | 
  | 
  | 
  | 
 FD 
    
     [X]
      |     
      |     
      |     
     FF     
      |     
    ------- 
    |     | 
    |     | 
   FG    FJ 
    |       
  ----- 
  |   | 
  |   | 
 FH  FI 
        
 [X]
  | 
  | 
  | 
 FL 
  | 
  | 
  | 
  | 
 FM 
    
           [X]
            |           
            |           
            |           
           FO           
            |           
  --------------------- 
  |     |       |     | 
  |     |       |     | 
 FP    FR      FU    FY 
  |     |       |     | 
  |   -----   -----   | 
  |   |   |   |   |   | 
  |   |   |   |   |   | 
 FQ  FS  FT  FV  FX  FZ 
              |         
              | 
              | 
              | 
             FW 
                
